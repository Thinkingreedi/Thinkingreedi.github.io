{"title":"Git版本控制：提升开发效率的利器","uid":"ad76127bba596077a6c93849dfcec704","slug":"前端--详解Git(快速入门)","date":"2023-01-17T02:06:29.000Z","updated":"2025-07-14T15:12:20.467Z","comments":true,"path":"api/articles/前端--详解Git(快速入门).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/6796a1b23dba46b1a5cb2263314b0bc4.jpeg","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"1、Git-概念\"><a href=\"#1、Git-概念\" class=\"headerlink\" title=\"1、Git 概念\"></a>1、Git 概念</h2><h3 id=\"1-1-关于版本控制\"><a href=\"#1-1-关于版本控制\" class=\"headerlink\" title=\"1.1 关于版本控制\"></a>1.1 关于版本控制</h3><p><strong>文件的版本管理的问题</strong></p>\n<ul>\n<li>操作麻烦：每次都需要复制 → 粘贴 → 重命名</li>\n<li>命名不规范：无法通过文件名知道具体做了哪些修改</li>\n<li>容易丢失：如果硬盘故障或不小心删除，文件很容易丢失</li>\n<li>协作困难：需要手动合并每个人对项目文件的修改，合并时极易出错</li>\n</ul>\n<p><strong>版本控制软件</strong></p>\n<ul>\n<li>概念：<strong>版本控制软件是一个用来记录文件变化，以便将来查阅特定版本修订情况的系统，因此有时也叫做“版本控制系统”</strong></li>\n<li>解释：把<strong>手工管理文件版本</strong>的方式,改为由<strong>软件管理文件的版本</strong>;这个负责管理文件版本的软件，叫做“版本控制软件”。</li>\n</ul>\n<p><strong>使用版本控制软件的好处</strong></p>\n<ul>\n<li>操作简便：只需识记几组简单的终端命令，即可快速上手常见的版本控制软件</li>\n<li>易于对比：基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因</li>\n<li>易于回溯：可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态</li>\n<li>不易丢失：在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来</li>\n<li>协作方便：基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作</li>\n</ul>\n<p><strong>版本控制系统的分类</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2acb4f36d517415b80e6cdc3eaf61f06.png#pic_center\"></p>\n<ol>\n<li>本地版本控制系统</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/570a1876c48e42eeaa520575eec491cf.png#pic_center\"></p>\n<ul>\n<li>优点：使用软件来记录文件的不同版本，提高了工作效率，降低了手动维护版本的出错率</li>\n<li>缺点：<strong>单机运行，不支持多人协作开发；版本数据库故障后，所有历史更新记录会丢失</strong></li>\n</ul>\n<ol start=\"2\">\n<li>集中化的版本控制系统（SVN）</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/619e06de61c640d99e1b747c5490522e.png#pic_center\"></p>\n<ul>\n<li>特点:基于服务器、客户端的运行模式<ul>\n<li>服务器保存文件的所有更新记录</li>\n<li>客户端只保留最新的文件版本</li>\n</ul>\n</li>\n<li>优点:联网运行，支持多人协作开发</li>\n<li>缺点:<ul>\n<li><strong>不支持离线提交版本更新</strong></li>\n<li><strong>中心服务器崩溃后，所有人无法正常工作</strong></li>\n<li><strong>版本数据库故障后，所有历史更新记录会丢失</strong></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>分布式版本控制系统（Git）</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/bdf4807a6f7e42888d8dbdf70a04965c.png#pic_center\"></p>\n<ul>\n<li><p>特点:基于服务器、客户端的运行模式</p>\n<ul>\n<li><p>服务器保存文件的所有更新版本</p>\n</li>\n<li><p>客户端是服务器的完整备份，并不是只保留文件的最新版本</p>\n</li>\n</ul>\n</li>\n<li><p>优点:</p>\n<ul>\n<li>联网运行，支持多人协作开发</li>\n<li>客户端断网后支持离线本地提交版本更新</li>\n<li>服务器故障或损坏后，可使用任何一个客户端的备份进行恢复</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-Git-基础概念\"><a href=\"#1-2-Git-基础概念\" class=\"headerlink\" title=\"1.2 Git 基础概念\"></a>1.2 Git 基础概念</h3><p><strong>Git 概念</strong></p>\n<ul>\n<li>Git 是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理</li>\n<li>特点:项目越大越复杂，协同开发者越多，越能体现出 Git 的高性能和高可用性!</li>\n</ul>\n<p><strong>Git 特性</strong></p>\n<ul>\n<li><p>Git 之所以快速和高效，主要依赖于它的如下两个特性:</p>\n<ol>\n<li><strong>直接记录快照，而非差异比较</strong></li>\n<li><strong>近乎所有操作都是本地执行</strong></li>\n</ol>\n</li>\n<li><p>传统的版本控制系统（例如 SVN)是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步累积的差异</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/f8c06b47d7ed47c987d34cf67a8c701a.png#pic_center\"></p>\n<ul>\n<li><p>好处：节省磁盘空间</p>\n</li>\n<li><p>缺点：耗时、效率低、在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p>\n</li>\n<li><p>Git 快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，如果文件没有修改,Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/331f0a9ffe7b4f118f308579917e59dc.png#pic_center\"></p>\n<ul>\n<li><p>缺点:占用磁盘空间较大</p>\n</li>\n<li><p>优点:版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可</p>\n</li>\n<li><p>特点:空间换时间</p>\n</li>\n<li><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息</p>\n</li>\n<li><p>特性:</p>\n<ol>\n<li>断网后依旧可以在本地对项目进行版本管理</li>\n<li>联网后，把本地修改的记录同步到云端服务器即可</li>\n</ol>\n</li>\n</ul>\n<p><strong>Git 中的三个区域</strong></p>\n<ul>\n<li>使用 Git 管理的项目，拥有三个区域，分别是：<ol>\n<li><strong>工作区：处理工作的区域</strong></li>\n<li><strong>暂存区：已完成的工作的临时存放区域，等待被提交</strong></li>\n<li><strong>Git 仓库：最终的存放区域</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>Git 中的三种状态</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/5d74b3e15b6042b4afb2a893cba55a48.png#pic_center\"></p>\n<ul>\n<li>注意:<ul>\n<li>工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。</li>\n<li>如果文件已修改并放入暂存区，就属于已暂存状态。</li>\n<li>如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本的 Git 工作流程</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/aaa129261c854ecb9a7056c472f4fea0.png#pic_center\"></p>\n<ul>\n<li>基本的 Git 工作流程如下:<ol>\n<li>在工作区中修改文件</li>\n<li>将你想要下次提交的更改进行暂存</li>\n<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2、Git-基础操作\"><a href=\"#2、Git-基础操作\" class=\"headerlink\" title=\"2、Git 基础操作\"></a>2、Git 基础操作</h2><h3 id=\"2-1-安装并配置-Git\"><a href=\"#2-1-安装并配置-Git\" class=\"headerlink\" title=\"2.1 安装并配置 Git\"></a>2.1 安装并配置 Git</h3><p><strong>下载并安装</strong></p>\n<ul>\n<li>下载地址：<a href=\"https://git-scm.com/downloads\">Git - Downloads (git-scm.com)</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/63ba339f57de4d5fabaf8a5d6267a23f.png#pic_center\"></p>\n<p><strong>配置用户信息</strong></p>\n<ul>\n<li><strong>安装完 Git 之后，要做的第一件事就是设置自己的用户名和邮件地址</strong>。因为通过 Git 对项目进行版本管理的时候，Git 需要使用这些基本信息，来记录是谁对项目进行了操作:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git config --global user.name &quot;xxxx&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git config --global user.email &quot;xxxxxxxx&quot;</span></span></code></pre></div><ul>\n<li><p><strong>注意:如果使用了–global 选项，那么该命令只需要运行一次，即可永久生效</strong></p>\n</li>\n<li><p>通过 git config –global user.name 和 git config –global user.email 配置的用户名和邮箱地址，会被写入到 C:&#x2F;Users&#x2F;用户名文件夹&#x2F;.gitconfig 文件中</p>\n</li>\n</ul>\n<p><strong>检查配置信息</strong></p>\n<ul>\n<li>除了使用记事本查看全局的配置信息之外，还可以运行如下的终端命令，快速的查看 Git 的全局配置信息:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">查看所有的全局配置项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git config --list --global</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">查看指定的全局配置项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git config user.name</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git config user.email</span></span></code></pre></div><p><strong>获取帮助信息</strong></p>\n<ul>\n<li>可以使用 git help &lt; verb &gt;命令，无需联网即可在浏览器中打开帮助手册，例如:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">打开 git config 命令的帮助手册</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git help config</span></span></code></pre></div><ul>\n<li>如果不想查看完整的手册，那么可以用-h 选项获得更简明的”help” 输出:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">想要获取 git config 命令的快速参考</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git config -h</span></span></code></pre></div><h3 id=\"2-2-Git-的基本操作\"><a href=\"#2-2-Git-的基本操作\" class=\"headerlink\" title=\"2.2 Git 的基本操作\"></a>2.2 Git 的基本操作</h3><p><strong>获取 Git 仓库的两种方式</strong></p>\n<ol>\n<li><strong>将尚未进行版本控制的本地目录转换为 Git 仓库</strong>(git init)</li>\n<li><strong>从其它服务器克隆一个已存在的 Git 仓库</strong>(git clone xxx)</li>\n</ol>\n<p><strong>在现有目录中初始化仓库</strong></p>\n<ul>\n<li>如果自己有一个尚未进行版本控制的项目目录，想要用 Git.来控制它，需要执行如下两个步骤:<ol>\n<li>在项目目录中，通过鼠标右键打开“<strong>Git Bash Here</strong>“</li>\n<li>执行<strong>git init</strong>命令将当前的目录转化为 Git 仓库</li>\n</ol>\n</li>\n<li>git init 命令会创建一个名为.git 的隐藏目录，这个.git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。</li>\n</ul>\n<p><strong>工作区文件的 4 种状态</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/5ce7fd306f194526aecb5e6766a4d0ce.png#pic_center\"></p>\n<ul>\n<li><strong>git 操作的终极结果：让工作区的文件都处于“未修改”的状态</strong></li>\n</ul>\n<p><strong>检查文件的状态</strong></p>\n<ul>\n<li>先创建一个文件夹，里面新建一个 index.html 文件，可以使用<strong>git status</strong>命令查看文件处于什么状态，例如:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/65422f21c10345779fa205bd27692c32.png#pic_center\"></p>\n<ul>\n<li><p>在状态报告中可以看到新建的 index.html 文件出现在 Untracked files(未跟踪的文件）下面</p>\n</li>\n<li><p>未跟踪的文件意味着 Git 在之前的快照(提交）中没有这些文件;Git 不会自动将之纳入跟踪范围除非明确地告诉它“我需要使用 Git 跟踪管理该文件”</p>\n</li>\n<li><p>使用 git status 输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下两条完全等价的命令，其中-s 是–short 的简写形式:</p>\n</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">以精简的方式显示文件状态</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git status -s</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git status --short</span></span></code></pre></div><ul>\n<li>未跟踪文件前面有红色的??标记，例如：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2da8bfccf494418dbd23eb63bdcc034b.png#pic_center\"></p>\n<p><strong>跟踪新文件</strong></p>\n<ul>\n<li>使用命令 git add 开始跟踪一个文件。所以，要跟踪 index.html 文件，运行如下的命令即可:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git add xxx(文件名)</span></span></code></pre></div><ul>\n<li>此时再运行 git status 命令，会看到 index.html 文件在 Changes to be committed 这行的下面，说明已被跟踪，并处于暂存状态:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/b821f6a7180749118c4290405b6c6b1c.png#pic_center\"></p>\n<ul>\n<li>以精简的方式显示文件的状态，新添加到暂存区中的文件前面有绿色的 A 标：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6241e4c17e5a4f518f5df7a6aaecfbe1.png#pic_center\"></p>\n<p><strong>提交更新</strong></p>\n<ul>\n<li>现在暂存区中有一个 index.html 文件等待被提交到 Git 仓库中进行保存。可以执行 git commit 命令进行提交,其中-m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git commit -m &quot;新建了 index.html 文件&quot;</span></span></code></pre></div><ul>\n<li>提交成功后，显示如下信息：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6605d0eb6596488d86b5252e6dff054c.png#pic_center\"></p>\n<ul>\n<li>提交成功之后，再次检查文件的状态，得到提示如下:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6c095dcdf5d34a85ac944159e910a6db.png#pic_center\"></p>\n<ul>\n<li>证明工作区中所有的文件都处于“未修改”的状态，没有任何文件需要被提交</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/08511fc4a8eb463bb34eef6761c04fdb.png#pic_center\"></p>\n<p><strong>对已提交的文件进行修改</strong></p>\n<ul>\n<li>目前，index.html 文件已经被 Git 跟踪，并且工作区和 Git 仓库中的 index.html 文件内容保持一致。当我们修改了工作区中 index.html 的内容之后，再次运行 git status 和 git status -s 命令，会看到如下的内容</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/4574466ac541440b887048ac957fbc8f.png#pic_center\"></p>\n<ul>\n<li>文件 index.html 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区</li>\n<li><strong>注意:修改过的、没有放入暂存区的文件前面有红色的 M 标记</strong></li>\n</ul>\n<p><strong>暂存已修改的文件</strong></p>\n<ul>\n<li>目前，工作区中的 index.html 文件已被修改，如果要暂存这次修改，需要再次运行<strong>git add</strong> 命令，这个命令是个多功能的命令，主要有如下 3 个功效:<ol>\n<li>可以用它开始跟踪新文件</li>\n<li>把已跟踪的、且已修改的文件放到暂存区</li>\n<li>把有冲突的文件标记为已解决状态</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6bbb49ca299c40afa9fbbddeedb9b013.png#pic_center\"></p>\n<p><strong>提交已暂存的文件</strong></p>\n<ul>\n<li>再次运行**git commit -m “提交消息”**命令，即可将暂存区中记录的 index.html 的快照，提交到 Git 仓库中进行保存:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/fa76e4c3396b4e8793aa090e51634b29.png#pic_center\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/6b6d9ec3faef4e52860b047bf30bd138.png#pic_center\"></p>\n<p><strong>撤销对文件的修改</strong></p>\n<ul>\n<li>撤销对文件的修改指的是:把对工作区中对应文件的修改，还原成 Git 仓库中所保存的版本</li>\n<li>操作的结果:所有的修改会丢失，且无法恢复!危险性比较高，请慎重操作!</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/3711f3b9440948da90895769fbf2bfed.png#pic_center\"></p>\n<ul>\n<li><strong>撤销操作的本质:用 Git 仓库中保存的文件，覆盖工作区中指定的文件</strong></li>\n</ul>\n<p><strong>向暂存区中一次性添加多个文件</strong></p>\n<ul>\n<li>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git add .</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/9b51a282e5b345c1b6292b3d05ac12d8.png#pic_center\"></p>\n<p><strong>取消暂存的文件</strong></p>\n<ul>\n<li>如果需要从暂存区中移除对应的文件，可以使用如下的命令:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git reset HEAD 要移除的文件名</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/925600a78c2e4676b734108409b8e8dc.png#pic_center\"></p>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">批量移除</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git reset HEAD .</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/844058a62a7e4662b07800ebb15f0bc4.png#pic_center\"></p>\n<p><strong>跳过使用暂存区域</strong></p>\n<ul>\n<li>Git 标准的工作流程是工作区 → 暂存区 →Git 仓库，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了工作区 →Git 仓库。</li>\n<li>Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给<strong>git commit 加上-a</strong>选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git commit -a -m &quot;描述信息&quot;</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/3362742b56444f46a56a1aaef8ada23a.png#pic_center\"></p>\n<p><strong>移除文件</strong></p>\n<ul>\n<li>从 Git 仓库中移除文件的方式有两种:<ol>\n<li>从 Git 仓库和工作区中同时移除对应的文件</li>\n<li>只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</li>\n</ol>\n</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">从 Git 仓库和工作区中同时移除 index.js 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git rm -f index.js</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">只从 Git 仓库中移除 index.css，但保留工作区中的 index.css 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git rm --cached index.css</span></span></code></pre></div><p><strong>忽略文件</strong></p>\n<ul>\n<li><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以创建一个名为**.gitignore**的配置文件，列出要忽略的文件的匹配模式。<br>文件.gitignore 的格式规范如下:</p>\n<ol>\n<li><strong>以#开头的是注释</strong></li>\n<li><strong>以&#x2F;结尾的是目录</strong></li>\n<li><strong>以&#x2F;开头防止递归</strong></li>\n<li><strong>以!开头表示取反</strong></li>\n<li><strong>可以使用 glob 模式进行文件和文件夹的匹配 (glob 指简化了的正则表达式)</strong></li>\n</ol>\n</li>\n<li><p>所谓的 glob 模式是指简化了的正则表达式:</p>\n<ol>\n<li>星号*匹配零个或多个任意字符</li>\n<li>[abc]匹配任何一个列在方括号中的字符（此案例匹配一个 a 或匹配一个 b 或匹配一个 c)</li>\n<li>问号?只匹配一个任意字符</li>\n<li>在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹<br>配所有 0 到 9 的数字)</li>\n<li>两个星号* *表示匹配任意中间目录(比如 a&#x2F; **&#x2F;z 可以匹配 a&#x2F;z、 a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等)</li>\n</ol>\n</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">忽略了所有的 .a 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">\\*.a</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">跟踪所有的 lib.a，即便你在前面忽略了.a 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">!lab.a</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">/TODO</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">忽略任何目录下名为 build 的文件夹</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">build/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">忽略任何目录下名为 build 的文件夹</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">doc/\\*. txt</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">忽略 doc/目录及其所有子目录下的.pdf 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">doc/\\*</span><span style=\"color: #89DDFF; font-style: italic\">_</span><span style=\"color: #F07178; font-style: italic\">/</span><span style=\"color: #89DDFF; font-style: italic\">_</span><span style=\"color: #BABED8\">.pdf</span></span></code></pre></div><p><strong>查看提交历史</strong></p>\n<ul>\n<li>如果希望回顾项目的提交历史，可以使用 git log 这个简单且有效的命令</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">按时间先后顺序列出所有的提交历史</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git log</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">只展示最新的两条提交历史，数字可以按需进行填写</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git log -2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">在一行上展示最近两条提交历史的信息</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git log -2 --pretty=oneline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">在一行上展示最近两条提交历史的信息，并自定义输出的格式</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">%h 提交的简写哈希值 %an 作者名字 %ar 作者修订日期，按多久以前的方式显示 %s 提交说明</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span></span></code></pre></div><p><strong>回退到指定版本</strong></p>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">在一行上展示所有的提交历史</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git log --pretty=oneline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">使用 git reset --hard 命令，根据指定的提交 ID 回退到指定版本</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git reset --hard&lt; CommitID &gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">在旧版本中使用 git relog --pretty=online 命令，查看命令操作的历史</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git relog --pretty=oneline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">再次根据最新的提交 ID，跳转到最新的版本</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git reset --hard&lt; CommitID &gt;</span></span></code></pre></div><h2 id=\"3、Github-操作\"><a href=\"#3、Github-操作\" class=\"headerlink\" title=\"3、Github 操作\"></a>3、Github 操作</h2><h3 id=\"3-1-关于开源\"><a href=\"#3-1-关于开源\" class=\"headerlink\" title=\"3.1 关于开源\"></a>3.1 关于开源</h3><ul>\n<li><p>开源是指不仅提供程序还提供程序的源代码；闭源是只提供程序，不提供源代码</p>\n</li>\n<li><p>开源并不意味着完全没有限制，为了限制使用者的使用范围和保护作者的权利，每个开源项目都应该遵守开源许可协议（ Open Source License )</p>\n<ol>\n<li><p>BSD (Berkeley Software Distribution)</p>\n</li>\n<li><p>Apache Licence 2.0</p>\n</li>\n<li><p>GPL (GNU General Public License)</p>\n<ul>\n<li><p>具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售</p>\n</li>\n<li><p>使用 GPL 的最著名的软件项目是:Linux</p>\n</li>\n</ul>\n</li>\n<li><p>LGPL (GNU Lesser General Public License)</p>\n</li>\n<li><p>MIT(Massachusetts Institute of Technology, MIT)</p>\n<ul>\n<li>是目前限制最少的协议，唯一的条件:在修改后的代码或者发行包中，必须包含原作者的许可信息</li>\n<li>使用 MIT 的软件项目有: jquery、Node.js</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><a href=\"https://www.runoob.com/w3cnote/open-source-license.html\">各种开源协议介绍 | 菜鸟教程 (runoob.com)</a></p>\n</li>\n<li><p>开源给使用者更多的控制权;开源让学习变得容易;开源才有真正的安全(我为人人，人人为我)</p>\n</li>\n<li><p>专门用于免费存放开源项目源代码的网站，叫做开源项目托管平台。目前世界上比较出名的开源项目托管平台主要有以下 3 个:</p>\n<ul>\n<li>**Github(**全球最牛的开源项目托管平台，没有之一)</li>\n<li><strong>Gitlab</strong>(对代码私有性支持较好，因此企业用户较多)</li>\n<li><strong>Gitee</strong>(又叫做码云，是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好)</li>\n</ul>\n</li>\n<li><p>Github（Github≠Git）是全球最大的开源项目托管平台。因为只支持 Git 作为唯一的版本控制工具，故名 GitHub。在 Github 中，你可以:</p>\n<ul>\n<li>关注自己喜欢的开源项目，为其点赞打 call</li>\n<li>为自己喜欢的开源项目做贡献(Pull Request)</li>\n<li>和开源项目的作者讨论 Bug 和提需求(lssues)</li>\n<li>把喜欢的项目复制一份作为自己的项目进行修改(Fork)</li>\n<li>创建属于自己的开源项目</li>\n<li>etc…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-注册账号\"><a href=\"#3-2-注册账号\" class=\"headerlink\" title=\"3.2 注册账号\"></a>3.2 注册账号</h3><ul>\n<li>访问 Github 的官网首页<a href=\"https://github.com/\">https://github.com/</a></li>\n<li>点击“<strong>Sign up</strong>”按钮跳转到注册页面</li>\n<li>填写可用的<strong>用户名、邮箱、密码</strong></li>\n<li>通过点击箭头的形式，将验证图片摆正点击“<strong>Create account</strong>”按钮注册新用户</li>\n<li>登录到第三步填写的邮箱中，<strong>点击激活链接，完成注册</strong></li>\n</ul>\n<h3 id=\"3-3-远程仓库的使用\"><a href=\"#3-3-远程仓库的使用\" class=\"headerlink\" title=\"3.3 远程仓库的使用\"></a>3.3 远程仓库的使用</h3><ol>\n<li><strong>新建空白远程仓库</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/3854e6113e424926a4eef29fa1061d51.png#pic_center\"></p>\n<ol start=\"2\">\n<li><strong>成功创建</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/ba3b8e5b3ad44da0b07dc376f314b5a5.png#pic_center\"></p>\n<ol start=\"3\">\n<li><strong>远程仓库的两种访问方式</strong></li>\n</ol>\n<ul>\n<li>Github 上的远程仓库，有两种访问方式，分别是 HTTPS 和 SSH。它们的区别是:<ul>\n<li>**HTTPS:**零配置;但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功</li>\n<li>**SSH:**需要进行额外的配置;但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码</li>\n</ul>\n</li>\n<li>注意:在实际开发中，推荐使用 SSH 的方式访问远程仓库。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>使用 HTTPS 将本地仓库上传到 Github</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/b64e638f97364a16b42d6906c62f55ca.png#pic_center\"></p>\n<ul>\n<li>修改本地文件暂存提交后想同步 Github 仓库直接 <strong>git push</strong>即可</li>\n</ul>\n<ol start=\"5\">\n<li><strong>SSH key</strong></li>\n</ol>\n<ul>\n<li><p>SSH key 的作用:实现本地仓库和 Github 之间免登录的加密数据传输</p>\n</li>\n<li><p>SSH key 的好处:免登录身份认证、数据加密传输</p>\n</li>\n<li><p>SSH key 由两部分组成，分别是:</p>\n<ol>\n<li>id_rsa(私钥文件，存放于客户端的电脑中即可)</li>\n<li><strong>id_rsa.pub</strong>(公钥文件，需要配置到 Github 中)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"6\">\n<li><strong>生成 SSH key</strong></li>\n</ol>\n<ul>\n<li>打开 Git Bash</li>\n<li>粘贴如下的命令，并将<a href=\"mailto:&#x79;&#x6f;&#x75;&#114;&#x5f;&#101;&#x6d;&#x61;&#105;&#x6c;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#x79;&#x6f;&#x75;&#114;&#x5f;&#101;&#x6d;&#x61;&#105;&#x6c;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>替换为注册 Github 账号时填写的邮箱:<ul>\n<li>ssh-keygen -t rsa -b 4096 -C “<a href=\"mailto:&#x79;&#111;&#x75;&#114;&#x5f;&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;\">&#x79;&#111;&#x75;&#114;&#x5f;&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>“</li>\n</ul>\n</li>\n<li>连续敲击 3 次回车，即可在 C\\Users\\用户名文件夹.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件</li>\n</ul>\n<ol start=\"7\">\n<li><strong>配置 SSH key</strong></li>\n</ol>\n<ul>\n<li>使用记事本打开 id_rsa.pub 文件，复制里面的文本内容</li>\n<li>在浏览器中登录 Github，点击头像-&gt; Settings -&gt; SSH and GPG Keys -&gt; New SSH key</li>\n<li>将 id_rsa.pub 文件中的内容，粘贴到 Key 对应的文本框中</li>\n<li>在 Title 文本框中任意填写一个名称，来标识这个 Key 从何而来</li>\n</ul>\n<ol start=\"8\">\n<li><strong>检测 Github 的 SSH key 是否配置成功</strong></li>\n</ol>\n<ul>\n<li>打开 Git Bash，输入如下命令并回车，输入 yes 看到如下信息，说明 SSH key 已经配置成功了：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/44b4231b7b314a07ad98f793ae1039be.png#pic_center\"></p>\n<ol start=\"9\">\n<li><strong>基于 SSH 将本地仓库上传到 Github</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20734f1f66944cf19dc41b001c1554c5.png#pic_center\"></p>\n<ol start=\"10\">\n<li><strong>将远程仓库克隆到本地</strong></li>\n</ol>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git clone 远程仓库的地址</span></span></code></pre></div><h2 id=\"4、Git-分支操作\"><a href=\"#4、Git-分支操作\" class=\"headerlink\" title=\"4、Git 分支操作\"></a>4、Git 分支操作</h2><h3 id=\"4-1-本地分支操作\"><a href=\"#4-1-本地分支操作\" class=\"headerlink\" title=\"4.1 本地分支操作\"></a>4.1 本地分支操作</h3><p><strong>分支的概念</strong></p>\n<ul>\n<li>相当于科幻电影的平行宇宙，在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发</li>\n</ul>\n<p><strong>master(main)主分支</strong></p>\n<ul>\n<li>在初始化本地 Git 仓库的时候，Git 默认已经帮我们创建了一个名字叫做 master(main)的分支。通常我们把这个 master(main)分支叫做主分支。</li>\n<li>在实际工作中，master(main)主分支的作用是:<strong>用来保存和记录整个项目已完成的功能代码。</strong></li>\n<li>因此，不允许程序员直接在 master(main)分支上修改代码，因为这样做的风险太高，容易导致整个项目崩溃。</li>\n</ul>\n<p><strong>功能分支</strong></p>\n<ul>\n<li>由于程序员不能直接在 master (main)分支上进行功能的开发，所以就有了功能分支的概念。</li>\n<li>功能分支指的是专门用来开发新功能的分支，它是临时从 master(main)主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到 master(main)主分支上，如图所示:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/451b759ac29d4d70b51cefdac8a46dfb.png#pic_center\"></p>\n<p><strong>查看分支列表</strong></p>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git branch</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/3115c556986848b9a52cb56053912c39.png#pic_center\"></p>\n<ul>\n<li>分支名字前面的*号表示<strong>当前所处的分支</strong></li>\n</ul>\n<p><strong>创建新分支</strong></p>\n<ul>\n<li>使用如下的命令，可以<strong>基于当前分支，创建一个新的分支</strong>，此时，新分支中的代码和当前分支完全一样:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git branch 分支名称</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/040bf8adc62e4144a501212dfa395210.png#pic_center\"></p>\n<p><strong>切换分支</strong></p>\n<ul>\n<li>使用如下的命令，可以切换到指定的分支上进行开发:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git checkout 分支名称</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/0f56a3c751464b239322e03f2b990077.png#pic_center\"></p>\n<p><strong>分支的快速创建和切换</strong></p>\n<ul>\n<li>使用如下的命令，可以<strong>创建指定名称的新分支</strong>，并<strong>立即切换到新分支</strong>上:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">-b 表示创建一个新分支</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">checkout 表示切换到刚才新建的分支上</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout -b 分支名称</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/a9dcb618cd274bdbac4837962e3d777d.png#pic_center\"></p>\n<p><strong>分支合并</strong></p>\n<ul>\n<li>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">1.切换到 main 分支</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">2.在 main 分支上运行 git merge 命令，将 login 分支的代码合并到 main 分支</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git merge login</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/7852adb4c1594154b45e1ba36260de73.png#pic_center\"></p>\n<ul>\n<li>合并分支时的注意点:假设要把 C 分支的代码合并到 A 分支,则必须先切换到 A 分支上，再运行 git merae 命令，来合并 C 分支!</li>\n</ul>\n<p><strong>删除分支</strong></p>\n<ul>\n<li>当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git branch -d 分支名称</span></span></code></pre></div><p><img src=\"https://img-blog.csdnimg.cn/5b75f8a5a404491ebe8c21174b208d9f.png#pic_center\"></p>\n<p><strong>遇到冲突时的分支合并</strong></p>\n<ul>\n<li>如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。此时，我们需要打开这些包含冲突的文件然后手动解决冲突</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">假设：在把reg分支合并到main分支期间，代码发生了冲突</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout main</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git merge reg</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">打开包含冲突的文件，手动解决冲突之后(vscode智能解决)，再执行下列命令</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git add .</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git commit -m &quot;解决了分支合并冲突的问题&quot;</span></span></code></pre></div><h3 id=\"4-2-远程分支操作\"><a href=\"#4-2-远程分支操作\" class=\"headerlink\" title=\"4.2 远程分支操作\"></a>4.2 远程分支操作</h3><p><strong>将本地分支推送到远程仓库</strong></p>\n<ul>\n<li>如果是第一次将本地分支推送到远程仓库，需要运行如下的命令:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">-u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带-u 参数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git push -u 远程仓库的别名 本地分支名称:远程分支名称</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">实际案例:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git push -u origin payment: pay</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git push -u origin payment</span></span></code></pre></div><ul>\n<li>注意:第一次推送分支需要带-u 参数，此后可以直接使用 git push 推送代码到远程分支。</li>\n</ul>\n<p><strong>查看远程仓库中所有的分支列表</strong></p>\n<ul>\n<li>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">git remote show 远程仓库名称</span></span></code></pre></div><p><strong>跟踪分支</strong></p>\n<ul>\n<li>跟踪分支指的是:从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout 远程分支的名称</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">示例:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout pay</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">示例:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git checkout -b payment origin/pay</span></span></code></pre></div><p><strong>拉取远程分支的最新的代码</strong></p>\n<ul>\n<li>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git pull</span></span></code></pre></div><p><strong>删除远程分支</strong></p>\n<ul>\n<li>可以使用如下的命令，删除远程仓库中指定的分支:</li>\n</ul>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">markdown</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1d1d1d\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">删除远程仓库中，指定名称的远程分支</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git push 远程仓库名称 --delete 远程分支名称</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\"># </span><span style=\"color: #FFCB6B\">示例:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">git push origin --delete pay</span></span>\n<span class=\"line\"></span></code></pre></div>","feature":true,"text":"Git是一种分布式版本控制系统，广泛应用于软件开发中。它可以记录和管理项目的历史修改，并支持多人协作开发。通过Git，开发者可以轻松地跟踪代码变更、合并分支、回退版本等操作，保证代码的稳定性和可追溯性。...","permalink":"/post/前端--详解Git(快速入门)","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Git\"><span class=\"toc-text\">Git</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Git-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1、Git 概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.1 关于版本控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-Git-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.2 Git 基础概念</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Git-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2、Git 基础操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE-Git\"><span class=\"toc-text\">2.1 安装并配置 Git</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.2 Git 的基本操作</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81Github-%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3、Github 操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90\"><span class=\"toc-text\">3.1 关于开源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7\"><span class=\"toc-text\">3.2 注册账号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.3 远程仓库的使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4、Git 分支操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.1 本地分支操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.2 远程分支操作</span></a></li></ol></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Node.js入门指南","uid":"49049ff97839855eecbcd2b661106a8a","slug":"前端--详解Node.js(快速入门)","date":"2023-01-26T00:36:42.000Z","updated":"2025-07-14T15:12:20.467Z","comments":true,"path":"api/articles/前端--详解Node.js(快速入门).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/b0f0273b8a054a6d9c9e5d3f2a5c267f.png","text":"Node.js是建立在Chrome V8引擎之上的JavaScript运行时环境，可用于快速构建可伸缩的网络应用。它采用事件驱动、非阻塞I/O模型，适用于实时数据处理。Node.js还拥有丰富的包管理工具，如npm，使得前端开发者能够方便地共享和重复使用代码。...","permalink":"/post/前端--详解Node.js(快速入门)","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Node","slug":"Node","count":1,"path":"api/tags/Node.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Ajax实战指南：快速入门","uid":"269efa4fe53bba32d25aec66c5987385","slug":"前端--详解AJAX(快速入门)","date":"2023-01-15T01:38:59.000Z","updated":"2025-07-14T15:12:20.466Z","comments":true,"path":"api/articles/前端--详解AJAX(快速入门).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/7f6c7c162dd6446782022ec8ae527017.jpeg","text":"前端开发中，Ajax是一种用于异步请求和更新网页内容的技术。通过Ajax，可以在不刷新整个页面的情况下，与服务器进行数据交互。这种技术使得用户能够更加流畅地浏览网页，并实现实时更新数据的功能。...","permalink":"/post/前端--详解AJAX(快速入门)","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Ajax","slug":"Ajax","count":1,"path":"api/tags/Ajax.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}