{"title":"Java程序设计--方法","uid":"e865c90ea90eb26ac07b0e4b3b7fa410","slug":"Java程序设计 -- 方法（五）","date":"2022-03-19T14:05:28.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 方法（五）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、方法定义、调用\"><a href=\"#1、方法定义、调用\" class=\"headerlink\" title=\"1、方法定义、调用\"></a>1、方法定义、调用</h1><p><strong>方法完整的定义形式、应用</strong></p>\n<p>方法定义的完整格式</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名(形参表)&#123;\n    方法体代码(需要执行的功能代码)\n    return 返回值;\n&#125;\n</code></pre>\n<p>方法的调用格式</p>\n<pre><code class=\"java\">方法名(...)\n</code></pre>\n<p>方法格式的注意点</p>\n<ul>\n<li>&#x3D;&#x3D;方法的修饰符:暂时都使用public static修饰。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;方法申明了具体的返回值类型，内部必须使用return返回对应类型的数据。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;形参列表可以有多个，甚至可以没有;如果有多个形参，多个形参必须用“，”隔开，且不能给初始化值。&#x3D;&#x3D;</li>\n</ul>\n<p><strong>方法其他的定义形式、应用</strong></p>\n<p>方法的其他写法</p>\n<p>方法定义时：返回值类型、形参列表可以按照需求进行填写</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名(形参列表)\n</code></pre>\n<p>注意事项</p>\n<ul>\n<li>&#x3D;&#x3D;如果方法不需要返回结果，返回值类型必须申明成void (无返回值)，此时方法内部不可以使用return返回数据。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;方法如果没有参数，或者返回值类型申明为void可以称为无参数、无返回值的方法，依次类推。&#x3D;&#x3D;</li>\n</ul>\n<hr>\n<h1 id=\"2、方法使用的常见问题\"><a href=\"#2、方法使用的常见问题\" class=\"headerlink\" title=\"2、方法使用的常见问题\"></a>2、方法使用的常见问题</h1><p>方法常见问题</p>\n<ul>\n<li>方法的编写顺序无所谓。</li>\n<li>方法与方法之间是平级关系，不能嵌套定义</li>\n<li>方法的返回值类型为void(无返回值)，方法内则不能使用return返回数据，如果方法的返回值类型写了具体类型，方法内部则必须使用return返回对应类型的数据。</li>\n<li>return语句下面，不能编写代码，因为永远执行不到,属于无效的代码。</li>\n<li>方法不调用就不执行，调用时必须严格匹配方法的参数情兄。</li>\n<li>有返回值的方法调用时可以选择定义变量接收结果，或者直接输出调用，甚至直接调用;无返回值方法的调用只能直接调用。</li>\n</ul>\n<hr>\n<h1 id=\"3、方法案例\"><a href=\"#3、方法案例\" class=\"headerlink\" title=\"3、方法案例\"></a>3、方法案例</h1><p><strong>计算1–n的和返回</strong></p>\n<p>需求:定义一个方法，方法中计算出1–n的和并返回。</p>\n<pre><code class=\"java\">public class Test1 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：使用方法计算1-n的和并返回\n        System.out.println(&quot;1-5的和是：&quot; + sum(5));\n        System.out.println(&quot;--------------------&quot;);\n        System.out.println(&quot;1-100的和是：&quot; + sum(100));\n    &#125;\n\n    public static int sum(int n)&#123;\n        int sum = 0;\n        for (int i = 1; i &lt;= n ; i++) &#123;\n            sum += i;\n        &#125;\n        return sum;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>判断奇偶数</strong></p>\n<p>需求:拿一个整数，然后调用方法，把整数交给方法，在方法中输出该数为奇数还是偶数</p>\n<pre><code class=\"java\">public class Test2 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：判断一个整数是奇数还是偶数 并进行结果的输出 使用方法完成\n        check(11);\n        System.out.println(&quot;-------------&quot;);\n        check(100);\n    &#125;\n\n    public static void check(int number) &#123;\n        if(number % 2 == 0)&#123;\n            System.out.println(number + &quot;是偶数&quot;);\n        &#125;else &#123;\n            System.out.println(number + &quot;是奇数&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>数组求最值</strong></p>\n<p>需求：把找出数组的最大值案例，改造成方法，可以支持返回任意整型数组的最大值数据。</p>\n<pre><code class=\"java\">public class Test3 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：使用方法，支持找出任意整型数组的最大值返回。\n        int[] ages = &#123;23, 19, 25, 78, 34&#125;;\n        int max = getArrayMaxData(ages);\n        System.out.println(&quot;最大值数据是：&quot; + max);\n\n        System.out.println(&quot;-------------------&quot;);\n        int[] ages1 = &#123;31, 21, 99, 78, 34&#125;;\n        int max1 = getArrayMaxData(ages1);\n        System.out.println(&quot;最大值数据是：&quot; + max1);\n    &#125;\n\n    public static int getArrayMaxData(int[] arr)&#123;\n        // 找出数组的最大值返回\n        int max = arr[0];\n        // 遍历数组的每个元素与最大值的数据进行比较，若较大则替换\n        for (int i = 1; i &lt; arr.length; i++) &#123;\n            if(arr[i] &gt; max)&#123;\n                max = arr[i];\n            &#125;\n        &#125;\n        return max;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"4、方法调用的内存图\"><a href=\"#4、方法调用的内存图\" class=\"headerlink\" title=\"4、方法调用的内存图\"></a>4、方法调用的内存图</h1><ul>\n<li>方法没有被调用的时候，在方法区中的字节码文件中存放</li>\n<li>方法被调用的时候，需要进入到<strong>栈内存</strong>中运行</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/06c12fa41de34554b0430fd09a3324a0.png#pic_center\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/4a7027ae847c4987acbc4cf549afe861.png#pic_center\"></p>\n<hr>\n<h1 id=\"5、方法的参数传递\"><a href=\"#5、方法的参数传递\" class=\"headerlink\" title=\"5、方法的参数传递\"></a>5、方法的参数传递</h1><p>&#x3D;&#x3D;Java的参数传递机制:值传递&#x3D;&#x3D;</p>\n<p><strong>在传输实参给方法的形参的时候，并不是传输实参变量本身，而是传输实参变量中存储的值，这就是值传递。</strong><br><img src=\"https://img-blog.csdnimg.cn/50b047e4102d4b798457fd4454019f17.png#pic_center\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/7a128c99172b432990b9f222abef350f.png#pic_center\"><br>基本类型和引用类型的参数在传递的时候的不同</p>\n<ol>\n<li>&#x3D;&#x3D;都是值传递。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;基本类型的参数传输存储的数据值。引用类型的参数传输存储的地址值。&#x3D;&#x3D;</li>\n</ol>\n<p><strong>案例</strong></p>\n<p><strong>打印数组内容</strong></p>\n<p>设计一个方法用于输出任意整型数组的内容</p>\n<pre><code class=\"java\">public class MethodTest1 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：定义方法，可以打印任意整型数组的内容：[12, 32, 23]\n        // 4、定义数组，再调用方法\n        int[] arr = &#123;12, 32, 23&#125;;\n        printArray(arr);\n\n        System.out.println(&quot;-----------------&quot;);\n        int[] arr2 = &#123;&#125;;\n        printArray(arr2);\n\n        System.out.println(&quot;-----------------&quot;);\n        int[] arr3 = null;\n        printArray(arr3);\n    &#125;\n\n    /**\n        1、定义一个方法：参数：整型数组类型的变量  返回值类型申明：void\n     */\n    public static void printArray(int[] arr)&#123;\n        if(arr != null)&#123;\n            // 2、把数组内容打印出来。\n            System.out.print(&quot;[&quot;);\n            // 3、开始遍历数组中的每个数据\n            for (int i = 0; i &lt; arr.length; i++) &#123;\n                // 如果发现是最后一个元素不加逗号\n//            if(i == arr.length - 1)&#123;\n//                System.out.print(arr[i]);\n//            &#125;else &#123;\n//                System.out.print(arr[i] + &quot;, &quot;);\n//            &#125;\n                System.out.print(i == arr.length - 1 ? arr[i] : arr[i] + &quot;, &quot;);\n            &#125;\n            System.out.println(&quot;]&quot;);\n        &#125;else &#123;\n            System.out.println(&quot;当前数组对象不存在，其地址是：null&quot;);\n        &#125;\n    &#125;\n\n    \n&#125;\n</code></pre>\n<p><strong>从数组中查询元素的索引返回</strong></p>\n<p>需求：设计一个方法可以接收整型数组，和要查询的元素值;最终要返回元素在该数组中的索引，如果数组中不存在该元素则返回-1。</p>\n<pre><code class=\"java\">public class MethodTest2 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：从整型数组中查询某个数据的索引返回，不存在该数据返回-1\n        // 3、定义数组，调用方法\n        int[] arr = &#123;11, 22, 33, 66, 87, 19&#125;;\n        int index = searchIndex(arr, 17);\n        System.out.println(&quot;您查询的数据的索引是：&quot; + index);\n    &#125;\n\n    /**\n       1、定义一个方法：参数接收数组，要查询的数据，返回值：整型\n     */\n    public static int searchIndex(int[] arr, int data)&#123;\n        // 2、开始找出这个数据的索引\n        for (int i = 0; i &lt; arr.length; i++) &#123;\n            if(arr[i] == data)&#123;\n                return i;\n            &#125;\n        &#125;\n        return -1; // 查无此元素！\n    &#125;\n&#125;\n</code></pre>\n<p><strong>比较两个数组内容是否相等</strong></p>\n<p>需求：如果两个数组的类型，元素个数，元素顺序和内容是一样的我们就认为这2个数组是一模一样的。</p>\n<pre><code class=\"java\">public class MethodTest3 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：比较任意2个整型数组的内容是否一样，一样返回true 反之\n        int[] arr1 = &#123;10, 20, 30&#125;;\n        int[] arr2 = &#123;10, 20, 30&#125;;\n        System.out.println(compare(arr1, arr2));\n\n        System.out.println(&quot;-------------------&quot;);\n        int[] arr3 = null;\n        int[] arr4 = &#123;&#125;;\n        System.out.println(compare(arr3, arr4));\n    &#125;\n\n    /**\n        1、定义一个方法：参数：接收2个整型数组，返回值类型：布尔类型\n     */\n    public static boolean compare(int[] arr1, int[] arr2)&#123;\n        if(arr1 != null &amp;&amp; arr2 != null)&#123;\n            // 2、判断2个数组的内容是一样的呢\n            if(arr1.length == arr2.length)&#123;\n                for (int i = 0; i &lt; arr1.length; i++) &#123;\n                    if(arr1[i] != arr2[i])&#123;\n                        return false;\n                    &#125;\n                &#125;\n                return true; // 是一样的！\n            &#125;else &#123;\n                return false;\n            &#125;\n        &#125;else &#123;\n            return false;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"6、方法重载\"><a href=\"#6、方法重载\" class=\"headerlink\" title=\"6、方法重载\"></a>6、方法重载</h1><p>&#x3D;&#x3D;同一个类中，出现多个<strong>方法名称相同</strong>，但是<strong>形参列表是不同</strong>的，那么这些方法就是重载方法。&#x3D;&#x3D;</p>\n<pre><code class=\"java\">public class MethodDemo1 &#123;\n    public static void main(String[] args) &#123;\n        // 目标：识别方法重载的形式。并理解其调用流程，最后需要知道使用方法重载的好处。\n        fire();\n        fire(&quot;B国&quot;);\n        fire(&quot;B国&quot;, 1000);\n    &#125;\n\n    public static void fire()&#123;\n        fire(&quot;A国&quot;);\n    &#125;\n\n    public static void fire(String location)&#123;\n        fire(location, 1);\n    &#125;\n\n    public static void fire(String location, int number)&#123;\n        System.out.println(&quot;默认发射&quot;+number+&quot;枚武器给&quot;+location+&quot;~~~&quot;);\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"7、return关键字\"><a href=\"#7、return关键字\" class=\"headerlink\" title=\"7、return关键字\"></a>7、return关键字</h1><p>&#x3D;&#x3D;return; —&gt;可以立即跳出并结束当前方法的执行;return关键字单独使用可以放在任何方法中。&#x3D;&#x3D;</p>\n<pre><code class=\"java\">public class ReturnDemo &#123;\n    public static void main(String[] args) &#123;\n        // 目标：明确return关键字的作用。\n        System.out.println(&quot;main开始。。&quot;);\n        chu(10 , 0);\n        System.out.println(&quot;main结束。。&quot;);\n    &#125;\n\n    public static void chu(int a, int b)&#123;\n        if(b == 0)&#123;\n            System.out.println(&quot;您输入的数据有问题，除数不能是0！！&quot;);\n            return; // 立即跳出当前方法，并结束当前方法的执行。\n        &#125;\n\n        int c = a / b;\n        System.out.println(&quot;结果是：&quot; + c);\n    &#125;\n&#125;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"center\">关键字</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">return</td>\n<td align=\"center\">跳出并立即结束所在方法的执行</td>\n</tr>\n<tr>\n<td align=\"center\">break</td>\n<td align=\"center\">跳出并结束当前所在循环的执行</td>\n</tr>\n<tr>\n<td align=\"center\">continue</td>\n<td align=\"center\">结束当前所在循环的当次继续，进入下一次执行</td>\n</tr>\n</tbody></table>\n<hr>\n","feature":true,"text":"本篇文章将首先介绍方法的定义和使用，包括如何声明、调用和返回数值。接着，我们将详细讨论参数传递的方式，包括数值传递和引用传递，帮助读者理解方法中数据的传递和处理过程。最后，我们将重点讨论方法重载，即在同一作用域内，允许存在多个同名方法，但它们的参数列表不同。...","permalink":"/post/Java程序设计 -- 方法（五）","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E3%80%81%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">1、方法定义、调用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2、方法使用的常见问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%96%B9%E6%B3%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3、方法案例</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE\"><span class=\"toc-text\">4、方法调用的内存图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">5、方法的参数传递</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">6、方法重载</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7%E3%80%81return%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">7、return关键字</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--面向对象基础（六）","uid":"43ba7a87029e6d08249bdb5a925cb91f","slug":"Java程序设计 -- 面向对象基础（六）","date":"2022-03-19T14:24:11.000Z","updated":"2025-07-14T15:12:20.462Z","comments":true,"path":"api/articles/Java程序设计 -- 面向对象基础（六）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"类是Java中的核心概念，用于创建对象。构造器是创建和初始化对象的特殊方法。this关键字表示当前对象的引用，用于访问成员变量和方法。Javabean是符合规范的Java类，用于数据封装和访问。它们在面向对象编程中扮演重要角色，提高代码的模块化和可维护性。...","permalink":"/post/Java程序设计 -- 面向对象基础（六）","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--数组","uid":"68e93659b0f140c2b8d62ff1a84702c9","slug":"Java程序设计 -- 数组（四）","date":"2022-03-18T15:10:42.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 数组（四）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本篇文章将将首先介绍数组的定义和基本特性，包括数组的初始化、存储多个元素等。接着，我们将详细讲解如何使用循环结构来遍历数组，从而实现对数组元素的逐一访问和处理。...","permalink":"/post/Java程序设计 -- 数组（四）","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}