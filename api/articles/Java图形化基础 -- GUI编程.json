{"title":"JAVA图形化基础--GUI编程","uid":"ac07147ebfe9ea11673ae70bed7f524c","slug":"Java图形化基础 -- GUI编程","date":"2022-04-23T03:10:12.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/Java图形化基础 -- GUI编程.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、GUI简介\"><a href=\"#1、GUI简介\" class=\"headerlink\" title=\"1、GUI简介\"></a>1、GUI简介</h1><p>GUI的核心技术：</p>\n<ul>\n<li><strong>AWT：</strong> 抽象窗口工具包，早期编写图形界面应用程序的包</li>\n<li><strong>Swing ：</strong> 为解决 AWT 存在的问题而新开发的图形界面包；Swing是对AWT的改良和扩展</li>\n</ul>\n<p>GUI因界面不美观，且运行需要jre环境（占用内存大，繁琐）被逐渐淘汰，现阶段学习GUI主要是为了了解\tMVC架构(了解监听)，写一些小工具，和工作中可能需要维护Swing界面。</p>\n<hr>\n<h1 id=\"2、AWT\"><a href=\"#2、AWT\" class=\"headerlink\" title=\"2、AWT\"></a>2、AWT</h1><h2 id=\"2-1-AWT介绍\"><a href=\"#2-1-AWT介绍\" class=\"headerlink\" title=\"2.1 AWT介绍\"></a>2.1 AWT介绍</h2><ol>\n<li>包含了很多类和接口！ GUI：图形用户界面编程 </li>\n<li>元素：窗口，按钮，文本框 </li>\n<li>包都在java（awt）包</li>\n</ol>\n<h2 id=\"2-2-组件和容器\"><a href=\"#2-2-组件和容器\" class=\"headerlink\" title=\"2.2 组件和容器\"></a>2.2 组件和容器</h2><p><img src=\"https://img-blog.csdnimg.cn/6a5f060b39c84e3c85e203b9598a7279.png\"><br><strong>Frame框架</strong></p>\n<pre><code class=\"java\">import java.awt.*;\n//GUI的第一个界面\npublic class TestFrame &#123;\n    public static void main(String[] args) &#123;\n        //看源码 选中+ctrl+左键\n        //看结构 alt+7\n        Frame frame = new Frame(&quot;我的第一个Java图形界面窗口&quot;);//Frame 是一个顶级窗口\n        //Frame的方法\n        //设置可见性\n        frame.setVisible(true);\n        //设置窗口大小\n        frame.setSize(400,400);\n        //设置背景颜色 Color\n        frame.setBackground(new Color(51, 158, 22));\n        //弹出的初始位置\n        frame.setLocation(200,200);\n        //设置大小固定\n        frame.setResizable(false);\n        //窗口无法关闭！！！最小化、最大化、窗口尺寸已经默认存在！\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">import java.awt.*;\npublic class TestFrame2 &#123;\n    public static void main(String[] args) &#123;\n        //展示多个窗口\n        MyFrame myFrame1 = new MyFrame(100,100,200,200,Color.blue);\n        MyFrame myFrame2 = new MyFrame(300,100,200,200,Color.yellow);\n        MyFrame myFrame3 = new MyFrame(100,300,200,200,Color.red);\n        MyFrame myFrame4 = new MyFrame(300,300,200,200,Color.MAGENTA);\n    &#125;\n&#125;\nclass MyFrame extends Frame &#123;\n    static int id = 0;      //可能存在多个窗口，需要一个计数器\n    public MyFrame(int x,int y,int w,int h,Color color)&#123;\n        super(&quot;Myframe+&quot;+(++id));//继承\n        setBounds(x, y, w, h);//设置坐标\n        setBackground(color);//设置颜色\n        setVisible(true);//设置可见性\n    &#125;\n&#125;\n</code></pre>\n<p><strong>面板Panel</strong></p>\n<pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n//panel 可以看成是一个空间，但是不能单独存在\npublic class TestPanel &#123;\n    public static void main(String[] args)&#123;\n        Frame frame = new Frame();  //new 窗口\n        //布局的概念\n        Panel panel = new Panel();  //new 面板\n        Panel panel1 = new Panel();\n        //设置布局,不设置面板会置顶\n        frame.setLayout(null);\n        //窗口坐标和颜色\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(new Color(140, 208, 212));\n        //panel 设置坐标，相对于frame\n        panel.setBounds(50,50,400,100);\n        panel.setBackground(new Color(181, 186, 54));\n        panel1.setBounds(50,200,400,250);\n        panel1.setBackground(new Color(165, 34, 101));\n        //将panel添加进frame\n        frame.add(panel1);//Panel 无法单独显示，必须添加到某个容器中\n        frame.add(panel);\n        frame.setVisible(true);\n        //监听时间，监听窗口关闭事件\n        //适配器模式(二十三种设计模式)\n        frame.addWindowListener(new WindowAdapter() &#123;\n            //窗口关闭要做的事情\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                //结束程序\n                System.exit(0);\n            &#125;\n        &#125;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-3-布局管理器\"><a href=\"#2-3-布局管理器\" class=\"headerlink\" title=\"2.3 布局管理器\"></a>2.3 布局管理器</h2><p><strong>流式布局</strong></p>\n<pre><code class=\"java\">import java.awt.*;\npublic class TestFlowLayout  &#123;\n    public static void main(String[] args) &#123;\n        Frame frame = new Frame();\n        //组件-按钮\n        Button button1 = new Button(&quot;button1&quot;);\n        Button button2 = new Button(&quot;button2&quot;);\n        Button button3 = new Button(&quot;button3&quot;);\n        //设置流式布局的位置\n        //frame.setLayout(new FlowLayout(0));\t0为左，1为中...\n        frame.setLayout(new FlowLayout(FlowLayout.LEFT));//两种方式\n        frame.setSize(200,200);\n        //把按钮添加上去\n        frame.add(button1);\n        frame.add(button2);\n        frame.add(button3);\n        frame.setVisible(true);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>东西南北中布局</strong></p>\n<pre><code class=\"java\">import java.awt.*;\npublic class TestBorderLayout &#123;\n    public static void main(String[] args) &#123;\n        Frame frame = new Frame(&quot;TestBorderLayout&quot;);\n        Button east = new Button(&quot;East&quot;);\n        Button west = new Button(&quot;West&quot;);\n        Button south = new Button(&quot;South&quot;);\n        Button north = new Button(&quot;North&quot;);\n        Button center = new Button(&quot;Center&quot;);\n        frame.setSize(400,400);\n        //不同布局的方位\n        frame.add(east,BorderLayout.EAST);\n        frame.add(west,BorderLayout.WEST);\n        frame.add(south,BorderLayout.SOUTH);\n        frame.add(north,BorderLayout.NORTH);\n        frame.add(center,BorderLayout.CENTER);\n        frame.setVisible(true);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>栅格布局</strong></p>\n<pre><code class=\"java\">import java.awt.*;\npublic class TestGridLayout &#123;\n    public static void main(String[] args) &#123;\n        Frame frame = new Frame(&quot;TestGridLayout&quot;);\n        Button btn1 = new Button(&quot;btn1&quot;);\n        Button btn2 = new Button(&quot;btn2&quot;);\n        Button btn3 = new Button(&quot;btn3&quot;);\n        Button btn4 = new Button(&quot;btn4&quot;);\n        Button btn5 = new Button(&quot;btn5&quot;);\n        Button btn6 = new Button(&quot;btn6&quot;);\n        frame.setLayout(new GridLayout(3,2));\n        frame.add(btn1);\n        frame.add(btn2);\n        frame.add(btn3);\n        frame.add(btn4);\n        frame.add(btn5);\n        frame.add(btn6);\n        frame.pack();//Java函数，自适应，用于优化大小；\n        // frame.setSize(400,400);\n        frame.setVisible(true);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-4-事件监听\"><a href=\"#2-4-事件监听\" class=\"headerlink\" title=\"2.4 事件监听\"></a>2.4 事件监听</h2><p><strong>ActionListener</strong></p>\n<pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\npublic class TesActionEvent &#123;\n    public static void main(String[] args) &#123;\n        //按下按钮，触发一些事件\n        Frame frame = new Frame();\n        Button button = new Button();\n        /*按钮可以new一个接口，需要命名内部类，把他的实现类写下来。但一般不这么做\n        button.addActionListener(new AbstractAction() &#123;\n            @Override\n            public void actionPerformed(ActionEvent e) &#123;  &#125;  &#125;);*/\n        \n        //因为,addActionListener()需要一个ActionListener，所以我们需要构造一个ActionListener\n        //接口就写实现类，父类就继承\n        MyActionListener myActionListener = new MyActionListener();\n        button.addActionListener(myActionListener);\n        frame.add(button,BorderLayout.CENTER);\n        windowClose(frame);\n        frame.pack();\n        frame.setVisible(true);\n    &#125;\n    //关闭窗体的事件\n    private static void windowClose(Frame frame)&#123;\n        frame.addWindowListener(new WindowAdapter() &#123;\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                System.exit(0);\n            &#125;\n        &#125;);\n    &#125;\n&#125;\nclass MyActionListener implements ActionListener&#123;\n    //事件监听\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        System.out.println(&quot;事件监听，您按下了按钮&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>多按钮共享一个事件</strong></p>\n<pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\npublic class TestActionTwo &#123;\n    public static void main(String[] args) &#123;\n        //两个按钮，实现同一个监听\n        //开始--停止\n        Frame frame = new Frame(&quot;开始-停止&quot;);\n        Button button1 = new Button(&quot;start&quot;);\n        Button button2 = new Button(&quot;stop&quot;);\n      // button2.setActionCommand(&quot;button2-stop&quot;);\n        MyMonitor myMonitor = new MyMonitor();\n        button1.addActionListener(myMonitor);\n        button2.addActionListener(myMonitor);\n        frame.add(button1,BorderLayout.NORTH);\n        frame.add(button2,BorderLayout.SOUTH);\n        frame.pack();\n        frame.setVisible(true);\n    &#125;\n&#125;\nclass MyMonitor implements ActionListener&#123;\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        /*e.getActionCommand() 获取按钮的信息\n        System.out.println(&quot;按钮被点击了：msg=&gt;&quot;+e.getActionCommand());\n        输出结果butoo2为&quot;按钮被点击了：msg=&gt;stop&quot;;可以显示的定义触发会返回的命令\n        butoo1为&quot;start&quot;。无显示定义，则会走默认的值。\n        */\n        //可以多个按钮只写一个监听类\n        if (e.getActionCommand().equals(&quot;start&quot;))&#123;//equals 等号\n            System.out.println(e.getActionCommand()+&quot;按钮被点击&quot;);\n        &#125; if (e.getActionCommand().equals(&quot;stop&quot;))&#123;\n            System.out.println(e.getActionCommand()+&quot;按钮被点击&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>输入框TextField监听</strong></p>\n<pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class TestText01 &#123;\n    public static void main(String[] args) &#123;\n        //启动\n        new MyFrame();\n    &#125;\n&#125;\nclass MyFrame extends Frame&#123;\n    public MyFrame()&#123;\n        TextField textField = new TextField();//文本 TextArea文本域，可以写多行\n        add(textField);\n        //监听这个文本框输入的文字\n        MyActionListener2 myActionListener2 = new MyActionListener2();\n        //按下enter 就会触发这个输入框的事件\n        textField.addActionListener(myActionListener2);\n        //设置替换编码\n        textField.setEchoChar(&#39;*&#39;);\n        setVisible(true);\n        pack();\n    &#125;\n&#125;\nclass MyActionListener2 implements ActionListener&#123;//监听器\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        TextField field = (TextField)e.getSource();//获得一些资源,返回的一个对象\n        System.out.println(field.getText());//获得输入框的文本\n        field.setText(&quot;&quot;);//设置enter 后的状态\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-5-简易计算器\"><a href=\"#2-5-简易计算器\" class=\"headerlink\" title=\"2.5 简易计算器\"></a>2.5 简易计算器</h2><pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\n//简易计算器\npublic class TestCalc &#123;\n    public static void main(String[] args) &#123;\n        new Calculator();\n    &#125;\n&#125;\n//计算器类\nclass  Calculator extends Frame&#123;\n    public Calculator() &#123;\n        //三个文本框\n        TextField num1 = new TextField(10);//字符数\n        TextField num2 = new TextField(10);//字符数\n        TextField num3 = new TextField(20);//字符数\n        //一个按钮\n        Button button = new Button(&quot;=&quot;);\n        button.addActionListener(new MyCalculatorListener(num1,num2,num3));\n        //一个标签\n        Label label = new Label(&quot;+&quot;);\n        //布局\n        setLayout(new FlowLayout());\n        add(num1);\n        add(label);\n        add(num2);\n        add(button);\n        add(num3);\n        pack();\n        setVisible(true);\n    &#125;\n&#125;\n//监听器类\nclass MyCalculatorListener implements ActionListener&#123;\n    //获取三个变量\n    private TextField num1,num2,num3;\n\n    public MyCalculatorListener(TextField num1,TextField num2,TextField num3)&#123;\n        this.num1 = num1;\n        this.num2 = num2;\n        this.num3 = num3;\n    &#125;\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        //1.获得加数和被加数\n        int n1 = Integer.parseInt(num1.getText());\n        int n2 = Integer.parseInt(num2.getText());\n        //2.将这个值+法运算后，放到第三个框\n        num3.setText(&quot;&quot;+(n1+n2));\n        //3.清除前两个框\n        num1.setText(&quot;&quot;);\n        num2.setText(&quot;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-6-画笔\"><a href=\"#2-6-画笔\" class=\"headerlink\" title=\"2.6 画笔\"></a>2.6 画笔</h2><pre><code class=\"java\">import java.awt.*;\npublic class TestPaint &#123;\n    public static void main(String[] args) &#123;\n        new MyPaint().loadFrame();\n    &#125;\n&#125;\nclass MyPaint extends Frame &#123;\n    public void loadFrame()&#123;\n        setBounds(200,200,600,500);\n        setVisible(true);\n    &#125;\n    //画笔，颜色，可以画画\n   @Override\n    public void paint(Graphics g) &#123;\n       // super.paint(g);有些类里面有初始化操作，就无法删除\n       g.setColor(Color.red);\n       //g.drawOval(100,100,100,100);   //draw空心\n       g.fillOval(100,100,100,100);   //fill实心、填充的\n       g.setColor(Color.GREEN);\n       g.fillRect(200,200,200,200);\n       //养成习惯，画笔用完，将它还原到最初的颜色，不然你再画一个图会带上之前的颜色。\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-7-鼠标监听\"><a href=\"#2-7-鼠标监听\" class=\"headerlink\" title=\"2.7 鼠标监听\"></a>2.7 鼠标监听</h2><p><img src=\"https://img-blog.csdnimg.cn/bda57ddd61f8414d8b16634ab7c1dfc1.png\"></p>\n<pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\n//鼠标监听事件\npublic class TestMouseListener &#123;\t\n    public static void main(String[] args) &#123;\n    new MyFrame(&quot;画图&quot;);\n    &#125;\n&#125;\n//自己的类\nclass MyFrame extends Frame&#123;\t\t\n    //画画需要画笔，需要监听鼠标当前的位置，需要集合来存储这个点\n    ArrayList points;\n\n    public MyFrame(String title) &#123;//--------框架\n        super(title);       //名字                                           \n        setBounds(200, 200, 400, 300);\n        //存标点击的点\n        points = new ArrayList&lt;&gt;();\n        //鼠标监听器，针对这个窗口\n        this.addMouseListener(new MyMouseListener());        //-监听鼠标\n\n        setVisible(true);\n    &#125;\n    @Override\t\t\t\t\n    public void paint(Graphics g) &#123; //画画                  //--------------画笔存储实施\n        //画画，需要监听鼠标的事件\n        Iterator iterator = points.iterator();              //-迭代器\n        while (iterator.hasNext())&#123;                         //检查序列中是否还有元素\n            Point point = (Point) iterator.next();\n            g.setColor(Color.BLUE);\n            g.fillOval(point.x,point.y,10,10);\n        &#125;\n    &#125;\n    //添加一个点到界面上，点集合\t\t\n    public void addPaint(Point point)&#123;\n        points.add(point);                  //将（点）传到迭代器里\n\n\n    &#125;\n\n    //适配器模式，就是别人已经写好的端口，不用全部重写内部类，直接继承更加方便。\n    private class MyMouseListener extends MouseAdapter&#123;      //----------监听器\n            //鼠标，按下，弹起，按下不放。\n            @Override\n            public void mousePressed(MouseEvent e) &#123;        //-鼠标按下\n               MyFrame frame = (MyFrame) e.getSource();     //-鼠标按下的来源\n                //这里我点击的时候，就会在界面上产生一个点\n                //这个点就是鼠标的点\n                frame.addPaint(new Point(e.getX(),e.getY()));//--将监控的（点的坐标）传到点集合\n                //每次点击鼠标都需要重写画一遍\n                frame.repaint();                             //再次刷漆\n            &#125;\n        &#125;\n&#125;            \n</code></pre>\n<h2 id=\"2-8-窗口监听\"><a href=\"#2-8-窗口监听\" class=\"headerlink\" title=\"2.8 窗口监听\"></a>2.8 窗口监听</h2><pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class TestWindow &#123;\n    public static void main(String[] args) &#123;\n        new WindowFrame(&quot;窗口监听&quot;);\n    &#125;\n&#125;\nclass WindowFrame extends Frame&#123;\n    public WindowFrame(String kk) &#123;\n        super(kk);\n        setBackground(Color.cyan);\n        setBounds(100,100,200,200);\n        setVisible(true);\n        //匿名内部类\n        this.addWindowListener(\n                new WindowAdapter() &#123;\n                    @Override\n                    public void windowOpened(WindowEvent e) &#123;\n                        System.out.println(&quot;窗口打开&quot;);\n                    &#125;\n                    @Override\n                    public void windowClosed(WindowEvent e) &#123;\n                        System.out.println(&quot;窗口关闭中&quot;);\n                    &#125;\n                    @Override\n                    public void windowActivated(WindowEvent e) &#123;\n                        System.out.println(&quot;窗口激活&quot;);\n                        WindowFrame source = (WindowFrame) e.getSource();       //获取框架信息\n                        source.setTitle(&quot;被激活了&quot;);\n                    &#125;\n                    @Override\n                    public void windowStateChanged(WindowEvent e) &#123;\n                        WindowFrame source = (WindowFrame) e.getSource();\n                        source.setTitle(&quot;状态改变了&quot;);\n                        System.out.println(&quot;窗口状态改变&quot;);\n                    &#125;\n                    @Override\n                    public void windowClosing(WindowEvent e) &#123;\n                        System.out.println(&quot;窗口关闭&quot;);\n                        System.exit(0);\n                    &#125;\n                &#125;\n        );\n    &#125;\n   /* 通过匿名内部类可以不用另外创建类\n   class MyWindowListener extends WindowAdapter&#123;\n        @Override\n        public void windowClosing(WindowEvent e) &#123;\n            setVisible(false);      //隐藏窗口，通过按钮点击事件\n            System.exit(0);         //0正常退出，1非正常退出\n        &#125;\n    &#125;*/\n&#125;\n</code></pre>\n<h2 id=\"2-9-键盘监听\"><a href=\"#2-9-键盘监听\" class=\"headerlink\" title=\"2.9 键盘监听\"></a>2.9 键盘监听</h2><pre><code class=\"java\">import java.awt.*;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\n//键盘\npublic class TestKeyListener &#123;\n    public static void main(String[] args) &#123;\n        new KeyFrame();\n    &#125;\n&#125;\nclass KeyFrame extends Frame&#123;\n    public KeyFrame() &#123;\n        setBounds(10,10,300,400);\n        setVisible(true);\n        this.addKeyListener(new KeyAdapter() &#123;\n            //键盘按下\n            @Override\n            public void keyPressed(KeyEvent e) &#123;\n                //获得当前键盘的码\n                int keyCode = e.getKeyCode();       //不需要去记录这个数值，直接使用静态属性VK_XXX\n                System.out.println(keyCode);\n                if (keyCode == KeyEvent.VK_UP)&#123;     //KeyEvent.VK 按键类\n                    System.out.println(&quot;你按下了上键！&quot;);\n                &#125;\n                //根据按下不同操作，产生不同结果。\n            &#125;\n        &#125;);\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"3、Swing\"><a href=\"#3、Swing\" class=\"headerlink\" title=\"3、Swing\"></a>3、Swing</h1><h2 id=\"3-1-窗口、面板\"><a href=\"#3-1-窗口、面板\" class=\"headerlink\" title=\"3.1 窗口、面板\"></a>3.1 窗口、面板</h2><pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\npublic class JFrameDemo &#123;\n    //init();初始化\n    public void init()&#123;\n        //顶级窗口\n        JFrame jf = new JFrame(&quot;这是一个JFrame窗口&quot;);\n        jf.setVisible(true);\n        //jf.setBackground(Color.cyan);     因为在容器中，直接颜色没效果，需要容器实例化\n        jf.setBounds(100,100,200,200);\n        JLabel jLabel = new JLabel(&quot;欢迎学习Java GUI&quot;);  //标签\n        jf.add(jLabel);\n        //让文本标签居中，设置水平对齐\n        jLabel.setHorizontalAlignment(SwingConstants.CENTER);\n        //需要容器实例化,颜色才能现象\n        Container contentPane = jf.getContentPane();\n        contentPane.setBackground(Color.cyan);\n        //关闭事件\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n    public static void main(String[] args) &#123;\n        //建立一个窗口\n        new JFrameDemo().init();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-2-弹窗\"><a href=\"#3-2-弹窗\" class=\"headerlink\" title=\"3.2 弹窗\"></a>3.2 弹窗</h2><pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n//主窗口\npublic class DialogDemo extends JFrame &#123;\n    public DialogDemo() &#123;\n        this.setVisible(true);      //可见\n        this.setSize(700,500);          //尺寸\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);       //关闭事件\n        //JFrame 放东西，容器\n        Container container = this.getContentPane();\n        //绝对布局，会相对容器自动定位\n        container.setLayout(null);\n        //按钮\n        JButton button = new JButton(&quot;点击弹出一个对话框&quot;);      //创建\n        button.setBounds(30,30,200,50);\n        //点击这个按钮的时候，弹出一个弹窗\n        button.addActionListener(new ActionListener() &#123;           //监听器\n            @Override\n            public void actionPerformed(ActionEvent e) &#123;\n                //监听弹窗\n                new MyDialogDemo();\n            &#125;\n        &#125;);\n        container.add(button);      //将按钮放进容器中\n    &#125;\n    public static void main(String[] args) &#123;\n        new DialogDemo();\n    &#125;\n&#125;\n        //弹窗的窗口\nclass MyDialogDemo extends JDialog&#123;\n            public MyDialogDemo() &#123;\n                this.setVisible(true);\n                this.setBounds(100,100,500,500);\n           // this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);    弹窗可以被关掉，不需要额外添加事件\n                Container container = this.getContentPane();\n                container.setLayout(null);\n\n                container.add(new Label(&quot;Java弹窗&quot;));\n            &#125;\n        &#125;\n</code></pre>\n<h2 id=\"3-3-标签\"><a href=\"#3-3-标签\" class=\"headerlink\" title=\"3.3 标签\"></a>3.3 标签</h2><pre><code class=\"java\">/*图标ICON*/\nimport javax.swing.*;\nimport java.awt.*;\n\n//图片，需要实现类，Frame 继承\npublic class IconDemo extends JFrame implements Icon &#123;\n\n    private int width;\n    private int height;\n\n    public IconDemo()&#123;&#125;\n\n    public IconDemo(int width,int height)&#123;\n        this.width = width;\n        this.height = height;\n    &#125;\n\n\n    public void init()&#123;     //图标\n        IconDemo iconDemo = new IconDemo(15,15);\n        //图标放在标签上，也可以放在按钮上!\n        //标签，图标，位置\n        JLabel label = new JLabel(&quot;icontest&quot;, iconDemo, SwingConstants.CENTER);\n\n        Container container = getContentPane();\n        container.add(label);\n\n        this.setVisible(true);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n    \n    public static void main(String[] args) &#123;\n        new IconDemo().init();\n    &#125;\n    @Override       //图标尺寸\n    public void paintIcon(Component c, Graphics g, int x, int y) &#123;\n        g.fillOval(x,y,width,height);\n    &#125;\n\n    @Override\n    public int getIconWidth() &#123;\n        return this.width;\n    &#125;\n\n    @Override\n    public int getIconHeight() &#123;\n        return this.height;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">/* 图片 */\nimport javax.swing.*;\nimport java.awt.*;\nimport java.net.URL;\n\npublic class ImageIconDemo extends JFrame &#123;\n    public ImageIconDemo()  &#123;\n        //获取图片的地址\n        JLabel label = new JLabel(&quot;ImageIcon&quot;);\n        URL url = ImageIconDemo.class.getResource(&quot;xxx.jpg&quot;);//获取当前类以下的东西\n\n        ImageIcon imageIcon = new ImageIcon(url);//命名不要冲突\n        label.setIcon(imageIcon);\n        label.setHorizontalAlignment(SwingConstants.CENTER);\n\n        Container contentPane = getContentPane();\n        contentPane.add(label);\n\n        setVisible(true);\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        setBounds(100,100,300,500);\n    &#125;\n    public static void main(String[] args) &#123;\n        new ImageIconDemo();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-4-面板\"><a href=\"#3-4-面板\" class=\"headerlink\" title=\"3.4 面板\"></a>3.4 面板</h2><pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\n\n\npublic class JPanelDemo extends JFrame &#123;\n    public JPanelDemo() &#123;\n        Container container = this.getContentPane();\n        //后面参数的意思，面板与面板的间距\n        container.setLayout(new GridLayout(2,1,10,10));\n\n        JPanel panel1 = new JPanel(new GridLayout(1, 3));   //GridLayout网格布局\n        JPanel panel2 = new JPanel(new GridLayout(2, 1));\n        JPanel panel3 = new JPanel(new GridLayout(2, 3));\n\n        panel1.add(new JButton(&quot;1&quot;));\n        panel1.add(new JButton(&quot;1&quot;));\n        panel1.add(new JButton(&quot;1&quot;));\n        panel2.add(new JButton(&quot;2&quot;));\n        panel2.add(new JButton(&quot;2&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n        panel3.add(new JButton(&quot;3&quot;));\n\n        container.add(panel1);\n        container.add(panel2);\n        container.add(panel3);\n\n        this.setVisible(true);\n        this.setSize(500,500);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n    &#125;\n    public static void main(String[] args) &#123;\n        new JPanelDemo();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-5-边框、文本域\"><a href=\"#3-5-边框、文本域\" class=\"headerlink\" title=\"3.5 边框、文本域\"></a>3.5 边框、文本域</h2><pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\n\npublic class JScrollDemo extends JFrame &#123;\n    public JScrollDemo() &#123;\n        Container container = this.getContentPane();\n        //文本域\n        JTextArea textArea = new JTextArea(20, 50);\n        textArea.setText(&quot;边框、文本域&quot;);\n        //Scroll 面板\n        JScrollPane scrollPane = new JScrollPane(textArea);\n        container.add(scrollPane);\n\n        this.setBounds(100,100,300,350);\n        this.setVisible(true);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new JScrollDemo();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-6-按钮\"><a href=\"#3-6-按钮\" class=\"headerlink\" title=\"3.6 按钮\"></a>3.6 按钮</h2><p><strong>图片按钮</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\nimport java.net.URL;\n\npublic class JButtonDemo01 extends JFrame &#123;\n    public JButtonDemo01() &#123;\n        Container container = this.getContentPane();\n        //将一个图片变为图标\n        URL resource = JButtonDemo01.class.getResource(&quot;123.jpg&quot;);  //图片路径\n        ImageIcon icon = new ImageIcon(resource);       //转换为图标\n\n        //把这个图标放到按钮上\n        JButton button = new JButton();\n        button.setIcon(icon);\n        button.setToolTipText(&quot;图片按钮&quot;);      //图片按钮提示\n        //add\n        container.add(button);\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new JButtonDemo01();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>单选按钮</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\nimport java.net.URL;\n\npublic class JButtonDemo02 extends JFrame&#123;\n    public JButtonDemo02() &#123;\n        Container container = this.getContentPane();\n        //将一个图片变为图标\n        URL resource = JButtonDemo01.class.getResource(&quot;123.jpg&quot;);  //图片路径\n        ImageIcon icon = new ImageIcon(resource);       //转换为图标\n\n        //单选框\n        JRadioButton radioButton1 = new JRadioButton(&quot;JRadioButton01&quot;);\n        JRadioButton radioButton2 = new JRadioButton(&quot;JRadioButton02&quot;);\n        JRadioButton radioButton3 = new JRadioButton(&quot;JRadioButton03&quot;);\n        //由于单选框只能选择一个，可以将他们分组，一个组只能选一个。\n        ButtonGroup group = new ButtonGroup();      //组\n        group.add(radioButton1);                    \n        group.add(radioButton2);\n        group.add(radioButton3);\n\n        container.add(radioButton1,BorderLayout.CENTER);\n        container.add(radioButton2,BorderLayout.NORTH);\n        container.add(radioButton3,BorderLayout.SOUTH);\n\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new JButtonDemo02();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>复选按钮</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\nimport java.net.URL;\n\npublic class JButtonDemo03 extends JFrame &#123;\n    public JButtonDemo03() &#123;\n        Container container = this.getContentPane();\n        //将一个图片变为图标\n        URL resource = JButtonDemo01.class.getResource(&quot;123.jpg&quot;);  //图片路径\n        ImageIcon icon = new ImageIcon(resource);       //转换为图标\n\n        //多选框\n        JCheckBox checkBox01 = new JCheckBox(&quot;checkBox01&quot;);\n        JCheckBox checkBox02 = new JCheckBox(&quot;checkBox02&quot;);\n        \n        container.add(checkBox01,BorderLayout.NORTH);\n        container.add(checkBox02,BorderLayout.SOUTH);\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n    &#125;\n    public static void main(String[] args) &#123;\n        new JButtonDemo03();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-7-列表\"><a href=\"#3-7-列表\" class=\"headerlink\" title=\"3.7 列表\"></a>3.7 列表</h2><p><strong>下拉框</strong></p>\n<pre><code class=\"java\">/*选择地址或者一些单个选项（一到两个最好使用按钮，两个以上使用下拉框，节省内存布局）*/\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class TsetComboboxDemo01 extends JFrame &#123;\n    public TsetComboboxDemo01() &#123;\n        Container container = this.getContentPane();\n        JComboBox status = new JComboBox();\n        status.addItem(null);\n        status.addItem(&quot;正在上映&quot;);\n        status.addItem(&quot;已下架&quot;);\n        status.addItem(&quot;即将上映&quot;);\n\n        // status.addActionListener(); 监听获取值\n\n        container.add(status);\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new TsetComboboxDemo01();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>列表框</strong></p>\n<pre><code class=\"java\">/*展示信息，一般是动态扩容。*/\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.Vector;\n\npublic class TsetComboboxDemo02 extends JFrame &#123;\n    public TsetComboboxDemo02() &#123;\n        Container container = this.getContentPane();\n        //生产列表的内容\n        //String[] contents = &#123;&quot;1&quot;,&quot;2&quot;,&quot;3&quot;&#125;;    静态数组\n\n        Vector contents = new Vector();\n\n        //列表中需要放入内容\n        JList jList = new JList(contents);      //列表\n\n        //动态数组\n        contents.add(&quot;zhangsan&quot;);\n        contents.add(&quot;lisi&quot;);\n        contents.add(&quot;wangwu&quot;);\n        \n        container.add(jList);\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n    public static void main(String[] args) &#123;\n        new TsetComboboxDemo02();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-8-文本框\"><a href=\"#3-8-文本框\" class=\"headerlink\" title=\"3.8 文本框\"></a>3.8 文本框</h2><p><strong>文本框 TextField</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\n\npublic class TestTextDemo01 extends JFrame  &#123;\n    public TestTextDemo01() throws HeadlessException &#123;\n        Container container = this.getContentPane();\n\n\n        JTextField textField1 = new JTextField(&quot;hello&quot;,50);    //文本框+尺寸\n        JTextField textField2 = new JTextField(&quot;world&quot;);\n\n        container.add(textField1,BorderLayout.NORTH);\n        container.add(textField2,BorderLayout.SOUTH);\n\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new TestTextDemo01();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>密码框 PasswordField</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\n\npublic class TestTextDemo02 extends JFrame &#123;\n    public TestTextDemo02() throws HeadlessException &#123;\n        Container container = this.getContentPane();\n\n        JPasswordField passwordField = new JPasswordField();    //密码框***\n        //passwordField.setEchoChar(&#39;*&#39;);                         //密码框显示符号\n\n        container.add(passwordField);\n\n\n        this.setVisible(true);\n        this.setSize(500,300);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new TestTextDemo02();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>文本域 TextArea</strong></p>\n<pre><code class=\"java\">import javax.swing.*;\nimport java.awt.*;\n\npublic class JScrollDemo extends JFrame &#123;\n    public JScrollDemo() &#123;\n        Container container = this.getContentPane();\n        //文本域\n        JTextArea textArea = new JTextArea(20, 50);\n        textArea.setText(&quot;文本域 TextArea&quot;);\n        //Scroll 面板\n        JScrollPane scrollPane = new JScrollPane(textArea);\n        container.add(scrollPane);\n\n\n        this.setBounds(100,100,300,350);\n        this.setVisible(true);\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        new JScrollDemo();\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"4、常用类\"><a href=\"#4、常用类\" class=\"headerlink\" title=\"4、常用类\"></a>4、常用类</h1><pre><code class=\"java\">Frame;\t\t\t\t\t\t\t\t\t\t\t框架\nPanel;\t\t\t\t\t\t\t\t\t\t\t面板\nsetVisible;\t\t\t\t\t\t\t\t\t    可见性true\nsetSize(x,x);\t\t\t\t\t\t\t\t\t初始尺寸\nsetLocation(x,x);\t\t\t\t\t\t\t\t初始位置，x,y\nsetBounds(x,x,x,x);\t\t\t\t\t\t\t\t初始坐标+尺寸\nsetBackground（new color(x,x,x)）;   \t\t    颜色，三基色\nsetResizable;\t\t\t\t\t\t\t\t    大小是否可调，true,false\nsetLayout(new FlowLayout(FlowLayout.LEFT));\t\t流式布局\nframe.add(east,BorderLayout.EAST);\t\t\t\t方向布局\nframe.setLayout(new GridLayout(3,2));\t\t\t表格布局\nActionListener;\t\t\t\t\t\t\t\t\t监听器\nTextField;\t\t\t\t\t\t\t\t\t\t文本框\nTextArea;\t\t\t\t\t\t\t\t\t\t文本域\nPasswordField;\t\t\t\t\t\t\t\t\t密码框\nInteger.parseInt();\t\t\t\t\t\t\t\tString类转int类\npaint;\t\t\t\t\t\t\t\t\t\t\t画笔\nMouseAdapter;\t\t\t\t\t\t\t\t\t鼠标监听器\nWindowListener;\t\t\t\t\t\t\t\t\t窗口监听\nKeyListener;\t\t\t\t\t\t\t\t\t键盘监听\nDefaultCloseOperation(WindowConstants.);\t\t关闭事件(JFrame)\nContentPane;\t\t\t\t\t\t\t\t\t容器(JFrame)\nLayout;\t\t\t\t\t\t\t\t\t\t\t容器自动定位(JFrame)\nButton;\t\t\t\t\t\t\t\t\t\t\t按钮\nRadioButton;\t\t\t\t\t\t\t\t\t单选按钮\nButtonGroup;\t\t\t\t\t\t\t\t\t组\nCheckBox;\t\t\t\t\t\t\t\t\t\t多选按钮\nComboBox;\t\t\t\t\t\t\t\t\t\t下拉框\nList;\t\t\t\t\t\t\t\t\t\t\t列表框\nDialog;\t\t\t\t\t\t\t\t\t\t\t对话框\nLabel;\t\t\t\t\t\t\t\t\t\t\t标签\nIconDemo;\t\t\t\t\t\t\t\t\t\t图标\nImageIcon;\t\t\t\t\t\t\t\t\t\t图片\nScroll;\t\t\t\t\t\t\t\t\t\t\t滚动条\nTimer;\t\t\t\t\t\t\t\t\t\t\t定时器\n</code></pre>\n<hr>\n<p>(部分内容参考【狂神说Java】GUI编程入门到游戏实战)</p>\n","feature":true,"text":"JavaGUI是Java语言提供的一套图形用户界面开发工具，包括AWT和Swing两个主要库。AWT（抽象窗口工具集）是Java最早的GUI库，提供了跨平台的界面组件，但界面风格受系统影响。Swing则是AWT的增强版，提供更丰富的界面组件和更灵活的自定义机制，同时支持跨平台和外观管理器。合理选择AWT或Swing库可根据具体应用场景决定。...","permalink":"/post/Java图形化基础 -- GUI编程","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"28 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81GUI%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、GUI简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81AWT\"><span class=\"toc-text\">2、AWT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-AWT%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">2.1 AWT介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">2.2 组件和容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.3 布局管理器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">2.4 事件监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8\"><span class=\"toc-text\">2.5 简易计算器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E7%94%BB%E7%AC%94\"><span class=\"toc-text\">2.6 画笔</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E9%BC%A0%E6%A0%87%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">2.7 鼠标监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-%E7%AA%97%E5%8F%A3%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">2.8 窗口监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-9-%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">2.9 键盘监听</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81Swing\"><span class=\"toc-text\">3、Swing</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E7%AA%97%E5%8F%A3%E3%80%81%E9%9D%A2%E6%9D%BF\"><span class=\"toc-text\">3.1 窗口、面板</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%BC%B9%E7%AA%97\"><span class=\"toc-text\">3.2 弹窗</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">3.3 标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E9%9D%A2%E6%9D%BF\"><span class=\"toc-text\">3.4 面板</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E8%BE%B9%E6%A1%86%E3%80%81%E6%96%87%E6%9C%AC%E5%9F%9F\"><span class=\"toc-text\">3.5 边框、文本域</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E6%8C%89%E9%92%AE\"><span class=\"toc-text\">3.6 按钮</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.7 列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-8-%E6%96%87%E6%9C%AC%E6%A1%86\"><span class=\"toc-text\">3.8 文本框</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%B8%B8%E7%94%A8%E7%B1%BB\"><span class=\"toc-text\">4、常用类</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"计算机操作系统基础知识点","uid":"8de25e8e132b240cdb154bdb91bce02d","slug":"计算机操作系统基础知识点","date":"2022-05-06T12:09:08.000Z","updated":"2025-07-14T15:12:20.470Z","comments":true,"path":"api/articles/计算机操作系统基础知识点.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/6d319164eb214f4395a4111e1944f220.png","text":"计算机操作系统是管理计算机硬件和软件资源的核心软件。它提供了对计算机资源的抽象和控制，包括处理器调度、内存管理、文件系统和设备驱动等功能。操作系统的目标是提供方便、高效、安全和可靠的计算环境。操作系统在计算机科学中扮演着重要角色，是计算机系统的基石。...","permalink":"/post/计算机操作系统基础知识点","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"计算机科学与技术","slug":"计算机科学与技术","count":6,"path":"api/categories/计算机科学与技术.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":1,"path":"api/tags/操作系统.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--XML、设计模式","uid":"95d5eb05aae54932675ce4d24d2c2637","slug":"Java程序设计 -- XML、设计模式（二十一）","date":"2022-04-19T12:38:36.000Z","updated":"2025-07-14T15:12:20.459Z","comments":true,"path":"api/articles/Java程序设计 -- XML、设计模式（二十一）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"XML（可扩展标记语言）是一种用于描述数据结构和信息传递的标记语言。它具有自定义标签和结构化数据的特点，被广泛应用于配置文件、数据交换和Web服务等领域。设计模式是在软件设计中常用的解决问题的经验总结，如单例模式、工厂模式等。合理使用XML和设计模式可以提高程序的可读性、可维护性和灵活性，使开发过程更加高效和可靠。...","permalink":"/post/Java程序设计 -- XML、设计模式（二十一）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}