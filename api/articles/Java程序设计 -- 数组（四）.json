{"title":"Java程序设计--数组","uid":"68e93659b0f140c2b8d62ff1a84702c9","slug":"Java程序设计 -- 数组（四）","date":"2022-03-18T15:10:42.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 数组（四）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、数组的定义\"><a href=\"#1、数组的定义\" class=\"headerlink\" title=\"1、数组的定义\"></a>1、数组的定义</h1><h2 id=\"1-1-什么是数组\"><a href=\"#1-1-什么是数组\" class=\"headerlink\" title=\"1.1 什么是数组\"></a>1.1 什么是数组</h2><p>数组就是用来存储一批&#x3D;&#x3D;同种类型数据&#x3D;&#x3D;的&#x3D;&#x3D;内存区域&#x3D;&#x3D;(可以理解成容器)。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/fa05e359adbc46bcb24aedfcbe6d25c4.png#pic_center\"></p>\n<h2 id=\"1-2-数组定义格式\"><a href=\"#1-2-数组定义格式\" class=\"headerlink\" title=\"1.2 数组定义格式\"></a>1.2 数组定义格式</h2><p><strong>第一种</strong></p>\n<p>​\t&#x3D;&#x3D;数据类型[]  数组名&#x3D;&#x3D;</p>\n<p>​\t示例：</p>\n<pre><code class=\"java\">int[] arr;        \ndouble[] arr;      \nchar[] arr;\n</code></pre>\n<p><strong>第二种</strong></p>\n<p>​\t&#x3D;&#x3D;数据类型 数组名[]&#x3D;&#x3D;</p>\n<p>​\t示例：</p>\n<pre><code class=\"java\">int arr[];\ndouble arr[];\nchar arr[];\n</code></pre>\n<h2 id=\"1-3-静态化初始化数组\"><a href=\"#1-3-静态化初始化数组\" class=\"headerlink\" title=\"1.3 静态化初始化数组\"></a>1.3 静态化初始化数组</h2><p>定义数组的时候直接给数组赋值</p>\n<p>静态初始化格式</p>\n<ul>\n<li><p>完整版格式</p>\n<pre><code class=\"java\">数据类型[] 数组名 = new 数据类型[] &#123;元素1,元素2,...&#125;;\n</code></pre>\n</li>\n<li><p>简化版格式</p>\n<pre><code class=\"java\">数据类型[] 数组名 = &#123;元素1,元素2,...&#125;;\n</code></pre>\n</li>\n</ul>\n<p>示例代码：</p>\n<pre><code class=\"java\">public class ArrayDemo &#123;\n    public static void main(String[] args) &#123;\n        //定义数组\n        int[] arr = &#123;1, 2, 3&#125;;\n\n        //输出数组名\n        System.out.println(arr);\n\n        //输出数组中的元素\n        System.out.println(arr[0]);\n        System.out.println(arr[1]);\n        System.out.println(arr[2]);\n    &#125;\n&#125;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fff229f8783940599648a277314edf45.png#pic_center\"><br>&#x3D;&#x3D;数组变量名中存储的是数组在内存中的地址，数组是引用类型。&#x3D;&#x3D;</p>\n<p><strong>数组元素访问</strong></p>\n<ul>\n<li>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</li>\n<li>​\t这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。</li>\n<li>数组的最大索引可以表示为：数组名.length - 1（前提是元素个数大于0）</li>\n</ul>\n<p><strong>访问数组元素格式</strong></p>\n<pre><code class=\"java\">数组名[索引];\n</code></pre>\n<p>示例代码：</p>\n<pre><code class=\"java\">public class ArrayDemo &#123;\n    public static void main(String[] args) &#123;\n        int[] arr = new int[3];\n\n        //输出数组名\n        System.out.println(arr); //[I@880ec60\n\n        //输出数组中的元素\n        System.out.println(arr[0]);\n        System.out.println(arr[1]);\n        System.out.println(arr[2]);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>数组的几个注意事项：</strong></p>\n<ul>\n<li>&#x3D;&#x3D;“数据类型[] 数组名”也可以写成“数据类型 数组名[]”&#x3D;&#x3D;。</li>\n<li>&#x3D;&#x3D;什么类型的数组存放什么类型的数据，否则报错&#x3D;&#x3D;。</li>\n<li>&#x3D;&#x3D;数组一旦定义出来，程序执行的过程中，长度、类型就固定了&#x3D;&#x3D; 。</li>\n</ul>\n<h2 id=\"1-4-数组动态初始化\"><a href=\"#1-4-数组动态初始化\" class=\"headerlink\" title=\"1.4 数组动态初始化\"></a>1.4 数组动态初始化</h2><p>定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据。</p>\n<p><strong>动态初始化格式</strong></p>\n<pre><code class=\"java\">数据类型[] 数组名 = new 数据类型[数组长度];\n</code></pre>\n<pre><code class=\"java\">int[] arr = new int[3];\n</code></pre>\n<p><strong>动态初始化数组的元素默认值</strong></p>\n<p>元素默认值</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">明细</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">byte、short、char、int、long</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">float、double</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">boolean</td>\n<td align=\"center\">false</td>\n</tr>\n<tr>\n<td align=\"center\">引用类型</td>\n<td align=\"center\">类、接口、数组、String</td>\n<td align=\"center\">null</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"2、数组的遍历\"><a href=\"#2、数组的遍历\" class=\"headerlink\" title=\"2、数组的遍历\"></a>2、数组的遍历</h1><p>遍历就是一个一个数据的访问。</p>\n<pre><code class=\"java\">public class ArrayDemo &#123;\n    public static void main(String[] args) &#123;\n        // 目标：学会进行数组元素的遍历\n        int[] arr = &#123;12, 24, 12, 48, 98&#125;;\n        //           0    1   2   3   4\n\n        // 原始遍历方式\n//        System.out.println(arr[0]);\n//        System.out.println(arr[1]);\n//        System.out.println(arr[2]);\n//        System.out.println(arr[3]);\n//        System.out.println(arr[4]);\n\n//        for (int i = 0; i &lt; 5; i++) &#123;\n//            System.out.println(arr[i]);\n//        &#125;\n\n        // 终极数组遍历形式\n        for (int i = 0; i &lt; arr.length; i++) &#123;\n            System.out.println(arr[i]);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"3、数组的案例\"><a href=\"#3、数组的案例\" class=\"headerlink\" title=\"3、数组的案例\"></a>3、数组的案例</h1><p><strong>数组元素求和</strong></p>\n<p>需求:某部门5名员工的销售额分别是: 16、26、36、6、100，请计算出他们部门的总销售额。</p>\n<pre><code class=\"java\">public class Test1 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：数组元素求和\n        // 1、把这些数据拿到程序中使用数组记住\n        int[] money = &#123;16, 32, 8, 100, 78&#125;;\n\n        // 3、定义一个求和变量累加数组的元素值\n        int sum = 0;\n\n        // 2、遍历数组中的每个元素\n        for (int i = 0; i &lt; money.length; i++) &#123;\n            // 拿到每个元素值累加\n            sum += money[i];\n        &#125;\n\n        // 4、输出求和变量即可\n        System.out.println(&quot;数组的元素和是：&quot; + sum);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>数组求最值</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/86aacfad9165439695a5adb55462461a.png#pic_center\"></p>\n<pre><code class=\"java\">public class Test2 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：数组元素求最值。\n\n        // 1、定义一个静态初始化的数组，存储一批颜值。\n        int[] faceScore = &#123;15, 9000, 10000, 20000, 9500, -5&#125;;\n        //                 0    1      2     3      4    5\n\n        // 2、定义一个变量用于存储最大值元素，建议使用第一个元素作为参照。\n        int max = faceScore[0];\n\n        // 3、遍历数组的每个元素，依次与最大值变量的数据比较，若较大，则替换。\n        for (int i = 1; i &lt; faceScore.length; i++) &#123;\n            if(faceScore[i] &gt; max)&#123;\n                max = faceScore[i];\n            &#125;\n        &#125;\n\n        // 4、输出最大值变量存储的数据即可。\n        System.out.println(&quot;数组的最大值是：&quot; + max);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>猜数字游戏</strong></p>\n<p>开发一个幸运小游戏，游戏规则如下:<br>游戏后台随机生成1-20之间的5个数（无所谓是否重复)，然后让大家来猜数字:</p>\n<ul>\n<li>未猜中提示:“未命中”，并继续猜测</li>\n<li>猜中提示:“运气不错，猜中了”，并输出该数据第一次出现的位置，且输出全部5个数据，</li>\n</ul>\n<p>最终结束本游戏。</p>\n<pre><code class=\"java\">import java.util.Random;\nimport java.util.Scanner;\n\npublic class Test3 &#123;\n    public static void main(String[] args) &#123;\n        // 需求：5个 1-20之间的随机数，让用户猜测，猜中要提示猜中，还要输出该数据在数组中第一次出现的索引，并打印数组的内容出来。\n        // 没有猜中继续。\n\n        // 1、定义一个动态初始化的数组存储5个随机的1-20之间的数据\n        int[] data = new int[5];\n\n        // 2、动态的生成5个1-20之间的随机数并存入到数组中去。\n        Random r = new Random();\n        for (int i = 0; i &lt; data.length; i++) &#123;\n            // i = 0 1 2 3 4\n            data[i] = r.nextInt(20) + 1;\n        &#125;\n\n        // 3、使用一个死循环让用户进行猜测\n        Scanner sc = new Scanner(System.in);\n        OUT:\n        while (true) &#123;\n            System.out.println(&quot;请您输入一个1-20之间的整数进行猜测：&quot;);\n            int guessData = sc.nextInt();\n\n            // 4、遍历数组中的每个数据，看是否有数据与猜测的数据相同，相同代表猜中了，给出提示\n            for (int i = 0; i &lt; data.length; i++) &#123;\n                if(data[i] == guessData)&#123;\n                    System.out.println(&quot;您已经猜中了该数据，运气不错了！您猜中的数据索引是：&quot; + i);\n                    break OUT; // 结束了整个死循环，代表游戏结束了！\n                &#125;\n            &#125;\n            System.out.println(&quot;当前猜测的数据在数组中不存在，请重新猜测！&quot;);\n        &#125;\n\n        // 5、输出数组的全部元素，让用户看到自己确实是猜中了某个数据。\n        for (int i = 0; i &lt; data.length; i++) &#123;\n            System.out.print(data[i] + &quot;\\t&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>随机排名</strong></p>\n<p>某公司开发部5名开发人员，要进行项目进展汇报演讲，现在采取随机排名后进行汇报。请先依次录入5名员工的工号，然后展示出一组随机的排名顺序。</p>\n<pre><code class=\"java\">import java.util.Random;\nimport java.util.Scanner;\n\npublic class Test4 &#123;\n    public static void main(String[] args) &#123;\n        // 目标：键盘录入一组工号，最终要随机输出一组出来作为排名\n        // 1、动态初始化一个数组，存储5个工号\n        int[] codes = new int[5];\n\n        // 2、定义一个循环，循环5次，依次录入一个工号存入对应的位置\n        Scanner sc = new Scanner(System.in);\n        for (int i = 0; i &lt; codes.length; i++) &#123;\n            // 正式录入工号\n            System.out.println(&quot;请您输入第&quot; + (i + 1) + &quot;个员工的工号：&quot;);\n            int code = sc.nextInt();\n            // 存入到数组中去\n            codes[i] = code;\n        &#125;\n\n        // 3、遍历数组中的每个元素，然后随机一个索引出来，让该元素与随机索引位置处的元素值进行交换（本节的重点）\n        // codes = [12, 36, 28, 45, 99]\n        Random r = new Random();\n        for (int i = 0; i &lt; codes.length; i++) &#123;\n            // 当前遍历的元素值：codes[i]\n            // 随机一个索引位置出来：codes[index]\n            int index = r.nextInt(codes.length);\n\n            // 定义一个临时变量存储index位置处的值\n            int temp = codes[index];\n            codes[index] = codes[i];\n            codes[i] = temp;\n        &#125;\n\n        // 4、遍历数组元素输出就是随机排名的结果\n        for (int i = 0; i &lt; codes.length; i++) &#123;\n            System.out.print(codes[i] + &quot;\\t&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>数组排序</strong></p>\n<pre><code class=\"java\">public class Test5 &#123;\n    public static void main(String[] args) &#123;\n        // 1、定义一个数组，存储一些数据啊\n        int[] arr = &#123;5, 2, 3, 1&#125;;\n        //           0  1  2  3\n\n        // 2、定义一个循环控制比较的轮数\n        for (int i = 0; i &lt; arr.length - 1; i++) &#123;\n            // i == 0  比较的次数 3  j = 0 1 2\n            // i == 1  比较的次数 2  j = 0 1\n            // i == 2  比较的次数 1  j = 0\n            // 3、定义一个循环控制每轮比较的次数，占位\n            for (int j = 0; j &lt; arr.length - i - 1; j++) &#123;\n                // 判断j当前位置的元素值 是否 大于后一个位置 若较大 则交换\n                if(arr[j] &gt; arr[j+1]) &#123;\n                    int temp = arr[j+1];\n                    arr[j+1] = arr[j];\n                    arr[j] = temp;\n                &#125;\n            &#125;\n        &#125;\n\n        // 遍历数组内容输出\n        for (int i = 0; i &lt; arr.length; i++) &#123;\n            System.out.print(arr[i] + &quot;\\t&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"4、数组的内存图\"><a href=\"#4、数组的内存图\" class=\"headerlink\" title=\"4、数组的内存图\"></a>4、数组的内存图</h1><h2 id=\"4-1-内存概述\"><a href=\"#4-1-内存概述\" class=\"headerlink\" title=\"4.1 内存概述\"></a>4.1 内存概述</h2><p>​\t内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p>\n<p>​\t我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p>\n<p>​\t必须放进内存中才能运行，运行完毕后会清空内存。 </p>\n<p>​\tJava虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p>\n<h2 id=\"4-2-java中的内存分配\"><a href=\"#4-2-java中的内存分配\" class=\"headerlink\" title=\"4.2 java中的内存分配\"></a>4.2 java中的内存分配</h2><ul>\n<li>目前我们只需要记住两个内存，分别是：<strong>栈内存</strong>和<strong>堆内存</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>区域名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>寄存器</td>\n<td>给CPU使用，和我们开发无关。</td>\n</tr>\n<tr>\n<td>本地方法栈</td>\n<td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td>\n</tr>\n<tr>\n<td>方法区</td>\n<td>存储可以运行的class文件。</td>\n</tr>\n<tr>\n<td>堆内存</td>\n<td>存储对象或者数组，new来创建的，都存储在堆内存。</td>\n</tr>\n<tr>\n<td>方法栈</td>\n<td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td>\n</tr>\n</tbody></table>\n<p><strong>java内存分配、数组内存图</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/b7d79fc8f1e543f4a6c524bfcf954005.png#pic_center\"><br><img src=\"https://img-blog.csdnimg.cn/ed006f91efc542e1ba6a80d8bae8fdc7.png#pic_center\"></p>\n<p><strong>两个数组变量指向同一个数组对象</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/abc4b2a649de480a8d75308eb84d7e21.png#pic_center\"></p>\n<hr>\n<h1 id=\"5、数组使用的常见问题\"><a href=\"#5、数组使用的常见问题\" class=\"headerlink\" title=\"5、数组使用的常见问题\"></a>5、数组使用的常见问题</h1><h2 id=\"5-1-索引越界异常\"><a href=\"#5-1-索引越界异常\" class=\"headerlink\" title=\"5.1 索引越界异常\"></a>5.1 索引越界异常</h2><p>出现原因</p>\n<pre><code class=\"java\">public class ArrayDemo &#123;\n    public static void main(String[] args) &#123;\n        int[] arr = new int[3];\n        System.out.println(arr[3]);\n    &#125;\n&#125;\n</code></pre>\n<p>  数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</p>\n<p>  程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p>\n<ul>\n<li><p>解决方案</p>\n<p>将错误的索引修改为正确的索引范围即可！</p>\n</li>\n</ul>\n<h2 id=\"5-2-空指针异常\"><a href=\"#5-2-空指针异常\" class=\"headerlink\" title=\"5.2 空指针异常\"></a>5.2 空指针异常</h2><p>出现原因</p>\n<pre><code class=\"java\">public class ArrayDemo &#123;\n    public static void main(String[] args) &#123;\n        int[] arr = new int[3];\n\n        //把null赋值给数组\n        arr = null;\n        System.out.println(arr[0]);\n    &#125;\n&#125;\n</code></pre>\n<p>  arr &#x3D; null 这行代码，意味着变量arr将不会再保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p>\n<ul>\n<li><p>解决方案</p>\n<p>给数组一个真正的堆内存空间引用即可！</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"6、Debug工具的使用\"><a href=\"#6、Debug工具的使用\" class=\"headerlink\" title=\"6、Debug工具的使用\"></a>6、Debug工具的使用</h1><p>Debug工具</p>\n<p>IDEA自带的断点调试(排错)工具，可以控制代码从断点开始一行一行的执行，然后详细观看程序执行的情况。<br><img src=\"https://img-blog.csdnimg.cn/660420143cf142279edf56b474f19d06.png#pic_center\"></p>\n<hr>\n","feature":true,"text":"本篇文章将将首先介绍数组的定义和基本特性，包括数组的初始化、存储多个元素等。接着，我们将详细讲解如何使用循环结构来遍历数组，从而实现对数组元素的逐一访问和处理。...","permalink":"/post/Java程序设计 -- 数组（四）","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1、数组的定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">1.1 什么是数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.2 数组定义格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E9%9D%99%E6%80%81%E5%8C%96%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">1.3 静态化初始化数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E6%95%B0%E7%BB%84%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.4 数组动态初始化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">2、数组的遍历</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3、数组的案例</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE\"><span class=\"toc-text\">4、数组的内存图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">4.1 内存概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">4.2 java中的内存分配</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5、数组使用的常见问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E7%B4%A2%E5%BC%95%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">5.1 索引越界异常</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">5.2 空指针异常</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81Debug%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">6、Debug工具的使用</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--方法","uid":"e865c90ea90eb26ac07b0e4b3b7fa410","slug":"Java程序设计 -- 方法（五）","date":"2022-03-19T14:05:28.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 方法（五）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本篇文章将首先介绍方法的定义和使用，包括如何声明、调用和返回数值。接着，我们将详细讨论参数传递的方式，包括数值传递和引用传递，帮助读者理解方法中数据的传递和处理过程。最后，我们将重点讨论方法重载，即在同一作用域内，允许存在多个同名方法，但它们的参数列表不同。...","permalink":"/post/Java程序设计 -- 方法（五）","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--程序流程控制","uid":"6d1d4ce6ed78a6b43fb777ff72a43b22","slug":"Java程序设计 -- 程序流程控制（三）","date":"2022-03-17T13:17:26.000Z","updated":"2025-07-14T15:12:20.461Z","comments":true,"path":"api/articles/Java程序设计 -- 程序流程控制（三）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本篇文章将首先介绍顺序结构，即按照代码顺序依次执行的基本编程结构。接着，我们将深入探讨分支结构和循环结构，这两种结构为程序引入了灵活性和逻辑判断能力。最后，我们将重点介绍random类，它在Java中的应用十分广泛，用于生成随机数，实现各种随机算法和应用场景。...","permalink":"/post/Java程序设计 -- 程序流程控制（三）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}