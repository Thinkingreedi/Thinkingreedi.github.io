{"title":"C++--类和对象","uid":"7669cae9d33b780b1bd0b4de74a11898","slug":"C++--类和对象","date":"2021-04-14T04:52:28.000Z","updated":"2025-07-14T15:12:20.456Z","comments":true,"path":"api/articles/C++--类和对象.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/506e6842fd8542408c76ef139e90ebd3.png","content":"<hr>\n<h1 id=\"0、类、对象、成员函数、数据函数\"><a href=\"#0、类、对象、成员函数、数据函数\" class=\"headerlink\" title=\"0、类、对象、成员函数、数据函数\"></a>0、类、对象、成员函数、数据函数</h1><ul>\n<li>首先，我们做一个简单的类比。</li>\n<li>通常，一辆小汽车是从工程图样开始的，它们类似于设计房屋用的蓝图，可以通过蓝图去制造具有复杂功能的小汽车，我们可以将其类比于“类”。</li>\n<li>我们不能驾驶小轿车的工程图样，也不能驾驶“类”，所以应该先根据工程图样制造一辆小轿车；同样，我们应该创建类的对象。</li>\n<li>小汽车的每一项操作由对应的功能实现，这相当于类里面的成员函数。</li>\n<li>小轿车具有许多属性，比如颜色，油量；在类里面，属性由类的数据成员来具体说明。</li>\n<li>下面，通过七个例子对类进行初步剖析：</li>\n</ul>\n<hr>\n<h1 id=\"1、定义具有类的成员函数\"><a href=\"#1、定义具有类的成员函数\" class=\"headerlink\" title=\"1、定义具有类的成员函数\"></a>1、定义具有类的成员函数</h1><pre><code class=\"cpp\">#include&lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass GradeBook//创建类\n&#123;\n    //公共成员访问说明符\n    public:\n        void displayMessage()//成员函数\n        &#123;\n            cout&lt;&lt;&quot;Welcome to the Grade Book!&quot;&lt;&lt;endl;\n         &#125; \n&#125;;\n\nint main(void)\n&#123;\n    GradeBook myGradeBook;//根据类来实例化对象\n    myGradeBook.displayMessage();//对象调用成员函数\n    return 0;\n&#125;\n</code></pre>\n<ul>\n<li>定义具有一个成员函数的GradeBook类，然后创建一个GradeBook对象并调用它的成员函数。</li>\n</ul>\n<hr>\n<h1 id=\"2、定义一个具有形参的成员函数\"><a href=\"#2、定义一个具有形参的成员函数\" class=\"headerlink\" title=\"2、定义一个具有形参的成员函数\"></a>2、定义一个具有形参的成员函数</h1><pre><code class=\"cpp\">#include&lt;iostream&gt;\nusing std::cout;\nusing std::cin;\nusing std::endl;\n\n#include&lt;string&gt;\nusing std::string;\nusing std::getline;\n\nclass GradeBook\n&#123;\n    public:\n        void displayMessage(string courseName)//设置形参\n        &#123;\n            cout &lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;courseName&lt;&lt;&quot;!&quot;&lt;&lt;endl;\n        &#125;\n &#125; ;\n \n int main(void)\n &#123;\n     string nameofCourse;\n     GradeBook myGradeBook;\n     \n     cout&lt;&lt;&quot;Please enter the course name:&quot;&lt;&lt;endl;\n     getline(cin,nameofCourse);//获取参数\n     cout&lt;&lt;endl;\n     \n     myGradeBook.displayMessage(nameofCourse);//参数传递\n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>定义具有一个成员函数的GradeBook类，该成员函数接受一个形参。</li>\n</ul>\n<hr>\n<h1 id=\"3-数据成员、设置函数和一个获取函数的类\"><a href=\"#3-数据成员、设置函数和一个获取函数的类\" class=\"headerlink\" title=\"3.数据成员、设置函数和一个获取函数的类\"></a>3.数据成员、设置函数和一个获取函数的类</h1><pre><code class=\"cpp\">#include&lt;iostream&gt;\nusing std::cout;\nusing std::cin;\nusing std::endl;\n\n#include&lt;string&gt;\nusing std::string;\nusing std::getline;\n\nclass GradeBook\n&#123;\n    public:\n        void setCourseName(string name)//设置-“更换器”\n        &#123;\n            courseName = name;\n        &#125;\n        string getCourseName()//获取-“访问器”\n        &#123;\n            return courseName;\n        &#125;\n        void displayMessage()\n        &#123;\n            cout&lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;getCourseName()&lt;&lt;&quot;!&quot;&lt;&lt;endl; \n        &#125;\n    private://私有数据\n        string courseName;\n &#125; ;\n \n int main(void)\n &#123;\n     string nameofCourse;\n     GradeBook myGradeBook;\n     \n     cout&lt;&lt;&quot;Initial course name is:&quot;&lt;&lt;myGradeBook.getCourseName()&lt;&lt;endl;\n     \n     cout&lt;&lt;&quot;\\nPlease enter the course name:&quot;&lt;&lt;endl;\n     getline(cin,nameofCourse);\n     myGradeBook.setCourseName(nameofCourse);\n     \n     cout&lt;&lt;endl;\n     myGradeBook.displayMessage();\n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>定义测试具有一个数据成员以及设置获取函数的类。</li>\n</ul>\n<hr>\n<h1 id=\"4-用构造函数初始化对象\"><a href=\"#4-用构造函数初始化对象\" class=\"headerlink\" title=\"4.用构造函数初始化对象\"></a>4.用构造函数初始化对象</h1><pre><code class=\"cpp\">#include&lt;iostream&gt;\nusing std::cout;\nusing std::cin;\nusing std::endl;\n\n#include&lt;string&gt;\nusing std::string;\n\nclass GradeBook\n&#123;\n    public:\n        GradeBook(string name)\n//构造函数：用于创建对象时初始化，无返回类型，不可以返回任何值\n        &#123;\n            setCourseName(name);\n        &#125;\n        void setCourseName(string name)\n        &#123;\n            courseName = name;\n        &#125;\n        string getCourseName()\n        &#123;\n            return courseName;\n        &#125;\n        void displayMessage()\n        &#123;\n            cout&lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;getCourseName()&lt;&lt;&quot;!&quot;&lt;&lt;endl; \n        &#125;\n    private:\n        string courseName;\n &#125; ;\n \n int main(void)\n &#123;\n    GradeBook gradeBook1(&quot;C语言程序设计基础&quot;);//创建对象时初始化\n    GradeBook gradeBook2(&quot;C++大学基础教程&quot;);\n    \n    cout&lt;&lt;&quot;gradeBook1 created for course:&quot;&lt;&lt;gradeBook1.getCourseName()\n    &lt;&lt;&quot;\\ngradeBook2 created for course:&quot;&lt;&lt;gradeBook2.getCourseName()&lt;&lt;endl;\n     \n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>实例化GradeBook类的多个对象并在创建每个GradeBook对象时使用GradeBook构造函数指定课程名称。</li>\n</ul>\n<hr>\n<h1 id=\"5-一个类对应一个独立文件的可重用性\"><a href=\"#5-一个类对应一个独立文件的可重用性\" class=\"headerlink\" title=\"5.一个类对应一个独立文件的可重用性\"></a>5.一个类对应一个独立文件的可重用性</h1><pre><code class=\"cpp\">//GradeBook.h\n#include&lt;iostream&gt;\nusing std::cout;\nusing std::cin;\nusing std::endl;\n\n#include&lt;string&gt;\nusing std::string;\n\nclass GradeBook\n&#123;\n    public:\n        GradeBook(string name)\n        &#123;\n            setCourseName(name);\n        &#125;\n        \n        void setCourseName(string name)\n        &#123;\n            courseName = name;\n        &#125;\n        \n        string getCourseName()\n        &#123;\n            return courseName;\n        &#125;\n        \n        void displayMessage()\n        &#123;\n            cout&lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;getCourseName()&lt;&lt;&quot;!&quot;&lt;&lt;endl; \n        &#125;\n    private:\n        string courseName;\n &#125; ;\n</code></pre>\n<pre><code class=\"cpp\">//GeadeBook.cpp\n#include&lt;iostream&gt;\nusing std::cout; \nusing std::endl;\n\n#include&quot;GradeBook.h&quot;\n \nint main(void)\n &#123;\n    GradeBook gradeBook1(&quot;C语言程序设计基础&quot;);\n    GradeBook gradeBook2(&quot;C++大学基础教程&quot;);\n    \n    cout&lt;&lt;&quot;gradeBook1 created for course:&quot;&lt;&lt;gradeBook1.getCourseName()\n    &lt;&lt;&quot;\\ngradeBook2 created for course:&quot;&lt;&lt;gradeBook2.getCourseName()&lt;&lt;endl;\n     \n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>GradeBook的类定义；</li>\n<li>包含源自文件GradeBook.h的GradeBook类以让main函数使用。</li>\n</ul>\n<hr>\n<h1 id=\"6-接口的实现与分离\"><a href=\"#6-接口的实现与分离\" class=\"headerlink\" title=\"6.接口的实现与分离\"></a>6.接口的实现与分离</h1><pre><code class=\"cpp\">//GradeBook.h\n#include&lt;string&gt;\nusing std::string;\n\nclass GradeBook\n&#123;\n    public:\n        GradeBook(string);\n        void setCourseName(string);\n        string getCourseName();\n        void displayMessage();\n    private:\n        string courseName;\n &#125;; \n</code></pre>\n<pre><code class=\"cpp\">//GradeBook.cpp\n#include&lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\n#include&quot;GradeBook.h&quot;\n//成员函数名之前都添加了二元作用域分辨运算符&quot;::&quot;;在类的外部定义类的成员函数时，在函数名前省略类名和二元作用域分辨运算符会导致编译错误\nGradeBook::GradeBook(string name)\n&#123;\n    setCourseName(name);\n&#125;\n\nvoid GradeBook::setCourseName(string name)\n&#123;\n    courseName = name;\n&#125;\n\nstring GradeBook::getCourseName()\n&#123;\n    return courseName;\n&#125;\n\nvoid GradeBook::displayMessage()\n&#123;\n    cout&lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;getCourseName()&lt;&lt;&quot;!&quot;&lt;&lt;endl; \n&#125;\n</code></pre>\n<pre><code class=\"cpp\">//GradeBookTest.cpp\n#include&lt;iostream&gt;\nusing std::cout; \nusing std::endl;\n\n#include&quot;GradeBook.h&quot;\n \nint main(void)\n &#123;\n    GradeBook gradeBook1(&quot;C语言程序设计基础&quot;);\n    GradeBook gradeBook2(&quot;C++大学基础教程&quot;);\n    \n    cout&lt;&lt;&quot;gradeBook1 created for course:&quot;&lt;&lt;gradeBook1.getCourseName()\n    &lt;&lt;&quot;\\ngradeBook2 created for course:&quot;&lt;&lt;gradeBook2.getCourseName()&lt;&lt;endl;\n     \n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>指定类接口的函数原型的GradeBook的类定义；</li>\n<li>GradeBook成员函数的定义描述了GradeBook类的实现；</li>\n<li>接口和实现分离之后的GradeBook类的演示。</li>\n</ul>\n<hr>\n<h1 id=\"7-用设置函数确认数据的有效性\"><a href=\"#7-用设置函数确认数据的有效性\" class=\"headerlink\" title=\"7.用设置函数确认数据的有效性\"></a>7.用设置函数确认数据的有效性</h1><pre><code class=\"cpp\">//GradeBook.h\n#include&lt;string&gt;\nusing std::string;\n\nclass GradeBook\n&#123;\n    public:\n        GradeBook(string);\n        void setCourseName(string);\n        string getCourseName();\n        void displayMessage();\n    private:\n        string courseName;\n &#125;; \n</code></pre>\n<pre><code class=\"cpp\">//GradeBook.cpp\n#include&lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\n#include&quot;GradeBook.h&quot;\n\nGradeBook::GradeBook(string name)\n&#123;\n    setCourseName(name);\n&#125;\n\nvoid GradeBook::setCourseName(string name)\n&#123;\n    if(name.length() &lt;= 25)\n        courseName = name;\n        \n    if(name.length() &gt; 25)\n    &#123;\n        courseName = name.substr(0,25);//start at 0,length of 25\n        \n        cout&lt;&lt;&quot;Name\\&quot;&quot;&lt;&lt;name&lt;&lt;&quot;\\&quot;exceeds maximum length(25).\\n&quot; &lt;&lt;\n        &quot;Limiting courseName to first 25 characters.\\n&quot;&lt;&lt;endl;\n    &#125;\t\t\n&#125;\n\nstring GradeBook::getCourseName()\n&#123;\n    return courseName;\n&#125;\n\nvoid GradeBook::displayMessage()\n&#123;\n    cout&lt;&lt;&quot;Welcome to the grade book for\\n&quot;&lt;&lt;getCourseName()&lt;&lt;&quot;!&quot;&lt;&lt;endl; \n&#125;\n</code></pre>\n<pre><code class=\"cpp\">//GradeBookTest.cpp\n#include&lt;iostream&gt;\nusing std::cout; \nusing std::endl;\n\n#include&quot;GradeBook.h&quot;\n \nint main(void)\n &#123;\n    GradeBook gradeBook1(&quot;C语言程序设计基础1 2 3 4 5 6 7 9 10&quot;);\n    GradeBook gradeBook2(&quot;C++大学基础教程&quot;);\n    \n    cout&lt;&lt;&quot;gradeBook1&#39;s initial course name is:&quot;&lt;&lt;gradeBook1.getCourseName()\n    &lt;&lt;&quot;\\ngradeBook.2&#39;s initial course name is:&quot;&lt;&lt;gradeBook2.getCourseName()&lt;&lt;endl; \n    \n    gradeBook1.setCourseName(&quot;C语言程序设计基础&quot;); \n    \n    cout&lt;&lt;&quot;\\ngradeBook1&#39;s course name is:&quot;&lt;&lt;gradeBook1.getCourseName()\n    &lt;&lt;&quot;\\ngradeBook2&#39;s course name is:&quot;&lt;&lt;gradeBook2.getCourseName()&lt;&lt;endl;\n     \n     return 0;\n &#125;\n</code></pre>\n<ul>\n<li>GradeBook的类定义；</li>\n<li>GradeBook类定义的成员函数定义，其中使用了确认数据成员courseName长度有效性的一个设置函数；</li>\n<li>创建和操作一个GradeBook对象，该对象中的课程名称限制到25个字符长。</li>\n</ul>\n<hr>\n","feature":false,"text":"类和对象是C++中面向对象编程的基本概念。通过使用类和对象，可以实现封装、继承和多态等面向对象编程的特性。类和对象的使用能够提高代码的可维护性、重用性和扩展性，使程序更加模块化和灵活。...","permalink":"/post/C++--类和对象","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"类和对象","slug":"类和对象","count":3,"path":"api/tags/类和对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0%E3%80%81%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E3%80%81%E6%95%B0%E6%8D%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">0、类、对象、成员函数、数据函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E4%B9%89%E5%85%B7%E6%9C%89%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1、定义具有类的成员函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%85%B7%E6%9C%89%E5%BD%A2%E5%8F%82%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2、定义一个具有形参的成员函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E3%80%81%E8%AE%BE%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">3.数据成员、设置函数和一个获取函数的类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4.用构造函数初始化对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AA%E7%8B%AC%E7%AB%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7\"><span class=\"toc-text\">5.一个类对应一个独立文件的可重用性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">6.接口的实现与分离</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%87%BD%E6%95%B0%E7%A1%AE%E8%AE%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7\"><span class=\"toc-text\">7.用设置函数确认数据的有效性</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++--类的深入剖析(上)","uid":"6830f8a00d81e25dd175ae13a91978e0","slug":"C++--类的深入剖析（上）","date":"2021-04-14T14:38:05.000Z","updated":"2025-07-14T15:12:20.456Z","comments":true,"path":"api/articles/C++--类的深入剖析（上）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/506e6842fd8542408c76ef139e90ebd3.png","text":"在C++中，析构函数是一种特殊的成员函数，主要作用是释放对象所占用的资源，如释放动态分配的内存、关闭文件或释放其他系统资源。它可以执行任何必要的清理操作，以确保对象的资源被正确处理。...","permalink":"/post/C++--类的深入剖析（上）","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"类和对象","slug":"类和对象","count":3,"path":"api/tags/类和对象.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false},"next_post":{"title":"C语言--单链表","uid":"c47e1917b76d2ae57b175191d76a83f7","slug":"C语言--单链表","date":"2021-02-01T02:56:02.000Z","updated":"2025-07-14T15:12:20.457Z","comments":true,"path":"api/articles/C语言--单链表.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/aca9cfd116ae48d7a8782bc3b7550da2.png","text":"C语言中的单链表是一种常见的数据结构，用于存储和组织数据。在C语言中，可以使用指针和动态内存分配来实现单链表。单链表在C语言中有着广泛的应用，能够帮助程序员解决各种实际的数据组织和操作问题。...","permalink":"/post/C语言--单链表","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"C语言","slug":"C语言","count":2,"path":"api/categories/C语言.json"}],"tags":[{"name":"单链表","slug":"单链表","count":1,"path":"api/tags/单链表.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}