{"title":"Java程序设计--程序流程控制","uid":"6d1d4ce6ed78a6b43fb777ff72a43b22","slug":"Java程序设计 -- 程序流程控制（三）","date":"2022-03-17T13:17:26.000Z","updated":"2025-07-14T15:12:20.461Z","comments":true,"path":"api/articles/Java程序设计 -- 程序流程控制（三）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、流程控制语句\"><a href=\"#1、流程控制语句\" class=\"headerlink\" title=\"1、流程控制语句\"></a>1、流程控制语句</h1><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>\n<p><strong>流程控制语句分类</strong></p>\n<ol>\n<li>​\t顺序结构</li>\n<li>​\t分支结构(if, switch)</li>\n<li>​\t循环结构(for, while, do…while)</li>\n</ol>\n<hr>\n<h1 id=\"2、顺序结构\"><a href=\"#2、顺序结构\" class=\"headerlink\" title=\"2、顺序结构\"></a>2、顺序结构</h1><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>\n<p>顺序结构执行流程图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4c47884549aa45929d5edbe09a56ccfc.png#pic_center\"></p>\n<hr>\n<h1 id=\"3、分支结构\"><a href=\"#3、分支结构\" class=\"headerlink\" title=\"3、分支结构\"></a>3、分支结构</h1><h2 id=\"3-1-if语句格式1\"><a href=\"#3-1-if语句格式1\" class=\"headerlink\" title=\"3.1 if语句格式1\"></a>3.1 if语句格式1</h2><pre><code class=\"java\">格式：\nif (关系表达式) &#123;\n    语句体;\t\n&#125;\n</code></pre>\n<p>执行流程：</p>\n<ol>\n<li>首先计算关系表达式的值</li>\n<li>如果关系表达式的值为true就执行语句体</li>\n<li>如果关系表达式的值为false就不执行语句体</li>\n<li>继续执行后面的语句内容</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/67efd4c6088841ad84dd8ff1c649ed5f.png#pic_center\"></p>\n<p>示例：判断相等</p>\n<pre><code class=\"java\">public class IfDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;开始&quot;);\t\n        //定义两个变量\n        int a = 10;\n        int b = 20;\t\n        //需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b\n        if(a == b) &#123;\n            System.out.println(&quot;a等于b&quot;);\n        &#125;\t\t\n        //需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c\n        int c = 10;\n        if(a == c) &#123;\n            System.out.println(&quot;a等于c&quot;);\n        &#125;\t\t\n        System.out.println(&quot;结束&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-2-if语句格式2\"><a href=\"#3-2-if语句格式2\" class=\"headerlink\" title=\"3.2 if语句格式2\"></a>3.2 if语句格式2</h2><pre><code class=\"java\">格式：\nif (关系表达式) &#123;\n    语句体1;\t\n&#125; else &#123;\n    语句体2;\t\n&#125;\n</code></pre>\n<p>执行流程：</p>\n<ol>\n<li>首先计算关系表达式的值</li>\n<li>如果关系表达式的值为true就执行语句体1</li>\n<li>如果关系表达式的值为false就执行语句体2</li>\n<li>继续执行后面的语句内容</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/47a13f74bd6241e9b71b764d9655d167.png#pic_center\"></p>\n<p>示例：比较大小</p>\n<pre><code class=\"java\">public class IfDemo02 &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;开始&quot;);\t\t\n        //定义两个变量\n        int a = 10;\n        int b = 20;\n        b = 5;\t\n        //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b\n        if(a &gt; b) &#123;\n            System.out.println(&quot;a的值大于b&quot;);\n        &#125; else &#123;\n            System.out.println(&quot;a的值不大于b&quot;);\n        &#125;\t\t\n        System.out.println(&quot;结束&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-3-if语句格式3\"><a href=\"#3-3-if语句格式3\" class=\"headerlink\" title=\"3.3 if语句格式3\"></a>3.3 if语句格式3</h2><pre><code class=\"java\">格式：\nif (关系表达式1) &#123;\n    语句体1;\t\n&#125; else if (关系表达式2) &#123;\n    语句体2;\t\n&#125; \n…\nelse &#123;\n    语句体n+1;\n&#125;\n</code></pre>\n<p>执行流程：</p>\n<ol>\n<li>首先计算关系表达式1的值</li>\n<li>如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</li>\n<li>如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</li>\n<li>…</li>\n<li>如果没有任何关系表达式为true，就执行语句体n+1。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/fc8826fcb7f04937b2d2c65e6ce1e5d0.png#pic_center\"></p>\n<p>示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日。</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class IfDemo03 &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;开始&quot;);\n        // 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请输入一个星期数(1-7)：&quot;);\n        int week = sc.nextInt();\n        if(week == 1) &#123;\n            System.out.println(&quot;星期一&quot;);\n        &#125; else if(week == 2) &#123;\n            System.out.println(&quot;星期二&quot;);\n        &#125; else if(week == 3) &#123;\n            System.out.println(&quot;星期三&quot;);\n        &#125; else if(week == 4) &#123;\n            System.out.println(&quot;星期四&quot;);\n        &#125; else if(week == 5) &#123;\n            System.out.println(&quot;星期五&quot;);\n        &#125; else if(week == 6) &#123;\n            System.out.println(&quot;星期六&quot;);\n        &#125; else &#123;\n            System.out.println(&quot;星期日&quot;);\n        &#125;\t\n        System.out.println(&quot;结束&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-4-分支结构：switch语句\"><a href=\"#3-4-分支结构：switch语句\" class=\"headerlink\" title=\"3.4 分支结构：switch语句\"></a>3.4 分支结构：switch语句</h2><p>switch语句也是匹配条件去执行分支，适合做值匹配的分支选择，结构清晰，格式良好。</p>\n<p> <strong>switch语句结构</strong></p>\n<p>格式</p>\n<pre><code class=\"java\">switch (表达式) &#123;\n    case 1:\n        语句体1;\n        break;\n    case 2:\n        语句体2;\n        break;\n    ...\n    default:\n        语句体n+1;\n        break;\n&#125;\n</code></pre>\n<p>执行流程：</p>\n<ol>\n<li>首先计算出表达式的值</li>\n<li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</li>\n<li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</li>\n</ol>\n<p><strong>switch语句练习-春夏秋冬</strong></p>\n<p>需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。 </p>\n<p>运行结果：</p>\n<pre><code>春：3、4、5\n夏：6、7、8\n秋：9、10、11\n冬：1、2、12\n</code></pre>\n<p>示例代码：</p>\n<pre><code class=\"java\">public class Demo1 &#123;\n    public static void main(String[] args) &#123;\n        //键盘录入月份数据，使用变量接收\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请输入一个月份：&quot;);\n        int month = sc.nextInt();\n        //case穿透\n        switch(month) &#123;\n            case 1:\n            case 2:\n            case 12:\n                System.out.println(&quot;冬季&quot;);\n                break;\n            case 3:\n            case 4:\n            case 5:\n                System.out.println(&quot;春季&quot;);\n                break;\n            case 6:\n            case 7:\n            case 8:\n                System.out.println(&quot;夏季&quot;);\n                break;\n            case 9:\n            case 10:\n            case 11:\n                System.out.println(&quot;秋季&quot;);\n                break;\n            default:\n                System.out.println(&quot;你输入的月份有误&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。</p>\n<p><strong>switch分支注意事项:</strong></p>\n<ol>\n<li>&#x3D;&#x3D;表达式类型只能是byte、short、int、char，JDK5开始支持枚举，JDK7开始支持String.不支持double、float、long&#x3D;&#x3D;。</li>\n<li>&#x3D;&#x3D;case给出的值不允许重复，且只能是字面量，不能是变量&#x3D;&#x3D;。</li>\n<li>&#x3D;&#x3D;<strong>不要忘记写break，否则会出现穿透现象</strong>&#x3D;&#x3D;。</li>\n</ol>\n<hr>\n<h1 id=\"4、循环结构\"><a href=\"#4、循环结构\" class=\"headerlink\" title=\"4、循环结构\"></a>4、循环结构</h1><h2 id=\"4-1-for循环结构\"><a href=\"#4-1-for循环结构\" class=\"headerlink\" title=\"4.1 for循环结构\"></a>4.1 for循环结构</h2><p>循环：</p>\n<p>  循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。 </p>\n<p>for循环格式：</p>\n<pre><code class=\"java\">for (初始化语句;条件判断语句;条件控制语句) &#123;\n    循环体语句;\n&#125;\n</code></pre>\n<p>格式解释：</p>\n<ol>\n<li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li>\n<li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li>\n<li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li>\n<li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li>\n</ol>\n<p> 执行流程：</p>\n<ol>\n<li><p>执行初始化语句</p>\n</li>\n<li><p>执行条件判断语句，看其结果是true还是false<br>    - 如果是false，循环结束\t\t<br>    - 如果是true，继续执行</p>\n</li>\n<li><p>执行循环体语句</p>\n</li>\n<li><p>执行条件控制语句</p>\n</li>\n<li><p>回到2继续</p>\n</li>\n</ol>\n<p><strong>for循环练习-输出数据</strong></p>\n<p>需求：在控制台输出1-5和5-1的数据</p>\n<p>示例代码：</p>\n<pre><code class=\"java\">public class ForTest01 &#123;\n    public static void main(String[] args) &#123;\n        //需求：输出数据1-5\n        for(int i=1; i&lt;=5; i++) &#123;\n            System.out.println(i);\n        &#125;\n        System.out.println(&quot;--------&quot;);\n        //需求：输出数据5-1\n        for(int i=5; i&gt;=1; i--) &#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>for循环练习-求和</strong></p>\n<p>需求：求1-5之间的数据和，并把求和结果在控制台输出  </p>\n<p>示例代码：</p>\n<pre><code class=\"java\">public class ForTest02 &#123;\n    public static void main(String[] args) &#123;\n        //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0\n        int sum = 0;\n        //从1开始到5结束的数据，使用循环结构完成\n        for(int i=1; i&lt;=5; i++) &#123;\n            //将反复进行的事情写入循环结构内部\n             // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中\n            sum += i;\n            /*\n                sum += i;\tsum = sum + i;\n                第一次：sum = sum + i = 0 + 1 = 1;\n                第二次：sum = sum + i = 1 + 2 = 3;\n                第三次：sum = sum + i = 3 + 3 = 6;\n                第四次：sum = sum + i = 6 + 4 = 10;\n                第五次：sum = sum + i = 10 + 5 = 15;\n            */\n        &#125;\n        //当循环执行完毕时，将最终数据打印出来\n        System.out.println(&quot;1-5之间的数据和是：&quot; + sum);\n    &#125;\n&#125;\n</code></pre>\n<p>本题要点：</p>\n<ul>\n<li>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量</li>\n<li>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</li>\n</ul>\n<p><strong>for循环练习-求偶数和</strong></p>\n<p> 需求：求1-100之间的偶数和，并把求和结果在控制台输出 </p>\n<p> 示例代码：</p>\n<pre><code class=\"java\">public class ForTest03 &#123;\n    public static void main(String[] args) &#123;\n        //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0\n        int sum = 0;\n        //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同\n        for(int i=1; i&lt;=100; i++) &#123;\n            //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数\n            if(i%2 == 0) &#123;\n                sum += i;\n            &#125;\n        &#125;\n        //当循环执行完毕时，将最终数据打印出来\n        System.out.println(&quot;1-100之间的偶数和是：&quot; + sum);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>for循环练习-水仙花</strong></p>\n<p>需求：在控制台输出所有的“水仙花数” </p>\n<p>解释：什么是水仙花数？</p>\n<p>水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数</p>\n<p>例如<code>153  3*3*3 + 5*5*5 + 1*1*1 = 153</code></p>\n<p>思路：</p>\n<ol>\n<li>获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取</li>\n<li>获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数</li>\n</ol>\n<p>示例代码</p>\n<pre><code class=\"java\">public class ForTest04 &#123;\n    public static void main(String[] args) &#123;\n        //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束\n        for(int i=100; i&lt;1000; i++) &#123;\n            //在计算之前获取三位数中每个位上的值\n            int ge = i%10;\n            int shi = i/10%10;\n            int bai = i/10/10%10;\n            \n            //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等\n            if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;\n                //输出满足条件的数字就是水仙花数\n                System.out.println(i);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"4-2-循环结构：-while循环\"><a href=\"#4-2-循环结构：-while循环\" class=\"headerlink\" title=\"4.2 循环结构： while循环\"></a>4.2 循环结构： while循环</h2><p> <strong>while结构</strong></p>\n<p>while循环完整格式：</p>\n<pre><code class=\"java\">初始化语句;\nwhile (条件判断语句) &#123;\n    循环体语句;\n    条件控制语句;\n&#125;\n</code></pre>\n<p> while循环执行流程：</p>\n<ol>\n<li><p>执行初始化语句</p>\n</li>\n<li><p>执行条件判断语句，看其结果是true还是false<br>- 如果是false，循环结束<br>- 如果是true，继续执行</p>\n</li>\n<li><p>执行循环体语句</p>\n</li>\n<li><p>执行条件控制语句</p>\n</li>\n<li><p>回到②继续</p>\n</li>\n</ol>\n<p> 示例代码：</p>\n<pre><code class=\"java\">public class WhileDemo &#123;\n    public static void main(String[] args) &#123;\n        //需求：在控制台输出5次&quot;HelloWorld&quot;\n        //for循环实现\n        for(int i=1; i&lt;=5; i++) &#123;\n            System.out.println(&quot;HelloWorld&quot;);\n        &#125;\n        System.out.println(&quot;--------&quot;);\n        //while循环实现\n        int j = 1;\n        while(j&lt;=5) &#123;\n            System.out.println(&quot;HelloWorld&quot;);\n            j++;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>while循环练习-珠穆朗玛峰</strong></p>\n<p>需求：世界最高山峰是珠穆朗玛峰(8844.43米&#x3D;8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br>示例代码：</p>\n<pre><code class=\"java\">public class WhileTest &#123;\n    public static void main(String[] args) &#123;\n        //定义一个计数器，初始值为0\n        int count = 0;\n        //定义纸张厚度\n        double paper = 0.1;\n        //定义珠穆朗玛峰的高度\n        int zf = 8844430;\n        //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环\n        //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度\n        while(paper &lt;= zf) &#123;\n            //循环的执行过程中每次纸张折叠，纸张的厚度要加倍\n            paper *= 2;\n            //在循环中执行累加，对应折叠了多少次\n            count++;\n        &#125;\n        //打印计数器的值\n        System.out.println(&quot;需要折叠：&quot; + count + &quot;次&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"4-3-循环结构：do-while循环\"><a href=\"#4-3-循环结构：do-while循环\" class=\"headerlink\" title=\"4.3 循环结构：do-while循环\"></a>4.3 循环结构：do-while循环</h2><p><strong>do…while循环结构</strong></p>\n<p>完整格式：</p>\n<pre><code class=\"java\">初始化语句;\ndo &#123;\n    循环体语句;\n    条件控制语句;\n&#125;while(条件判断语句);\n</code></pre>\n<p>执行流程：</p>\n<ol>\n<li><p>执行初始化语句</p>\n</li>\n<li><p>执行循环体语句</p>\n</li>\n<li><p>执行条件控制语句</p>\n</li>\n<li><p>执行条件判断语句，看其结果是true还是false<br>- 如果是false，循环结束<br>- 如果是true，继续执行</p>\n</li>\n<li><p>回到②继续</p>\n</li>\n</ol>\n<p> 示例代码：</p>\n<pre><code class=\"java\">public class DoWhileDemo &#123;\n    public static void main(String[] args) &#123;\n        //需求：在控制台输出5次&quot;HelloWorld&quot;\n        //for循环实现\n        for(int i=1; i&lt;=5; i++) &#123;\n            System.out.println(&quot;HelloWorld&quot;);\n        &#125;\n        System.out.println(&quot;--------&quot;);\n        //do...while循环实现\n        int j = 1;\n        do &#123;\n            System.out.println(&quot;HelloWorld&quot;);\n            j++;\n        &#125;while(j&lt;=5);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"4-4-三种循环的区别\"><a href=\"#4-4-三种循环的区别\" class=\"headerlink\" title=\"4.4 三种循环的区别\"></a>4.4 三种循环的区别</h2><ul>\n<li>三种循环的区别<ul>\n<li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li>\n<li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li>\n</ul>\n</li>\n<li>for循环和while的区别<ul>\n<li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li>\n<li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li>\n</ul>\n</li>\n<li>死循环（无限循环）的三种格式<ol>\n<li>for( ; ; ) {}</li>\n<li>while(true){}</li>\n<li>do {} while(true);</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"4-5-跳转控制语句\"><a href=\"#4-5-跳转控制语句\" class=\"headerlink\" title=\"4.5  跳转控制语句\"></a>4.5  跳转控制语句</h2><ul>\n<li>跳转控制语句（break）<ul>\n<li>跳出循环，结束循环</li>\n</ul>\n</li>\n<li>跳转控制语句（continue）<ul>\n<li>跳过本次循环，继续下次循环</li>\n</ul>\n</li>\n<li>注意： continue只能在循环中进行使用！</li>\n</ul>\n<h2 id=\"4-5-循环嵌套\"><a href=\"#4-5-循环嵌套\" class=\"headerlink\" title=\"4.5 循环嵌套\"></a>4.5 循环嵌套</h2><p> 循环嵌套概述：在循环中，继续定义循环</p>\n<p>示例代码：</p>\n<pre><code class=\"java\">    public static void main(String[] args) &#123;\n        //外循环控制小时的范围，内循环控制分钟的范围\n        for (int hour = 0; hour &lt; 24; hour++) &#123;\n            for (int minute = 0; minute &lt; 60; minute++) &#123;\n                System.out.println(hour + &quot;时&quot; + minute + &quot;分&quot;);\n            &#125;\n            System.out.println(&quot;--------&quot;);\n        &#125;\n    &#125;\n</code></pre>\n<p>理解：</p>\n<p>整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的</p>\n<p>结论：</p>\n<p>外循环执行一次，内循环执行一圈</p>\n<hr>\n<h1 id=\"5、Random类\"><a href=\"#5、Random类\" class=\"headerlink\" title=\"5、Random类\"></a>5、Random类</h1><p><strong>Random产生随机数</strong></p>\n<p>概述：</p>\n<p>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能</p>\n<p>使用步骤：</p>\n<ol>\n<li><p>导入包</p>\n<p>import java.util.Random;</p>\n</li>\n<li><p>创建对象</p>\n<p>Random r &#x3D; new Random();</p>\n</li>\n<li><p>产生随机数</p>\n<p>int num &#x3D; r.nextInt(10);</p>\n</li>\n</ol>\n<p>解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p>\n<p>示例代码：</p>\n<pre><code class=\"java\">import java.util.Random;\npublic class RandomDemo &#123;\n    public static void main(String[] args) &#123;\n        //创建对象\n        Random r = new Random();\n        //用循环获取10个随机数\n        for(int i=0; i&lt;10; i++) &#123;\n            //获取随机数\n            int number = r.nextInt(10);\n            System.out.println(&quot;number:&quot; + number);\n        &#125;\n        //需求：获取一个1-100之间的随机数\n        int x = r.nextInt(100) + 1;\n        System.out.println(x);\n    &#125;\n&#125;\n</code></pre>\n<p> <strong>Random练习-猜数字（应用）</strong></p>\n<ul>\n<li><p>需求：</p>\n<p>程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？</p>\n<p>当猜错的时候根据不同情况给出相应的提示</p>\n<p>A. 如果猜的数字比真实数字大，提示你猜的数据大了</p>\n<p>B. 如果猜的数字比真实数字小，提示你猜的数据小了</p>\n<p>C. 如果猜的数字与真实数字相等，提示恭喜你猜中了</p>\n</li>\n<li><p>示例代码：</p>\n</li>\n</ul>\n<pre><code class=\"java\">import java.util.Random;\nimport java.util.Scanner;\n\npublic class RandomTest &#123;\n    public static void main(String[] args) &#123;\n        //要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100\n        Random r = new Random();\n        int number = r.nextInt(100) + 1;\n        \n        while(true) &#123;\n            //使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现\n            Scanner sc = new Scanner(System.in);\n            \n            System.out.println(&quot;请输入你要猜的数字：&quot;);\n            int guessNumber = sc.nextInt();\n            \n            //比较输入的数字和系统产生的数据，需要使用分支语句。\n             //这里使用if..else..if..格式，根据不同情况进行猜测结果显示\n            if(guessNumber &gt; number) &#123;\n                System.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;大了&quot;);\n            &#125; else if(guessNumber &lt; number) &#123;\n                System.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;小了&quot;);\n            &#125; else &#123;\n                System.out.println(&quot;恭喜你猜中了&quot;);\n                break;\n            &#125;\n        &#125;\n        \n    &#125;\n&#125;\n</code></pre>\n<hr>\n","feature":true,"text":"本篇文章将首先介绍顺序结构，即按照代码顺序依次执行的基本编程结构。接着，我们将深入探讨分支结构和循环结构，这两种结构为程序引入了灵活性和逻辑判断能力。最后，我们将重点介绍random类，它在Java中的应用十分广泛，用于生成随机数，实现各种随机算法和应用场景。...","permalink":"/post/Java程序设计 -- 程序流程控制（三）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1、流程控制语句</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2、顺序结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3、分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-if%E8%AF%AD%E5%8F%A5%E6%A0%BC%E5%BC%8F1\"><span class=\"toc-text\">3.1 if语句格式1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-if%E8%AF%AD%E5%8F%A5%E6%A0%BC%E5%BC%8F2\"><span class=\"toc-text\">3.2 if语句格式2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-if%E8%AF%AD%E5%8F%A5%E6%A0%BC%E5%BC%8F3\"><span class=\"toc-text\">3.3 if语句格式3</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.4 分支结构：switch语句</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4、循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-for%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.1 for循环结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%EF%BC%9A-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">4.2 循环结构： while循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%EF%BC%9Ado-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">4.3 循环结构：do-while循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E4%B8%89%E7%A7%8D%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.4 三种循环的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.5  跳转控制语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">4.5 循环嵌套</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81Random%E7%B1%BB\"><span class=\"toc-text\">5、Random类</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--数组","uid":"68e93659b0f140c2b8d62ff1a84702c9","slug":"Java程序设计 -- 数组（四）","date":"2022-03-18T15:10:42.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 数组（四）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本篇文章将将首先介绍数组的定义和基本特性，包括数组的初始化、存储多个元素等。接着，我们将详细讲解如何使用循环结构来遍历数组，从而实现对数组元素的逐一访问和处理。...","permalink":"/post/Java程序设计 -- 数组（四）","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--Java基础语法","uid":"fb9ec5e89e1cf92677e3b29d5efa3c22","slug":"Java程序设计 -- Java基础语法（二）","date":"2022-03-16T14:26:39.000Z","updated":"2025-07-14T15:12:20.459Z","comments":true,"path":"api/articles/Java程序设计 -- Java基础语法（二）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本文将讨论注释的作用和使用方法，以及如何正确编写清晰易懂的注释。同时，我们还将介绍字面量的概念，它是直接表示数据的常量，如字符串、数字等。此外，我们将详细介绍不同的数据类型，包括整型、浮点型、布尔型等，并讨论如何声明和初始化变量。...","permalink":"/post/Java程序设计 -- Java基础语法（二）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}