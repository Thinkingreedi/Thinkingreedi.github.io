{"title":"Java程序设计--面向对象基础（六）","uid":"43ba7a87029e6d08249bdb5a925cb91f","slug":"Java程序设计 -- 面向对象基础（六）","date":"2022-03-19T14:24:11.000Z","updated":"2025-07-14T15:12:20.462Z","comments":true,"path":"api/articles/Java程序设计 -- 面向对象基础（六）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、类、对象\"><a href=\"#1、类、对象\" class=\"headerlink\" title=\"1、类、对象\"></a>1、类、对象</h1><p><strong>对象:是真实存在的具体实例。</strong></p>\n<p><strong>类(设计图):是对象共同特征的描述。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20089fd2820045689ab2c3bc8586b008.png#pic_center\"></p>\n<p><strong>定义类</strong></p>\n<pre><code class=\"java\">public class 类名&#123;\n    1、成员变量(代表属性)\n    2、成员方法(代表行为)\n    3、构造器\n    4、代码块\n    5、内部类\n&#125;\n</code></pre>\n<p><strong>得到类的对象</strong></p>\n<pre><code class=\"java\">类名 对象名 = new 类名();\n\nCar c = new Car();\n</code></pre>\n<p><strong>使用对象</strong></p>\n<p>访问属性：&#x3D;&#x3D;对象名.成员变量&#x3D;&#x3D;</p>\n<p>访问行为：&#x3D;&#x3D;对象名.方法名(…)&#x3D;&#x3D;</p>\n<p><strong>定义类的注意事项</strong></p>\n<ul>\n<li>成员变量的完整定义格式是∶修饰符数据类型变量名称&#x3D;初始化值;一般无需指定初始化值，存在默认值。</li>\n<li>类名首字母建议大写，且有意义，满足“驼峰模式”。</li>\n<li><strong>一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名。实际开发中建议还是一个文件定义一个class类。</strong></li>\n</ul>\n<p><strong>&#x3D;&#x3D;对象的成员变量的默认规则&#x3D;&#x3D;</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">明细</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">byte、short、char、int、long</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">floa、double</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">基本类型</td>\n<td align=\"center\">boolean</td>\n<td align=\"center\">false</td>\n</tr>\n<tr>\n<td align=\"center\">引用类型</td>\n<td align=\"center\">类、接口、数组、String</td>\n<td align=\"center\">null</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"2、Java对象内存图\"><a href=\"#2、Java对象内存图\" class=\"headerlink\" title=\"2、Java对象内存图\"></a>2、Java对象内存图</h1><p>多个对象的内存图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/6375280f9ef4442daabf5690e7e2166c.png#pic_center\"></p>\n<ol>\n<li>&#x3D;&#x3D;对象放在<strong>堆内存</strong>中&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;对象变量在内存的栈内存中，其中存储的是对象在堆内存中的地址&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;成员变量的数据放在对象中，存在于堆内存中&#x3D;&#x3D;</li>\n</ol>\n<p>两个变量指向同一个对象内存图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/6ab53fb98e2e42ecb9adce70c607b261.png#pic_center\"><br><strong>垃圾回收</strong></p>\n<p>注意:当堆内存中的类对象或数组对象，没有被任何变量引用（指向）时，就会被判定为内存中的“垃圾”。</p>\n<p>Java存在自动垃圾回收器，会定期进行清理。</p>\n<hr>\n<h1 id=\"3、构造器\"><a href=\"#3、构造器\" class=\"headerlink\" title=\"3、构造器\"></a>3、构造器</h1><p>用于初始化一个类的对象，并返回对象的地址。</p>\n<p>构造器的定义格式</p>\n<pre><code class=\"csharp\">修饰符 类名(形参列表)&#123;\n    ...\n&#125;\n</code></pre>\n<p>构造器的分类</p>\n<ul>\n<li>**无参数构造器（默认存在的)**︰初始化的对象时，成员变量的数据均采用默认值。</li>\n<li><strong>有参数构造器</strong>：在初始化对象的时候，同时可以为对象进行赋值。</li>\n</ul>\n<pre><code class=\"java\">public class Car &#123;\n    String name;\n    double price;\n\n    /**\n      无参数构造器(默认存在的)\n     */\n    public Car()&#123;\n        System.out.println(&quot;无参数构造器被触发执行~~~&quot;);\n    &#125;\n\n    /**\n       有参数构造器\n     */\n    public Car(String n, double p)&#123;\n        System.out.println(&quot;有参数构造器被触发执行~~~&quot;);\n        name = n;\n        price = p;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class ConstructorDemo &#123;\n    public static void main(String[] args) &#123;\n        Car c = new Car();\n//        c.name = &quot;&quot;;\n//        c.price\n        System.out.println(c.name);//null\n        System.out.println(c.price);//0.0\n\n        Car c2 = new Car(&quot;奔驰GLC&quot;, 39.78);\n        System.out.println(c2.name);//奔驰GLC\n        System.out.println(c2.price);//39.78\n    &#125;\n&#125;\n</code></pre>\n<p><strong>注意事项</strong></p>\n<ul>\n<li>&#x3D;&#x3D;任何类定义出来，默认就自带了无参数构造器，写不写都有。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;一旦定义了有参数构造器，无参数构造器就没有了，此时就需要自己写一个无参数构造器了。&#x3D;&#x3D;</li>\n</ul>\n<hr>\n<h1 id=\"4、this关键字\"><a href=\"#4、this关键字\" class=\"headerlink\" title=\"4、this关键字\"></a>4、this关键字</h1><p>this关键字可以出现在成员方法、构造器中，&#x3D;&#x3D;代表当前对象的地址&#x3D;&#x3D;。</p>\n<p>作用:&#x3D;&#x3D;访问当前对象的成员变量、成员方法。&#x3D;&#x3D;</p>\n<pre><code class=\"java\">public class Car &#123;\n    String name;\n    double price;\n\n    public void goWith(String name)&#123;\n        System.out.println(this.name +&quot;正在和：&quot; + name +&quot;比赛！&quot;);\n    &#125;\n\n    /**\n      无参数构造器(默认存在的)\n     */\n    public Car()&#123;\n        System.out.println(&quot;无参数构造器被触发执行~~~&quot;);\n    &#125;\n\n    /**\n       有参数构造器\n     */\n    public Car(String name, double price)&#123;\n        System.out.println(&quot;有参数构造器被触发执行~~~&quot;);\n        System.out.println(this);\n        this.name = name;\n        this.price = price;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class ThisDemo &#123;\n    public static void main(String[] args) &#123;\n        Car c = new Car(&quot;宝马X3&quot;, 37.89);\n        System.out.println(c);\n        System.out.println(c.name);\n        System.out.println(c.price);\n\n        c.goWith(&quot;奔驰GLC&quot;);\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"5、面向对象特征–封装\"><a href=\"#5、面向对象特征–封装\" class=\"headerlink\" title=\"5、面向对象特征–封装\"></a>5、面向对象特征–封装</h1><p>面向对象的三大特征：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p>\n<p><strong>封装的实现步骤</strong></p>\n<ul>\n<li>&#x3D;&#x3D;一般对成员变量使用private(私有)关键字修饰进行隐藏，private修饰后该成员变量就只能在当前类中访问。&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;提供public修饰的公开的getter、setter方法暴露其取值和赋值。&#x3D;&#x3D;</li>\n</ul>\n<pre><code class=\"java\">public class Student &#123;\n    // private私有的成员变量，只能在本类访问。\n   private int age;\n\n   public int getAge()&#123;\n       return age;\n   &#125;\n\n   public void setAge(int age)&#123;\n        if(age &gt;= 0 &amp;&amp; age &lt;= 200)&#123;\n            this.age = age;\n        &#125;else &#123;\n            System.out.println(&quot;年龄数据有问题，应该不是人的年龄！&quot;);\n        &#125;\n   &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        Student s = new Student();\n        // s.age = -23;\n        s.setAge(-23);\n        System.out.println(s.getAge());\n    &#125;\n&#125;\n</code></pre>\n<p><strong>封装的好处小结</strong></p>\n<ol>\n<li>加强了程序代码的安全性。</li>\n<li>适当的封装可以提升开发效率，同时可以让程序更容易理解与维护。</li>\n</ol>\n<hr>\n<h1 id=\"6、标准JavaBean\"><a href=\"#6、标准JavaBean\" class=\"headerlink\" title=\"6、标准JavaBean\"></a>6、标准JavaBean</h1><p>也可以理解为实体类</p>\n<p><strong>标准JavaBean须满足如下要求:</strong></p>\n<ol>\n<li>成员变量使用private修饰。</li>\n<li>提供每一个成员变量对应的setXxx() &#x2F; getXxx()。</li>\n<li>必须提供一个无参构造器。</li>\n</ol>\n<pre><code class=\"java\">public class User &#123;\n    private double height;\n    private String name;\n    private double salary;\n    private String address;\n    private String phone;\n\n    public User() &#123;\n    &#125;\n\n    public User(double height, String name, double salary, String address, String phone) &#123;\n        this.height = height;\n        this.name = name;\n        this.salary = salary;\n        this.address = address;\n        this.phone = phone;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public double getSalary() &#123;\n        return salary;\n    &#125;\n\n    public void setSalary(double salary) &#123;\n        this.salary = salary;\n    &#125;\n\n    public String getAddress() &#123;\n        return address;\n    &#125;\n\n    public void setAddress(String address) &#123;\n        this.address = address;\n    &#125;\n\n    public String getPhone() &#123;\n        return phone;\n    &#125;\n\n    public void setPhone(String phone) &#123;\n        this.phone = phone;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        User user = new User();\n        user.setName(&quot;二狗&quot;);\n        user.setHeight(163);\n        user.setSalary(50000);\n        user.setAddress(&quot;中国&quot;);\n        user.setPhone(&quot;13141314520&quot;);\n//        String name = user.getName();\n//        System.out.println(name);\n        System.out.println(user.getName());\n        System.out.println(user.getHeight());\n        System.out.println(user.getSalary());\n        System.out.println(user.getAddress());\n        System.out.println(user.getPhone());\n        &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"8、成员变量、局部变量区别\"><a href=\"#8、成员变量、局部变量区别\" class=\"headerlink\" title=\"8、成员变量、局部变量区别\"></a>8、成员变量、局部变量区别</h1><table>\n<thead>\n<tr>\n<th align=\"center\">区别</th>\n<th align=\"center\">成员变量</th>\n<th align=\"center\">局部变量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">类中位置不同</td>\n<td align=\"center\">类中，方法外</td>\n<td align=\"center\">常见于方法中</td>\n</tr>\n<tr>\n<td align=\"center\">初始化值不同</td>\n<td align=\"center\">&#x3D;&#x3D;有默认初始化值&#x3D;&#x3D;</td>\n<td align=\"center\">&#x3D;&#x3D;没有，使用之前需要完成赋值&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td align=\"center\">内存位置不同</td>\n<td align=\"center\">&#x3D;&#x3D;堆内存&#x3D;&#x3D;</td>\n<td align=\"center\">&#x3D;&#x3D;栈内存&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td align=\"center\">生命周期不同</td>\n<td align=\"center\">随着对象的创建而存在，随着对象的消失而消失</td>\n<td align=\"center\">随着方法的调用而存在，随着方法的运行结束而消失</td>\n</tr>\n<tr>\n<td align=\"center\">作用域</td>\n<td align=\"center\"></td>\n<td align=\"center\">在所属的大括号中</td>\n</tr>\n</tbody></table>\n<hr>\n","feature":true,"text":"类是Java中的核心概念，用于创建对象。构造器是创建和初始化对象的特殊方法。this关键字表示当前对象的引用，用于访问成员变量和方法。Javabean是符合规范的Java类，用于数据封装和访问。它们在面向对象编程中扮演重要角色，提高代码的模块化和可维护性。...","permalink":"/post/Java程序设计 -- 面向对象基础（六）","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1、类、对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Java%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE\"><span class=\"toc-text\">2、Java对象内存图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">3、构造器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">4、this关键字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81%E2%80%93%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">5、面向对象特征–封装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%A0%87%E5%87%86JavaBean\"><span class=\"toc-text\">6、标准JavaBean</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">8、成员变量、局部变量区别</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--面向对象进阶(上)","uid":"85159c9648aa55d2d25caaf72205c399","slug":"Java程序设计 -- 面向对象进阶(上)（七）","date":"2022-03-20T01:40:03.000Z","updated":"2025-07-14T15:12:20.462Z","comments":true,"path":"api/articles/Java程序设计 -- 面向对象进阶(上)（七）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"在Java中，关键字static用于声明静态成员，这些成员属于类本身而不是对象。静态成员在类加载时被初始化，可以通过类名直接访问，无需创建对象。继承和静态成员的结合使用可以实现代码的重用和扩展。通过继承，子类可以继承父类的属性和方法。而通过静态成员，可以在不创建对象的情况下直接访问类的成员。...","permalink":"/post/Java程序设计 -- 面向对象进阶(上)（七）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--方法","uid":"e865c90ea90eb26ac07b0e4b3b7fa410","slug":"Java程序设计 -- 方法（五）","date":"2022-03-19T14:05:28.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 方法（五）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"本篇文章将首先介绍方法的定义和使用，包括如何声明、调用和返回数值。接着，我们将详细讨论参数传递的方式，包括数值传递和引用传递，帮助读者理解方法中数据的传递和处理过程。最后，我们将重点讨论方法重载，即在同一作用域内，允许存在多个同名方法，但它们的参数列表不同。...","permalink":"/post/Java程序设计 -- 方法（五）","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}