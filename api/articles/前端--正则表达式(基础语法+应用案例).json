{"title":"正则表达式(基础语法+应用案例)","uid":"cac67ac11c6c333971e5ff6f7b0aa46a","slug":"前端--正则表达式(基础语法+应用案例)","date":"2022-08-26T00:39:52.000Z","updated":"2025-07-14T15:12:20.466Z","comments":true,"path":"api/articles/前端--正则表达式(基础语法+应用案例).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/810429d76f664c5ea6d91f9d9b85786f.jpeg","content":"<h1 id=\"1、正则表达式简介\"><a href=\"#1、正则表达式简介\" class=\"headerlink\" title=\"1、正则表达式简介\"></a>1、正则表达式简介</h1><ul>\n<li><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。</p>\n</li>\n<li><p>典型的搜索和替换操作要求提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，也会变得很困难。</p>\n</li>\n<li><p>通过使用正则表达式能够：</p>\n<ul>\n<li><strong>测试字符串内的模式。（数据验证）</strong></li>\n<li><strong>替换文本。（文本操作）</strong></li>\n<li><strong>基于模式匹配从字符串中提取子字符串。（目标提取）</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2、正则表达式语法\"><a href=\"#2、正则表达式语法\" class=\"headerlink\" title=\"2、正则表达式语法\"></a>2、正则表达式语法</h1><ul>\n<li>JavaScript RegExp对象的创建：</li>\n</ul>\n<pre><code class=\"js\">var patt=new RegExp(pattern,modifiers);\n\nvar patt=/pattern/modifiers;\n//pattern（模式） 描述了表达式的模式\n//modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配\n</code></pre>\n<h2 id=\"2-1-修饰符\"><a href=\"#2-1-修饰符\" class=\"headerlink\" title=\"2.1 修饰符\"></a>2.1 修饰符</h2><ul>\n<li>修饰符用于执行区分大小写和全局匹配</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">修饰符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i</td>\n<td align=\"center\">执行对大小写不敏感的匹配  &#x2F;a&#x2F;i</td>\n</tr>\n<tr>\n<td align=\"center\">g</td>\n<td align=\"center\">执行全局匹配 &#x2F;a&#x2F;g</td>\n</tr>\n<tr>\n<td align=\"center\">m</td>\n<td align=\"center\">执行多行匹配 &#x2F;a&#x2F;m</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-2-方括号\"><a href=\"#2-2-方括号\" class=\"headerlink\" title=\"2.2 方括号\"></a>2.2 方括号</h2><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>表达式</strong></th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[abc]</td>\n<td align=\"center\">查找方括号之间(给定集合内)的任何字符</td>\n</tr>\n<tr>\n<td align=\"center\">[^abc]</td>\n<td align=\"center\">查找任何不在方括号之间(给定集合外)的字符</td>\n</tr>\n<tr>\n<td align=\"center\">[0-9]</td>\n<td align=\"center\">查找任何从 0 至 9 的数字</td>\n</tr>\n<tr>\n<td align=\"center\">[a-z]</td>\n<td align=\"center\">查找任何从小写 a 到小写 z 的字符</td>\n</tr>\n<tr>\n<td align=\"center\">[A-Z]</td>\n<td align=\"center\">查找任何从大写 A 到大写 Z 的字符</td>\n</tr>\n<tr>\n<td align=\"center\">(a|b|c）</td>\n<td align=\"center\">查找任何指定的选项</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-3-元字符\"><a href=\"#2-3-元字符\" class=\"headerlink\" title=\"2.3 元字符\"></a>2.3 元字符</h2><ul>\n<li>元字符（Metacharacter）是拥有特殊含义的字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.</td>\n<td align=\"center\">查找单个字符，除了换行和行结束符</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">查找数字、字母及下划线</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"center\">查找非单词字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">查找数字</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"center\">查找非数字字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\s</td>\n<td align=\"center\">查找空白字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"center\">查找非空白字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">匹配单词边界</td>\n</tr>\n<tr>\n<td align=\"center\">\\B</td>\n<td align=\"center\">匹配非单词边界</td>\n</tr>\n<tr>\n<td align=\"center\">\\0</td>\n<td align=\"center\">查找 NULL 字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">查找换行符</td>\n</tr>\n<tr>\n<td align=\"center\">\\f</td>\n<td align=\"center\">查找换页符</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">查找回车符</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">查找制表符</td>\n</tr>\n<tr>\n<td align=\"center\">\\v</td>\n<td align=\"center\">查找垂直制表符</td>\n</tr>\n<tr>\n<td align=\"center\">\\xxx</td>\n<td align=\"center\">查找以八进制数 xxx 规定的字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\xdd</td>\n<td align=\"center\">查找以十六进制数 dd 规定的字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\uxxxx</td>\n<td align=\"center\">查找以十六进制数 xxxx 规定的 Unicode 字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-4-量词\"><a href=\"#2-4-量词\" class=\"headerlink\" title=\"2.4 量词\"></a>2.4 量词</h2><table>\n<thead>\n<tr>\n<th align=\"center\">量词</th>\n<th align=\"center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">n+</td>\n<td align=\"center\">匹配任何包含至少一个 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">n*</td>\n<td align=\"center\">匹配任何包含零个或多个 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">n?</td>\n<td align=\"center\">匹配任何包含零个或一个 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">n{X}</td>\n<td align=\"center\">匹配包含 X 个 n 的序列的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">n{X,}</td>\n<td align=\"center\">X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配</td>\n</tr>\n<tr>\n<td align=\"center\">n{X,Y}</td>\n<td align=\"center\">X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配</td>\n</tr>\n<tr>\n<td align=\"center\">n$</td>\n<td align=\"center\">匹配任何结尾为 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">^n</td>\n<td align=\"center\">匹配任何开头为 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">?&#x3D;n</td>\n<td align=\"center\">匹配任何其后紧接指定字符串 n 的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">?!n</td>\n<td align=\"center\">匹配任何其后没有紧接指定字符串 n 的字符串</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-5-运算符优先级\"><a href=\"#2-5-运算符优先级\" class=\"headerlink\" title=\"2.5 运算符优先级\"></a>2.5 运算符优先级</h2><ul>\n<li>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。相同优先级的从左到右进行运算，不同优先级的运算先高后低。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\</td>\n<td align=\"center\">转义符</td>\n</tr>\n<tr>\n<td align=\"center\">(), (?:), (?&#x3D;), []</td>\n<td align=\"center\">圆括号和方括号</td>\n</tr>\n<tr>\n<td align=\"center\">*, +, ?, {n}, {n,}, {n,m}</td>\n<td align=\"center\">限定符</td>\n</tr>\n<tr>\n<td align=\"center\">^, $, \\任何元字符、任何字符</td>\n<td align=\"center\">定位点和序列</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">替换，”或”操作</td>\n</tr>\n</tbody></table>\n<h1 id=\"3、正则表达式API\"><a href=\"#3、正则表达式API\" class=\"headerlink\" title=\"3、正则表达式API\"></a>3、正则表达式API</h1><h2 id=\"3-1-RegExp对象属性\"><a href=\"#3-1-RegExp对象属性\" class=\"headerlink\" title=\"3.1 RegExp对象属性\"></a>3.1 RegExp对象属性</h2><p><strong>global</strong></p>\n<ul>\n<li>判断是否设置了 “g” 修饰符，如果 g 标志被设置，则该属性为 true，否则为 false</li>\n<li><code>RegExpObject.global</code></li>\n</ul>\n<p><strong>ignoreCase</strong></p>\n<ul>\n<li>判断是否设置了 “i” 修饰符，如果设置了 “i” 标志，则返回 true，否则返回 false</li>\n<li><code>RegExpObject.ignoreCase</code></li>\n</ul>\n<p><strong>multiline</strong></p>\n<ul>\n<li>判断是否设置了 “m” 修饰符，如果 m 标志被设置，则该属性为 true，否则为 false</li>\n<li><code>RegExpObject.multiline</code></li>\n</ul>\n<p><strong>source</strong></p>\n<ul>\n<li>返回正则表达式的匹配模式</li>\n<li><code>RegExpObject.source</code></li>\n</ul>\n<p><strong>lastIndex</strong></p>\n<ul>\n<li>用于规定下次匹配的起始位置，该属性只有设置标志 g 才能使用</li>\n<li><code>RegExpObject.lastIndex</code></li>\n</ul>\n<h2 id=\"3-2-RegExp对象方法\"><a href=\"#3-2-RegExp对象方法\" class=\"headerlink\" title=\"3.2 RegExp对象方法\"></a>3.2 RegExp对象方法</h2><p><strong>exec</strong></p>\n<ul>\n<li>检索字符串中指定的值。返回找到的值，并确定其位置。</li>\n<li><code>RegExpObject.exec(string)</code></li>\n</ul>\n<p><strong>test</strong></p>\n<ul>\n<li><p>检索字符串中指定的值。返回 true 或 false。</p>\n</li>\n<li><p><code>RegExpObject.test(string)</code></p>\n</li>\n</ul>\n<p><strong>toString</strong></p>\n<ul>\n<li>返回正则表达式的字符串。</li>\n<li><code>RegExpObject.toString()</code></li>\n</ul>\n<h2 id=\"3-3-支持正则表达式的String对象方法\"><a href=\"#3-3-支持正则表达式的String对象方法\" class=\"headerlink\" title=\"3.3 支持正则表达式的String对象方法\"></a>3.3 支持正则表达式的String对象方法</h2><p><strong>search</strong></p>\n<ul>\n<li><p>检索与正则表达式相匹配的值,找到返回起始位置，如果没有找到任何匹配的子串，则返回 -1</p>\n</li>\n<li><p><code>string.search(searchvalue)</code></p>\n</li>\n</ul>\n<p><strong>match</strong></p>\n<ul>\n<li>找到一个或多个正则表达式的匹配,如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息</li>\n<li><code>string.match(regexp)</code></li>\n</ul>\n<p><strong>replace</strong></p>\n<ul>\n<li><p>替换与正则表达式匹配的子串</p>\n</li>\n<li><p><code>string.replace(searchvalue,newvalue)</code></p>\n</li>\n</ul>\n<p><strong>split</strong></p>\n<ul>\n<li>把字符串分割为字符串数组</li>\n<li><code>string.split(separator,limit)</code></li>\n</ul>\n<h1 id=\"4、正则表达式应用\"><a href=\"#4、正则表达式应用\" class=\"headerlink\" title=\"4、正则表达式应用\"></a>4、正则表达式应用</h1><ul>\n<li><p>简单表达式   <code>/a/</code>  ,匹配a</p>\n</li>\n<li><p>字符匹配  <code>/a.c</code>  ,匹配 aac、abc、acc、adc 等等</p>\n</li>\n<li><p>中文  <code>/[\\u4E00-\\u9FA5]/</code></p>\n</li>\n<li><p>用户名 <code>/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</code>  4到16位字母、数字、下划线和中划线组成</p>\n</li>\n<li><p>车牌号   <code>/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</code></p>\n</li>\n<li><p>微信号  <code>/^[a-zA-Z][-_a-zA-Z0-9]&#123;5,19&#125;$/</code>  6至20位，以字母开头，字母，数字，减号，下划线</p>\n</li>\n<li><p>QQ号  <code>/^[1-9][0-9]&#123;4,10&#125;$/</code> 5至11位数字组成</p>\n</li>\n<li><p>16进制颜色    <code>/^#([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</code>  以#开始 ，6或3个字符（A-F、a-f、0-9）结尾</p>\n</li>\n<li><p>电话号码 <code>/^1(3\\d|4[5-9]|5[0-35-9]|6[2567]|7[0-8]|8\\d|9[0-35-9])\\d&#123;8&#125;$/ </code>    以1开头，3可跟任一数字（\\d），4可跟5-9，5可跟0-3或5-9 ，6后2567其中一个，7后是0-8,8后任一数字，9后是0-3或3-5，其余8位是任意数字（\\d{8}）</p>\n</li>\n<li><p>身份证号  <code> /^[1-9]\\d&#123;5&#125;(19|20|21)\\d&#123;2&#125;(0[1-9]|10|11|12)(0[1-9]|[1-2]\\d|30|31)\\d&#123;3&#125;[\\dX]$/</code>     第一位在0-9区间，后面是5位任意数字，4位年份（19、20、21开头，后两位任意），两位代表月份（0开头的1-9或者是10、11、12），两位日期（01-31），三位顺序码，最后一位是校验码，可数字可X</p>\n</li>\n<li><p>网址   <code>/^((https?):)?\\/\\/([^?:/]+)(:(\\d+))?(\\/[^?]*)?(\\?(.*))?/</code></p>\n</li>\n<li><p>邮箱   <code>/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</code>   </p>\n</li>\n<li><p>最后推荐一下一个网站 – 正则表达式在线测试网站： <a href=\"https://c.runoob.com/front-end/854/\">正则表达式在线测试</a> ，在这里可以书写正则表达式并在线测试，还有常见应用案例提示以及可视化图等相关功能！</p>\n</li>\n</ul>\n","feature":true,"text":"本文对正则表达式进行了讲解，设计正则表达式的简介，语法，API，应用等。重点阐述了JavaScript中的正则表达式对象及其方法，在文章最后列举了常见的正则表达式语句，希望能给大家带来帮助！...","permalink":"/post/前端--正则表达式(基础语法+应用案例)","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"正则表达式","slug":"正则表达式","count":1,"path":"api/tags/正则表达式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、正则表达式简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2、正则表达式语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">2.1 修饰符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%96%B9%E6%8B%AC%E5%8F%B7\"><span class=\"toc-text\">2.2 方括号</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">2.3 元字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E9%87%8F%E8%AF%8D\"><span class=\"toc-text\">2.4 量词</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">2.5 运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FAPI\"><span class=\"toc-text\">3、正则表达式API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-RegExp%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3.1 RegExp对象属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-RegExp%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.2 RegExp对象方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E6%94%AF%E6%8C%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84String%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.3 支持正则表达式的String对象方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">4、正则表达式应用</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"动态规划--01背包问题","uid":"47cf0316f492004489404d39cb61c662","slug":"数据结构--动态规划 -- 01背包问题","date":"2022-10-07T01:48:46.000Z","updated":"2025-07-14T15:12:20.468Z","comments":true,"path":"api/articles/数据结构--动态规划 -- 01背包问题.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/direct/e8a0f072cdd64daf8e4ad0b5f663271b.png","text":"本文对动态规划的01背包问题进行了解释和阐述。...","permalink":"/post/数据结构--动态规划 -- 01背包问题","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"基于hexo框架快速从0到1搭建个人博客 -- 文章发布","uid":"cafb2f7f7dd2184f94595ef0ba9d8b6c","slug":"基于hexo框架快速从0到1搭建个人博客----文章一键发布","date":"2022-08-20T02:51:44.000Z","updated":"2025-07-14T15:12:20.467Z","comments":true,"path":"api/articles/基于hexo框架快速从0到1搭建个人博客----文章一键发布.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/d3b3c1e3e3494db9b5870742534e0919.png","text":"在前面的文章中，已经实现了文章的撰写和图片的处理，接踵而至的就是文章的发表，在这里还需要向之前一样复杂吗，所以在这里尝试去实现文章的一键发布。...","permalink":"/post/基于hexo框架快速从0到1搭建个人博客----文章一键发布","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"博客","slug":"博客","count":6,"path":"api/categories/博客.json"}],"tags":[{"name":"hexo","slug":"hexo","count":5,"path":"api/tags/hexo.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}