{"title":"Java程序设计--常用API(上)","uid":"b96805334df48e1df4b0636b2d6744aa","slug":"Java程序设计 -- 常用API(上)（九）","date":"2022-03-21T14:27:13.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 常用API(上)（九）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、String\"><a href=\"#1、String\" class=\"headerlink\" title=\"1、String\"></a>1、String</h1><h2 id=\"1-1-String类概述\"><a href=\"#1-1-String类概述\" class=\"headerlink\" title=\"1.1 String类概述\"></a>1.1 String类概述</h2><p>java.lang.String 类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串。</p>\n<p>Java程序中的所有字符串文字（例如“abc”）都为此类的对象。</p>\n<p>&#x3D;&#x3D;<strong>String其实常被称为不可变字符串类型</strong>，它的对象在创建后不能被更改。&#x3D;&#x3D;</p>\n<p>字符串对象以 <strong>“”</strong> 方式给出的字符串对象，在字符串常量池中存储。</p>\n<h2 id=\"1-2-String创建对象\"><a href=\"#1-2-String创建对象\" class=\"headerlink\" title=\"1.2 String创建对象\"></a>1.2 String创建对象</h2><ol>\n<li>直接使用“”定义。（推荐方式)</li>\n<li>通过String类的构造器创建对象。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">构造器</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public String()</td>\n<td align=\"center\">创建一个空白字符串对象，不含有任何内容</td>\n</tr>\n<tr>\n<td align=\"center\">public String(String original)</td>\n<td align=\"center\">根据传入的字符串对象，来创建字符串对象</td>\n</tr>\n<tr>\n<td align=\"center\">public String(char[] chs)</td>\n<td align=\"center\">根据字符数组的内容，来创建字符串对象</td>\n</tr>\n<tr>\n<td align=\"center\">public String(byte[] chs)</td>\n<td align=\"center\">根据字节数组的内容，来创建字符串对象</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">public class StringDemo &#123;\n    public static void main(String[] args) &#123;\n        // 方式一：直接使用双引号得到字符串对象\n        String name = &quot;我爱你中国&quot;;\n        System.out.println(name);\n\n        // 方式二：\n        // 1、public String(): 创建一个空白字符串对象，不含有任何内容 （几乎不用）\n        String s1 = new String(); // s1 = &quot;&quot;\n        System.out.println(s1);\n\n        // 2、public String(String): 根据传入的字符串内容，来创建字符串对象（几乎不用）\n        String s2 = new String(&quot;我是中国人&quot;);\n        System.out.println(s2);\n\n        // 3、public String(char[] c): 根据字符数组的内容，来创建字符串对象\n        char[] chars = &#123;&#39;a&#39; , &#39;b&#39; , &#39;中&#39;, &#39;国&#39;&#125;;\n        String s3 = new String(chars);\n        System.out.println(s3);\n\n        // 4、public String(byte[] b):  根据字节数组的内容，来创建字符串对象\n        byte[] bytes = &#123;97, 98, 99, 65, 66, 67&#125;;\n        String s4 = new String(bytes);\n        System.out.println(s4);\n\n        System.out.println(&quot;---------------------------------------&quot;);\n        String ss1 = &quot;abc&quot;;//内容\n        String ss2 = &quot;abc&quot;;\n        System.out.println(ss1 == ss2);\n\n        char[] chars1 = &#123;&#39;a&#39; , &#39;b&#39; , &#39;c&#39;&#125;;\n        String ss3 = new String(chars1);//地址\n        String ss4 = new String(chars1);\n        System.out.println(ss3 == ss4);\n    &#125;\n&#125;\n</code></pre>\n<p>&#x3D;&#x3D;以“”方式给出的字符串对象，在字符串常量池中存储，而且相同内容只会在其中存储一份。&#x3D;&#x3D;</p>\n<p><img src=\"https://img-blog.csdnimg.cn/6758db4fadf049dfae4d430b31905bf7.png#pic_center\"></p>\n<p>&#x3D;&#x3D;通过构造器new对象，每new一次都会产生一个新对象，放在堆内存中。&#x3D;&#x3D;</p>\n<p><img src=\"https://img-blog.csdnimg.cn/1425c7827c184a119257fec0777cbd97.png#pic_center\"></p>\n<h2 id=\"1-3-常用API\"><a href=\"#1-3-常用API\" class=\"headerlink\" title=\"1.3 常用API\"></a>1.3 常用API</h2><p><strong>字符串内容比较</strong></p>\n<p>推荐使用String类提供的“equals”比较:只关心内容一样即可</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public boolean equals (Object anObject)</td>\n<td align=\"center\">将此字符串与指定对象进行比较。&#x3D;&#x3D;只关心字符内容是否一致!&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td align=\"center\">public boolean equalsIgnoreCase (string anotherString)</td>\n<td align=\"center\">将此字符串与指定对象进行比较，&#x3D;&#x3D;忽略大小写比较字符串。只关心字符内容是否一致!&#x3D;&#x3D;</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class StringAPIEqualsDemo &#123;\n    public static void main(String[] args) &#123;\n        // 1、正确登录名和密码\n        String okName = &quot;admin&quot;;\n        String okPassword = &quot;123456&quot;;\n\n        // 2、请您输入登录名称和密码\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;登录名称：&quot;);\n        String name = sc.next();\n        System.out.println(&quot;登录密码：&quot;);\n        String password = sc.next();\n\n        // 3、判断用户输入的登录名称和密码与正确的内容是否相等。\n        if(okName.equals(name ) &amp;&amp; okPassword.equals(password))&#123;\n            System.out.println(&quot;登录成功！&quot;);\n        &#125;else &#123;\n            System.out.println(&quot;用户名或者密码错误了！&quot;);\n        &#125;\n\n        // 4、忽略大小写比较内容的Api: 一般用于比较验证码这样的业务逻辑\n        String sysCode = &quot;23AdFh&quot;;\n        String code1 = &quot;23aDfH&quot;;\n        System.out.println(sysCode.equals(code1)); // false\n        System.out.println(sysCode.equalsIgnoreCase(code1)); // true\n    &#125;\n&#125;\n</code></pre>\n<p><strong>String类常用API</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public int length()</td>\n<td align=\"center\">返回此字符串的长度</td>\n</tr>\n<tr>\n<td align=\"center\">public char charAt(int index)</td>\n<td align=\"center\">获取某个索引位置处的字符</td>\n</tr>\n<tr>\n<td align=\"center\">public char[] toCharArray() :</td>\n<td align=\"center\">将当前字符串转换成字符数组返回</td>\n</tr>\n<tr>\n<td align=\"center\">public sString substring(int beginIndex， int endIndex)</td>\n<td align=\"center\">根据开始和结束索引进行截取，得到新的字符串（包前不包后)</td>\n</tr>\n<tr>\n<td align=\"center\">public string substring(int beginIndex)</td>\n<td align=\"center\">从传入的索引处截取，截取到末尾，得到新的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">public string replace(CharSequence target,CharSequence replacement)</td>\n<td align=\"center\">使用新值，将字符串中的旧值替换，得到新的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">public string[ ] split(String regex)</td>\n<td align=\"center\">根据传入的规则切割字符串，得到字符串数组返回</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">/**\n    String常用的其他API。\n */\npublic class StringAPIOtherDemo&#123;\n    public static void main(String[] args) &#123;\n        // 1、public int length(): 获取字符串的长度\n        String name = &quot;我爱你中国love&quot;;\n        System.out.println(name.length());\n\n        // 2、public char charAt(int index): 获取某个索引位置处的字符\n        char c = name.charAt(1);\n        System.out.println(c);\n\n        System.out.println(&quot;------------遍历字符串中的每个字符--------------&quot;);\n        for (int i = 0; i &lt; name.length(); i++) &#123;\n            char ch = name.charAt(i);\n            System.out.println(ch);\n        &#125;\n        // 3、public char[] toCharArray()：: 把字符串转换成字符数组\n        char[] chars = name.toCharArray();\n        for (int i = 0; i &lt; chars.length; i++) &#123;\n            char ch = chars[i];\n            System.out.println(ch);\n        &#125;\n\n        // 4、public String substring(int beginIndex, int endIndex) ：截取内容，(包前不包后的)\n        String name2 = &quot;Java是最厉害的编程语言！&quot;;\n        //              01234567   89\n        String rs = name2.substring(0, 9);\n        System.out.println(rs);\n        String rs1 = name2.substring(4, 9);\n        System.out.println(rs1);\n\n        // 5、public String substring(int beginIndex):从当前索引一直截取到末尾\n        String rs2 = name2.substring(4);\n        System.out.println(rs2);\n\n        // 6、public String replace(CharSequence target, CharSequence replacement)\n        String name3 = &quot;金三胖是最厉害的80后，金三胖棒棒的！我好爱金三胖&quot;;\n        String rs3 = name3.replace(&quot;金三胖&quot;, &quot;***&quot;);\n        System.out.println(rs3);\n\n        // 7、public boolean contains(CharSequence s)\n        System.out.println(name3.contains(&quot;金三胖&quot;)); // true\n        System.out.println(name3.contains(&quot;金二胖&quot;)); // false\n\n        // 8、public boolean startsWith(String prefix)\n        System.out.println(name3.startsWith(&quot;金三胖&quot;));\n        System.out.println(name3.startsWith(&quot;金三胖是最厉害的&quot;));\n        System.out.println(name3.startsWith(&quot;金三胖是最厉害的2&quot;));\n\n        // 9、public String[] split(String s): 按照某个内容把字符串分割成字符串数组返回。\n        String name4 = &quot;王宝强,贾乃亮,陈羽凡&quot;;\n        String[] names = name4.split(&quot;,&quot;);\n        for (int i = 0; i &lt; names.length; i++) &#123;\n            System.out.println(&quot;选择了：&quot; + names[i]);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"2、Arraylist\"><a href=\"#2、Arraylist\" class=\"headerlink\" title=\"2、Arraylist\"></a>2、Arraylist</h1><h2 id=\"2-1-Arraylist概述\"><a href=\"#2-1-Arraylist概述\" class=\"headerlink\" title=\"2.1 Arraylist概述\"></a>2.1 Arraylist概述</h2><p><strong>集合是与数组类似，也是一种容器，用于装数据的。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/09c0535fd80943388c3ec20726e3d1d4.png#pic_center\"></p>\n<p><strong>&#x3D;&#x3D;数组定义完成并启动后，类型确定、长度固定。&#x3D;&#x3D;</strong></p>\n<p>在个数不能确定，且要进行增删数据操作的时候，数组是不太合适的</p>\n<p><img src=\"https://img-blog.csdnimg.cn/cfba9253358249ad83fcd596a3f16934.png#pic_center\"></p>\n<ol>\n<li>集合的大小不固定，启动后可以动态变化，类型也可以选择不固定。</li>\n<li>集合非常适合做元素个数不确定，且要进行增删操作的业务场景。</li>\n<li>集合的提供了许多丰富、好用的功能，而数组的功能很单一。</li>\n</ol>\n<p>ArrayList是集合中的一种，它支持索引。</p>\n<p><strong>ArrayList集合的对象获取</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">构造器</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public ArrayList()</td>\n<td align=\"center\">创建一个空的集合对象</td>\n</tr>\n</tbody></table>\n<p><strong>ArrayList集合添加元素的方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public boolean add(E e)</td>\n<td align=\"center\">将指定的元素追加到此集合的末尾</td>\n</tr>\n<tr>\n<td align=\"center\">public void add(int index,E element)</td>\n<td align=\"center\">在此集合中的指定位置插入指定的元素</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">/**\n      创建ArrayList对象，代表集合容器，往里面添加元素。\n */\npublic class ArrayListDemo1 &#123;\n    public static void main(String[] args) &#123;\n        // 1、创建ArrayList集合的对象\n        ArrayList list = new ArrayList();\n\n        // 2、添加数据\n        list.add(&quot;Java&quot;);\n        list.add(&quot;Java&quot;);\n        list.add(&quot;MySQL&quot;);\n        list.add(&quot;程序员&quot;);\n        list.add(23);\n        list.add(23.5);\n        list.add(false);\n        System.out.println(list.add(&#39;中&#39;));\n        System.out.println(list);\n\n        // 3、给指定索引位置插入元素\n        list.add(1, &quot;赵敏&quot;);\n        System.out.println(list);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-2-Arraylist与泛型\"><a href=\"#2-2-Arraylist与泛型\" class=\"headerlink\" title=\"2.2 Arraylist与泛型\"></a>2.2 Arraylist与泛型</h2><p>&#x3D;&#x3D;ArrayList<E>︰其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种数据类型&#x3D;&#x3D;</p>\n<p>举例:</p>\n<ul>\n<li>ArrayList &lt; String &gt; :此集合只能操作字符串类型的元素。</li>\n<li>ArrayList &lt; lnteger &gt;:此集合只能操作整数类型的元素。</li>\n</ul>\n<p><strong>注意:集合中只能存储引用类型，不支持基本数据类型。</strong></p>\n<pre><code class=\"java\">/**\n      能够使用泛型约束ArrayList集合操作的数据类型\n */\npublic class ArrayListDemo2 &#123;\n    public static void main(String[] args) &#123;\n        // ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); // JDK 1.7开始，泛型后面的类型申明可以不写\n        list.add(&quot;Java&quot;);\n        list.add(&quot;MySQL&quot;);\n//        list.add(23);\n//        list.add(23.5);\n\n        ArrayList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\n        list2.add(23);\n        list2.add(100);\n        // list2.add(&quot;Java&quot;);\n\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-3-Arraylist常用API\"><a href=\"#2-3-Arraylist常用API\" class=\"headerlink\" title=\"2.3 Arraylist常用API\"></a>2.3 Arraylist常用API</h2><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean   remove(Object o)</td>\n<td>删除指定的元素，返回删除是否成功</td>\n</tr>\n<tr>\n<td>public E   remove(int   index)</td>\n<td>删除指定索引处的元素，返回被删除的元素</td>\n</tr>\n<tr>\n<td>public E   set(int index,E   element)</td>\n<td>修改指定索引处的元素，返回被修改的元素</td>\n</tr>\n<tr>\n<td>public E   get(int   index)</td>\n<td>返回指定索引处的元素</td>\n</tr>\n<tr>\n<td>public int   size()</td>\n<td>返回集合中的元素的个数</td>\n</tr>\n<tr>\n<td>public boolean   add(E e)</td>\n<td>将指定的元素追加到此集合的末尾</td>\n</tr>\n<tr>\n<td>public void   add(int index,E   element)</td>\n<td>在此集合中的指定位置插入指定的元素</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">/**\n    目标：掌握ArrayList集合的常用API\n */\npublic class ArrayListDemo3 &#123;\n    public static void main(String[] args) &#123;\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(&quot;Java&quot;);\n        list.add(&quot;Java&quot;);\n        list.add(&quot;MySQL&quot;);\n        list.add(&quot;MyBatis&quot;);\n        list.add(&quot;HTML&quot;);\n\n        // 1、public E get(int index)：获取某个索引位置处的元素值\n        String e = list.get(3);\n        System.out.println(e);\n\n        // 2、public int size()：获取集合的大小（元素个数）\n        System.out.println(list.size());\n\n        // 3、完成集合的遍历\n        for (int i = 0; i &lt; list.size(); i++) &#123;\n            System.out.println(list.get(i));\n        &#125;\n\n        // 4、public E remove(int index)：删除某个索引位置处的元素值,并返回被删除的元素值\n        System.out.println(list); // [Java, Java, MySQL, MyBatis, HTML]\n        String e2 = list.remove(2);\n        System.out.println(e2);\n        System.out.println(list);\n\n        // 5、public boolean remove(Object o):直接删除元素值，删除成功返回true，删除失败返回false\n        System.out.println(list.remove(&quot;MyBatis&quot;));\n        System.out.println(list);\n\n        ArrayList&lt;String&gt; list1 = new ArrayList&lt;&gt;();\n        list1.add(&quot;Java&quot;);\n        list1.add(&quot;王宝强&quot;);\n        list1.add(&quot;Java&quot;);\n        list1.add(&quot;MySQL&quot;);\n        System.out.println(list1);\n        // 只会删除第一次出现的这个元素值，后面的不删除\n        System.out.println(list1.remove(&quot;Java&quot;));\n        System.out.println(list1);\n\n\n        // 6、public E set(int index,E element)：修改某个索引位置处的元素值。\n        String e3 = list1.set(0 , &quot;贾乃亮&quot;);\n        System.out.println(e3);\n        System.out.println(list1);\n\n\n    &#125;\n&#125;\n</code></pre>\n<p><strong>案例：</strong></p>\n<p>遍历并删除元素值</p>\n<p>需求:某个班级的考试在系统上进行，成绩大致为:98，77，66，89，79，50，100<br>现在需要先把成绩低于80分以下的数据去掉。</p>\n<pre><code class=\"java\">/**\n   案例：从集合中遍历元素且删除。\n */\npublic class ArrayListTest&#123;\n    public static void main(String[] args) &#123;\n        // 1、创建集合对象：存入学生成绩(98,77,66,89,79,50,100)\n        ArrayList&lt;Integer&gt; scores = new ArrayList&lt;&gt;();\n        scores.add(98);\n        scores.add(77);\n        scores.add(66);\n        scores.add(89);\n        scores.add(79);\n        scores.add(50);\n        scores.add(100);\n        System.out.println(scores);\n\n        for (int i = scores.size() - 1; i &gt;= 0 ; i--) &#123;\n            int score = scores.get(i);\n            // 2、判断这个分数是否低于80分，如果低于则从集合中删除它\n            if(score &lt; 80)&#123;\n                scores.remove(i);\n            &#125;\n        &#125;\n        System.out.println(scores);\n    &#125;\n&#125;\n</code></pre>\n<p>存储自定义类型</p>\n<p>需求:某影院系统需要在后台存储上述三部电影，然后依次展示出来。</p>\n<pre><code class=\"java\">public class Movie &#123;\n    private String name;\n    private double score;\n    private String actor;\n\n    public Movie() &#123;\n    &#125;\n\n    public Movie(String name, double score, String actor) &#123;\n        this.name = name;\n        this.score = score;\n        this.actor = actor;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public double getScore() &#123;\n        return score;\n    &#125;\n\n    public void setScore(double score) &#123;\n        this.score = score;\n    &#125;\n\n    public String getActor() &#123;\n        return actor;\n    &#125;\n\n    public void setActor(String actor) &#123;\n        this.actor = actor;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">import java.util.ArrayList;\n\n/**\n    案例：集合存储自定义元素并遍历。\n    需求：定义电影类（名称，分值，演员），创建3个电影对象，代表三部影片，存入集合中并遍历。\n    《肖生克的救赎》, 9.7 , 罗宾斯\n    《霸王别姬》, 9.6 , 张国荣、张丰毅\n    《阿甘正传》, 9.5 , 汤姆.汉克斯\n */\npublic class ArrayListTest5&#123;\n    public static void main(String[] args) &#123;\n        // 1、定义一个电影类：Movie\n        // 2、定义一个ArrayList集合存储这些影片对象。\n        ArrayList&lt;Movie&gt; movies = new ArrayList&lt;&gt;();\n\n        // 3、创建影片对象封装电影数据，把对象加入到集合中去。\n//        Movie m1 = new Movie(&quot;《肖生克的救赎》&quot;, 9.7 , &quot;罗宾斯&quot;);\n//        movies.add(m1);\n        movies.add(new Movie(&quot;《肖生克的救赎》&quot;, 9.7 , &quot;罗宾斯&quot;));\n        movies.add(new Movie(&quot;《霸王别姬》&quot;, 9.6 , &quot;张国荣、张丰毅&quot;));\n        movies.add(new Movie(&quot;《阿甘正传》&quot;, 9.5 , &quot;汤姆.汉克斯&quot;));\n\n        System.out.println(movies);\n\n        // 4、遍历集合中的影片对象并展示出来\n        for (int i = 0; i &lt; movies.size(); i++) &#123;\n            Movie movie = movies.get(i);\n            System.out.println(&quot;片名：&quot; + movie.getName());\n            System.out.println(&quot;评分：&quot; + movie.getScore());\n            System.out.println(&quot;主演：&quot; + movie.getActor());\n        &#125;\n    &#125;\n&#125;\n\n\n</code></pre>\n<p>元素搜索</p>\n<p>需求:后台程序需要存储如上学生信息并展示，然后要提供按照学号搜索学生信息的功能。</p>\n<pre><code class=\"java\">public class Student &#123;\n    private String studyId;\n    private String name;\n    private int age;\n    private String className;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String studyId, String name, int age, String className) &#123;\n        this.studyId = studyId;\n        this.name = name;\n        this.age = age;\n        this.className = className;\n    &#125;\n\n    public String getStudyId() &#123;\n        return studyId;\n    &#125;\n\n    public void setStudyId(String studyId) &#123;\n        this.studyId = studyId;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getClassName() &#123;\n        return className;\n    &#125;\n\n    public void setClassName(String className) &#123;\n        this.className = className;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">import java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n    案例：学生信息系统：展示数据，并按照学号完成搜索\n     学生类信息（学号，姓名，性别，班级）\n     测试数据：\n     &quot;20180302&quot;,&quot;叶孤城&quot;,23,&quot;护理一班&quot;\n     &quot;20180303&quot;,&quot;东方不败&quot;,23,&quot;推拿二班&quot;\n     &quot;20180304&quot;,&quot;西门吹雪&quot;,26,&quot;中药学四班&quot;\n     &quot;20180305&quot;,&quot;梅超风&quot;,26,&quot;神经科2班&quot;\n */\npublic class ArrayListTest6 &#123;\n    public static void main(String[] args) &#123;\n        // 1、定义一个学生类，后期用于创建对象封装学生数据\n        // 2、定义一个集合对象用于装学生对象\n        ArrayList&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(&quot;20180302&quot;,&quot;叶孤城&quot;,23,&quot;护理一班&quot;));\n        students.add(new Student(&quot;20180303&quot;,&quot;东方不败&quot;,23,&quot;推拿二班&quot;));\n        students.add(new Student( &quot;20180304&quot;,&quot;西门吹雪&quot;,26,&quot;中药学四班&quot;));\n        students.add(new Student( &quot;20180305&quot;,&quot;梅超风&quot;,26,&quot;神经科2班&quot;));\n        System.out.println(&quot;学号\\t\\t名称\\t年龄\\t\\t班级&quot;);\n\n        // 3、遍历集合中的每个学生对象并展示其数据\n        for (int i = 0; i &lt; students.size(); i++) &#123;\n            Student s = students.get(i);\n            System.out.println(s.getStudyId() +&quot;\\t\\t&quot; + s.getName()+&quot;\\t\\t&quot;\n                    + s.getAge() +&quot;\\t\\t&quot; + s.getClassName());\n        &#125;\n\n        // 4、让用户不断的输入学号，可以搜索出该学生对象信息并展示出来（独立成方法）\n        Scanner sc = new Scanner(System.in);\n        while (true) &#123;\n            System.out.println(&quot;请您输入要查询的学生的学号：&quot;);\n            String id = sc.next();\n            Student s = getStudentByStudyId(students, id);\n            // 判断学号是否存在\n            if(s == null)&#123;\n                System.out.println(&quot;查无此人！&quot;);\n            &#125;else &#123;\n                // 找到了该学生对象了，信息如下\n                System.out.println(s.getStudyId() +&quot;\\t\\t&quot; + s.getName()+&quot;\\t\\t&quot;\n                        + s.getAge() +&quot;\\t\\t&quot; + s.getClassName());\n            &#125;\n        &#125;\n    &#125;\n\n    /**\n      根据学号，去集合中找出学生对象并返回。\n     * @param students\n     * @param studyId\n     * @return\n     */\n    public static Student getStudentByStudyId(ArrayList&lt;Student&gt; students, String studyId)&#123;\n        for (int i = 0; i &lt; students.size(); i++) &#123;\n            Student s = students.get(i);\n            if(s.getStudyId().equals(studyId))&#123;\n                return s;\n            &#125;\n        &#125;\n        return null; // 查无此学号！\n    &#125;\n&#125;\n</code></pre>\n<hr>\n","feature":true,"text":"String是Java中表示字符串的类，提供了丰富的字符串操作方法。ArrayList是Java中的动态数组实现，可以动态增加或减少元素。这两个类在Java编程中经常被用到，提供了便利的字符串处理和动态数组功能。...","permalink":"/post/Java程序设计 -- 常用API(上)（九）","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81String\"><span class=\"toc-text\">1、String</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-String%E7%B1%BB%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1 String类概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-String%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.2 String创建对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%B8%B8%E7%94%A8API\"><span class=\"toc-text\">1.3 常用API</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Arraylist\"><span class=\"toc-text\">2、Arraylist</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-Arraylist%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 Arraylist概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-Arraylist%E4%B8%8E%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">2.2 Arraylist与泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-Arraylist%E5%B8%B8%E7%94%A8API\"><span class=\"toc-text\">2.3 Arraylist常用API</span></a></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--常用API(中)","uid":"14d6bcd214a7a0ca6551995e61aaab69","slug":"Java程序设计 -- 常用API(中)（十）","date":"2022-03-21T14:44:56.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 常用API(中)（十）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"Object是Java中所有类的根类，它定义了一些通用的方法，如equals()和toString()。Math是Java提供的数学工具类，包含了一系列数学相关的静态方法，如求绝对值、平方根、三角函数等。BigDecimal是Java中用于精确计算的高精度数字类，它可以处理任意位数的小数，避免了浮点数计算中的精度丢失问题。...","permalink":"/post/Java程序设计 -- 常用API(中)（十）","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--面向对象进阶(下)","uid":"d1d7e86490a5e69b9e63a3257b8f9b8b","slug":"Java程序设计 -- 面向对象进阶(下)（八）","date":"2022-03-21T03:01:58.000Z","updated":"2025-07-14T15:12:20.462Z","comments":true,"path":"api/articles/Java程序设计 -- 面向对象进阶(下)（八）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"final用于修饰不可改变的类、方法或变量；抽象类不能实例化，只能作为父类，可以包含抽象方法和具体方法；接口定义方法签名但不提供实现，类可以实现多个接口。它们能够提供代码的安全性、可维护性和灵活性。...","permalink":"/post/Java程序设计 -- 面向对象进阶(下)（八）","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}