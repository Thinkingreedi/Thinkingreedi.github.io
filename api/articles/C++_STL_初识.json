{"title":"C++_STL_初识","uid":"9f006e9426f7337b910be637ae59775f","slug":"C++_STL_初识","date":"2022-01-13T02:22:56.000Z","updated":"2025-07-14T15:12:20.457Z","comments":true,"path":"api/articles/C++_STL_初识.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/506e6842fd8542408c76ef139e90ebd3.png","content":"<hr>\n<h2 id=\"C-STL-初识\"><a href=\"#C-STL-初识\" class=\"headerlink\" title=\"C++ STL-初识\"></a>C++ STL-初识</h2><h3 id=\"1-STL-的诞生\"><a href=\"#1-STL-的诞生\" class=\"headerlink\" title=\"1 STL 的诞生\"></a>1 STL 的诞生</h3><ul>\n<li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p>\n</li>\n<li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p>\n</li>\n<li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p>\n</li>\n<li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p>\n</li>\n</ul>\n<h3 id=\"2-STL-基本概念\"><a href=\"#2-STL-基本概念\" class=\"headerlink\" title=\"2 STL 基本概念\"></a>2 STL 基本概念</h3><ul>\n<li>STL(Standard Template Library,<strong>标准模板库</strong>)</li>\n<li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li>\n<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>\n<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>\n</ul>\n<h3 id=\"3-STL-六大组件\"><a href=\"#3-STL-六大组件\" class=\"headerlink\" title=\"3 STL 六大组件\"></a>3 STL 六大组件</h3><p>STL 大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>\n<ol>\n<li>容器：各种数据结构，如 vector、list、deque、set、map 等,用来存放数据。</li>\n<li>算法：各种常用的算法，如 sort、find、copy、for_each 等</li>\n<li>迭代器：扮演了容器与算法之间的胶合剂。</li>\n<li>仿函数：行为类似函数，可作为算法的某种策略。</li>\n<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>\n<li>空间配置器：负责空间的配置与管理。</li>\n</ol>\n<h3 id=\"4-STL-中容器、算法、迭代器\"><a href=\"#4-STL-中容器、算法、迭代器\" class=\"headerlink\" title=\"4 STL 中容器、算法、迭代器\"></a>4 STL 中容器、算法、迭代器</h3><p><strong>容器</strong>：置物之所也</p>\n<p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>\n<p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p>\n<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>\n<p>​ <strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>​ <strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p>\n<p><strong>算法</strong>：问题之解法也</p>\n<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p>\n<p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p>\n<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>\n<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>\n<p><strong>迭代器</strong>：容器和算法之间粘合剂</p>\n<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>\n<p>每个容器都有自己专属的迭代器</p>\n<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>\n<p>迭代器种类：</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>功能</th>\n<th>支持运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>输入迭代器</td>\n<td>对数据的只读访问</td>\n<td>只读，支持++、&#x3D;&#x3D;、！&#x3D;</td>\n</tr>\n<tr>\n<td>输出迭代器</td>\n<td>对数据的只写访问</td>\n<td>只写，支持++</td>\n</tr>\n<tr>\n<td>前向迭代器</td>\n<td>读写操作，并能向前推进迭代器</td>\n<td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td>\n</tr>\n<tr>\n<td>双向迭代器</td>\n<td>读写操作，并能向前和向后操作</td>\n<td>读写，支持++、–，</td>\n</tr>\n<tr>\n<td>随机访问迭代器</td>\n<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>\n<td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td>\n</tr>\n</tbody></table>\n<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>\n<h3 id=\"5-容器算法迭代器初识\"><a href=\"#5-容器算法迭代器初识\" class=\"headerlink\" title=\"5 容器算法迭代器初识\"></a>5 容器算法迭代器初识</h3><p>了解 STL 中容器、算法、迭代器概念之后，我们利用代码感受 STL 的魅力</p>\n<p>STL 中最常用的容器为 Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>\n<h4 id=\"5-1-vector-存放内置数据类型\"><a href=\"#5-1-vector-存放内置数据类型\" class=\"headerlink\" title=\"5.1 vector 存放内置数据类型\"></a>5.1 vector 存放内置数据类型</h4><p>容器： <code>vector</code></p>\n<p>算法： <code>for_each</code></p>\n<p>迭代器： <code>vector&lt;int&gt;::iterator</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"c\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid MyPrint(int val)\n&#123;\n    cout &lt;&lt; val &lt;&lt; endl;\n&#125;\n\nvoid test01() &#123;\n\n    //创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型\n    vector&lt;int&gt; v;\n    //向容器中放数据\n    v.push_back(10);\n    v.push_back(20);\n    v.push_back(30);\n    v.push_back(40);\n\n    //每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素\n    //v.begin()返回迭代器，这个迭代器指向容器中第一个数据\n    //v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置\n    //vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型\n\n    vector&lt;int&gt;::iterator pBegin = v.begin();\n    vector&lt;int&gt;::iterator pEnd = v.end();\n\n    //第一种遍历方式：\n    while (pBegin != pEnd) &#123;\n        cout &lt;&lt; *pBegin &lt;&lt; endl;\n        pBegin++;\n    &#125;\n\n\n    //第二种遍历方式：\n    for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n        cout &lt;&lt; *it &lt;&lt; endl;\n    &#125;\n    cout &lt;&lt; endl;\n\n    //第三种遍历方式：\n    //使用STL提供标准遍历算法  头文件 algorithm\n    for_each(v.begin(), v.end(), MyPrint);\n&#125;\n\nint main() &#123;\n\n    test01();\n\n    system(&quot;pause&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"5-2-Vector-存放自定义数据类型\"><a href=\"#5-2-Vector-存放自定义数据类型\" class=\"headerlink\" title=\"5.2 Vector 存放自定义数据类型\"></a>5.2 Vector 存放自定义数据类型</h4><p>学习目标：vector 中存放自定义数据类型，并打印输出</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"c\">#include &lt;vector&gt;\n#include &lt;string&gt;\n\n//自定义数据类型\nclass Person &#123;\npublic:\n    Person(string name, int age) &#123;\n        mName = name;\n        mAge = age;\n    &#125;\npublic:\n    string mName;\n    int mAge;\n&#125;;\n//存放对象\nvoid test01() &#123;\n\n    vector&lt;Person&gt; v;\n\n    //创建数据\n    Person p1(&quot;aaa&quot;, 10);\n    Person p2(&quot;bbb&quot;, 20);\n    Person p3(&quot;ccc&quot;, 30);\n    Person p4(&quot;ddd&quot;, 40);\n    Person p5(&quot;eee&quot;, 50);\n\n    v.push_back(p1);\n    v.push_back(p2);\n    v.push_back(p3);\n    v.push_back(p4);\n    v.push_back(p5);\n\n    for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n        cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl;\n\n    &#125;\n&#125;\n\n\n//放对象指针\nvoid test02() &#123;\n\n    vector&lt;Person*&gt; v;\n\n    //创建数据\n    Person p1(&quot;aaa&quot;, 10);\n    Person p2(&quot;bbb&quot;, 20);\n    Person p3(&quot;ccc&quot;, 30);\n    Person p4(&quot;ddd&quot;, 40);\n    Person p5(&quot;eee&quot;, 50);\n\n    v.push_back(&amp;p1);\n    v.push_back(&amp;p2);\n    v.push_back(&amp;p3);\n    v.push_back(&amp;p4);\n    v.push_back(&amp;p5);\n\n    for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n        Person * p = (*it);\n        cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;\n    &#125;\n&#125;\n\n\nint main() &#123;\n\n    test01();\n\n    test02();\n\n    system(&quot;pause&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"5-3-Vector-容器嵌套容器\"><a href=\"#5-3-Vector-容器嵌套容器\" class=\"headerlink\" title=\"5.3 Vector 容器嵌套容器\"></a>5.3 Vector 容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"c\">#include &lt;vector&gt;\n\n//容器嵌套容器\nvoid test01() &#123;\n\n    vector&lt; vector&lt;int&gt; &gt;  v;\n\n    vector&lt;int&gt; v1;\n    vector&lt;int&gt; v2;\n    vector&lt;int&gt; v3;\n    vector&lt;int&gt; v4;\n\n    for (int i = 0; i &lt; 4; i++) &#123;\n        v1.push_back(i + 1);\n        v2.push_back(i + 2);\n        v3.push_back(i + 3);\n        v4.push_back(i + 4);\n    &#125;\n\n    //将容器元素插入到vector v中\n    v.push_back(v1);\n    v.push_back(v2);\n    v.push_back(v3);\n    v.push_back(v4);\n\n\n    for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\n        for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123;\n            cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;\n        &#125;\n        cout &lt;&lt; endl;\n    &#125;\n\n&#125;\n\nint main() &#123;\n\n    test01();\n\n    system(&quot;pause&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n","feature":true,"text":"C++标准模板库（STL）是C++编程中不可或缺的部分，它提供了丰富的数据结构和算法。本文我们将对每种容器和算法进行简要介绍，并给出示例代码加深理解。...","permalink":"/post/C++_STL_初识","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"STL","slug":"STL","count":3,"path":"api/tags/STL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-STL-%E5%88%9D%E8%AF%86\"><span class=\"toc-text\">C++ STL-初识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-STL-%E7%9A%84%E8%AF%9E%E7%94%9F\"><span class=\"toc-text\">1 STL 的诞生</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-STL-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2 STL 基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-STL-%E5%85%AD%E5%A4%A7%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">3 STL 六大组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-STL-%E4%B8%AD%E5%AE%B9%E5%99%A8%E3%80%81%E7%AE%97%E6%B3%95%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">4 STL 中容器、算法、迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%AE%B9%E5%99%A8%E7%AE%97%E6%B3%95%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%88%9D%E8%AF%86\"><span class=\"toc-text\">5 容器算法迭代器初识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-vector-%E5%AD%98%E6%94%BE%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.1 vector 存放内置数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-Vector-%E5%AD%98%E6%94%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.2 Vector 存放自定义数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-Vector-%E5%AE%B9%E5%99%A8%E5%B5%8C%E5%A5%97%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">5.3 Vector 容器嵌套容器</span></a></li></ol></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++_STL_常用容器","uid":"ccfaee9dae4598dc22f175fda2e90c05","slug":"C++_STL_常用容器","date":"2022-01-14T04:16:24.000Z","updated":"2025-07-14T15:12:20.457Z","comments":true,"path":"api/articles/C++_STL_常用容器.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/506e6842fd8542408c76ef139e90ebd3.png","text":"C++标准模板库(STL)是C++编程中不可或缺的部分，它提供了丰富的数据结构和算法。本文我们将对每种容器和算法进行简要介绍，并给出示例代码加深理解。...","permalink":"/post/C++_STL_常用容器","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"51 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"STL","slug":"STL","count":3,"path":"api/tags/STL.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"C语言程序设计（第二版）知识点总结(下)","uid":"5b88581a52377230e43264c4419525c8","slug":"C语言程序设计（第二版）知识点总结（下）","date":"2022-01-12T12:50:49.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（下）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（下）","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false}}