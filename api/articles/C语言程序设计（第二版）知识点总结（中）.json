{"title":"C语言程序设计（第二版）知识点总结(中)","uid":"0ca2db43264aba823021e557298340df","slug":"C语言程序设计（第二版）知识点总结（中）","date":"2022-01-11T01:18:27.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（中）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","content":"<hr>\n<h1 id=\"五、数组\"><a href=\"#五、数组\" class=\"headerlink\" title=\"五、数组\"></a>五、数组</h1><h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><ul>\n<li>数组是统一命名的一组变量，它们具有相同的名字的相同的数据类型，可以用数组名和每个元素在数组中的位置来访问数组元素。</li>\n<li>一维数组初始化情况如下：</li>\n</ul>\n<ol>\n<li>数组初始化,数组初始化后，数组元素的初值为：a[0]值为 1，a[1]值为 2…</li>\n</ol>\n<pre><code class=\"c\">int a[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;\n</code></pre>\n<ol start=\"2\">\n<li>部分数组元素初始化，如果初值表中数据个数比数组长度少，那么数组中剩余元素赋值为 0。</li>\n</ol>\n<pre><code class=\"c\">int a[10] = &#123;1,2,3&#125;;\n</code></pre>\n<ol start=\"3\">\n<li>直接将数组全部初始化为 0。</li>\n</ol>\n<pre><code class=\"c\">int a[10] = &#123;0&#125;;\n</code></pre>\n<ul>\n<li>数组应用实例：</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//斐波拉契数列\n#define N 50\n\nint main(void)\n&#123;\n    int f[N];\n    int n,i;\n\n    scanf(&quot;%d&quot;,&amp;n);\n    f[0]=1;\n    f[1]=1;\n\n    for(i=2;i&lt;n;i++)\n    &#123;\n        f[i] = f [i-1] +f[i-2];\n    &#125;\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        printf(&quot;%d &quot;,f[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n    return 0;\n &#125;\n</code></pre>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//比较交换排序\n#define N 10\n\nint main(void)\n&#123;\n    int i,j,t,n;\n    int a[N];\n\n    printf(&quot;请输入元素个数：\\n&quot;);\n    scanf(&quot;%d&quot;,&amp;n);\n    printf(&quot;请输入%d个元素\\n&quot;,n);\n\n    for(i=0;i&lt;n;i++)\n        scanf(&quot;%d&quot;,&amp;a[i]);\n\n    for(i=0;i&lt;n-1;i++)\n    &#123;\n        for(j=i+1;j&lt;n;j++)\n            if(a[i]&gt;a[j])\n            &#123;\n                t=a[i];\n                a[i]=a[j];\n                a[j]=t;\n             &#125;\n    &#125;\n    printf(&quot;排序后：\\n&quot;);\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        printf(&quot;%d &quot;,a[i]);\n    &#125;\n    return 0;\n &#125;\n</code></pre>\n<h2 id=\"数组作为函数参数\"><a href=\"#数组作为函数参数\" class=\"headerlink\" title=\"数组作为函数参数\"></a>数组作为函数参数</h2><ul>\n<li>数组名代表数组首元素的地址，因此数组名做参数就可以将数组的起始地址传递给形参。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//数组数据相加\n\nint SumArr(int array[],int n);\n\nint main(void)\n&#123;\n    int b[5]=&#123;1,3,5,7,9&#125;;\n\n    printf(&quot;%d\\n&quot;,SumArr(b,5));\n    return 0;\n &#125;\nint SumArr(int array[],int n)\n&#123;\n    int i,s=0;\n\n    for(i=0;i&lt;n;i++)\n        s += array[i];\n\n    return s;\n&#125;\n</code></pre>\n<ul>\n<li>形参数组和实参数组实质上是同一块内存区域，为同一数组，所以形参数组发生改变，实参数组也随之改变。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//乘10变换\n\nvoid ModifyArr(int array[],int n);\n\nint main(void)\n&#123;\n    int i;\n    int a[5]=&#123;1,4,5,7,9&#125;;\n    int n = 5;\n    printf(&quot;数组a的内容：\\n&quot;);\n\n    for(i=0;i&lt;n;i++)\n        printf(&quot;%d &quot;,a[i]);\n\n    printf(&quot;\\n\\n&quot;);\n\n    ModifyArr(a,5);\n\n    printf(&quot;数组a被修改后的内容:\\n&quot;);\n\n    for(i=0;i&lt;n;i++)\n        printf(&quot;%d &quot;,a[i]);\n\n    printf(&quot;\\n\\n&quot;);\n    return 0;\n&#125;\nvoid ModifyArr(int array[],int n)\n&#123;\n    int i,s=0;\n\n    for(i=0;i&lt;n;i++)\n        array[i] *= 10;\n&#125;\n</code></pre>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><ul>\n<li>二维数组本质上是以数组作为数组元素的数组，即“数组的数组”，类型说明符 数组名[常量表达式][常量表达式]。二维数组又称为矩阵，行列数相等的矩阵称为方阵。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//杨辉三角\n#define N 6\n\nint main(void)\n&#123;\n    int a[N][N];\n    int i,j,n;\n\n    scanf(&quot;%d&quot;,&amp;n);\n\n    a[0][0] = a[1][0] = a[1][1] = 1;\n\n    for(i=0;i&lt;n;i++)\n        a[i][0] = a[i][i] = 1;\n\n    for(i=2;i&lt;n;i++)\n        for(j=1;j&lt;i;j++)\n            a[i][j] = a[i-1][j] + a[i-1][j-1];\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        for(j=0;j&lt;=i;j++)\n            printf(&quot;%6d&quot;,a[i][j]);\n        printf(&quot;\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"六、字符数组与字符串\"><a href=\"#六、字符数组与字符串\" class=\"headerlink\" title=\"六、字符数组与字符串\"></a>六、字符数组与字符串</h1><h2 id=\"转义序列\"><a href=\"#转义序列\" class=\"headerlink\" title=\"转义序列\"></a>转义序列</h2><ul>\n<li>字符常量通常是单引号括起来的单个字符，然而一些特殊的字符无法采用上述方式书写，于是使用转义字符。<br><img src=\"https://img-blog.csdnimg.cn/4e8a473d649849438a5c4f380b6140cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></li>\n</ul>\n<h2 id=\"字符数据的输入问题\"><a href=\"#字符数据的输入问题\" class=\"headerlink\" title=\"字符数据的输入问题\"></a>字符数据的输入问题</h2><ul>\n<li>scanf（）函数和 getchar（）函数都可以用来读入单个字符，但如果下一个字符是空格，scanf（）或 getchar（）会把读到的空格字符存入对应的变量，类似问题解决方法如下：</li>\n</ul>\n<ol>\n<li>getchar 法<br>通过调用 getchar（）函数将回车符读入：</li>\n</ol>\n<pre><code class=\"c\">scanf(&quot;%d&quot;,&amp;n);\ngetchar();//将缓冲区的回车符读入\nscanf(&quot;%c&quot;,&amp;ch);\n</code></pre>\n<ol start=\"2\">\n<li>赋值抑制符<br>使用赋值抑制符“*”来跳过所读入的回车符：</li>\n</ol>\n<pre><code class=\"c\">scanf(&quot;%d&quot;,&amp;n);\nscanf(&quot;%*c%c&quot;,&amp;ch);//用%*c将缓冲区的回车符读入但不存储\n</code></pre>\n<ol start=\"3\">\n<li>scanf 格式串中的空格符<br>scanf 格式串中的空格符意味着跳过零个或多个空白字符。</li>\n</ol>\n<pre><code class=\"c\">scanf(&quot;%d&quot;,&amp;n);\nscanf(&quot; %c&quot;,&amp;ch);\n</code></pre>\n<h2 id=\"处理字符的函数\"><a href=\"#处理字符的函数\" class=\"headerlink\" title=\"处理字符的函数\"></a>处理字符的函数</h2><p><img src=\"https://img-blog.csdnimg.cn/f33b1a72eca144d593458d3cbd9f441f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<h2 id=\"字符数组与字符串\"><a href=\"#字符数组与字符串\" class=\"headerlink\" title=\"字符数组与字符串\"></a>字符数组与字符串</h2><ul>\n<li>C 语言本来没有“字符串这种数据类型。通常用一个字符数组来存放一个字符串。字符串与普通字符数组的区别是：字符串的末尾有一个空字符’\\0’，空字符不计入字符串有效字符。字符串中没有显式给出有效字符的个数，只规定在字符串结束符’\\0’之前的字符都是字符串的有效字符，一般用’\\0’来控制循环。循环条件是 s[i]!&#x3D;’\\0’。</li>\n<li>输入输出：</li>\n</ul>\n<ol>\n<li>用%s 整体输入&#x2F;输出，格式描述串中使用转化字符串”%s”。<br>用 scanf（）函数以%s 格式读入的数据不能含有空白符，所有的空白符都被当做数据结束的标志。</li>\n</ol>\n<pre><code class=\"c\">char name[100];\nscanf(&quot;%s&quot;,name);\nprintf(&quot;%s&quot;,name);\n</code></pre>\n<ol start=\"2\">\n<li>用 gets（）和 puts（）函数：<br>功能是读取字符串，并存放在指定字符数组中，遇到换行符或文件结束标志时结束读入。</li>\n</ol>\n<pre><code class=\"c\">gets(字符数组名);\nputs(字符数组名);\n</code></pre>\n<h2 id=\"常用字符串函数\"><a href=\"#常用字符串函数\" class=\"headerlink\" title=\"常用字符串函数\"></a>常用字符串函数</h2><ol>\n<li>求字符串长度函数（以下函数的头文件为 string.h）<br>调用格式：strlen（str）<br>功能：测试字符串长度，函数返回值是 str 中字符的个数。</li>\n</ol>\n<pre><code class=\"c\">char str[10]=&quot;China&quot;;\nprintf(&quot;%d&quot;,strlen(&quot;China&quot;));//程序输出为5\n</code></pre>\n<ol start=\"2\">\n<li>字符串复制函数<br>调用格式：strcpy（str1，str2）<br>功能：复制第二个参数的内容到第一个参数中。<br>调用格式：strncpy（str1，str2，n）<br>功能：复制第二个参数中最多 n 个字符的内容到第一个参数中。</li>\n</ol>\n<pre><code class=\"c\">char s1[10],s2[]=&quot;Beijing&quot;;\nstrcpy(s1,s2);\n</code></pre>\n<ol start=\"3\">\n<li>字符串比较函数<br>调用格式：strcmp（str1，str2）<br>功能：比较字符串 1 和字符串 2 的大小，若前者大则返回一个正整数，若后者大则返回一个负整数，若两者相等，则返回 0。<br>调用格式：strncmp（str1，str2，n）<br>功能：比较字符串 1 最多 n 个字符和字符串 2 的大小，若前者大则返回一个正整数，若后者大则返回一个负整数，若两者相等，则返回 0。</li>\n</ol>\n<pre><code class=\"c\">strcmp(&quot;abc&quot;,&quot;abc&quot;);\n</code></pre>\n<ol start=\"4\">\n<li>字符串连接函数 strcat（）和 strncat（）<br>调用格式：strcat（str1，str2）<br>功能：将第二个参数的内容添加到第一个参数的有效字符后面。<br>调用格式：strncat（str1，str2，n）<br>功能：将第二个参数的 n 个字符内容添加到第一个参数的有效字符后面。</li>\n</ol>\n<pre><code class=\"c\">char str1[21] = &quot;Beijing and&quot;;\nchar str2[] = &quot;Shanghai&quot;;\nstrcat(str1,str2);\nprintf(&quot;%s&quot;,str1);//输出为:Beijing and Shanghai\n</code></pre>\n<ol start=\"5\">\n<li>字符串逆置函数<br>调用格式：strrev（str）<br>功能：将字符串前后颠倒。</li>\n</ol>\n<pre><code class=\"c\">char str[10] = &quot;hello&quot;;\nstrrev(str);\nputs(str);//程序的输出为:olleh\n</code></pre>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//输出最大字符串\n#include&lt;string.h&gt;\n#define LEN 81\nint main(void)\n&#123;\n    int n,i;\n    char str[LEN];\n    char maxStr[LEN]=&quot;&quot;;\n\n    printf(&quot;请输入字符串个数：&quot;);\n    scanf(&quot;%d&quot;,&amp;n);\n    getchar();\n    printf(&quot;请输入%d个字符串:&quot;,n);\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        gets(str);\n        if(strcmp(str,maxStr)&gt;0)\n            strcpy(maxStr,str);\n    &#125;\n\n    printf(&quot;最大字符串：&quot;);\n    puts(maxStr);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"6\">\n<li>函数 sprintf（）（以下函数头文件为 stdio.h）<br>调用格式：sprintf（str，格式字符串，输出项列表）<br>功能：与 printf（）唯一的不同是多了一个参数 str，并且输出结果是保存在字符数组 str 中，而不是输出到屏幕。</li>\n</ol>\n<pre><code class=\"c\">sprintf(str,&quot;Price is %d&quot;,d);\n</code></pre>\n<ol start=\"7\">\n<li>函数 sscanf（）<br>调用格式：sscanf（字符数组，格式字符串，输出项列表）<br>功能：与 scanf（）唯一不同的是多了一个参数字符数组，并且是从字符数组中读入，而不是从键盘读入。</li>\n</ol>\n<pre><code class=\"c\">sscanf(str,&quot;%*6d%4d%2d%2d&quot;,&amp;year，&amp;month，&amp;day);\n</code></pre>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//水仙花数\n\nint main(void)\n&#123;\n    char str[10];\n    int n,a,b,c;\n    gets(str);\n    sscanf(str,&quot;%d&quot;,&amp;n);             //作为一个三位整数读入；\n    sscanf(str,&quot;%1d%1d%1d&quot;,&amp;a,&amp;b,&amp;c);//作为三个一位整数读入；\n\n    if(n == a*a*a + b*b*b + c*c*c)&#123;\n        printf(&quot;Yes\\n&quot;);\n    &#125;\n    else&#123;\n        printf(&quot;No\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"字符串数组\"><a href=\"#字符串数组\" class=\"headerlink\" title=\"字符串数组\"></a>字符串数组</h2><ul>\n<li>一维字符数组可以存储一个字符串，二维字符数组可以存储多个字符串，这种用来存放字符串的数组称为字符串数组。字符串数组的每一行元素中都含有字符串结束符’\\0’，因此它的每一行元素都可以和字符串一样输入、输出及初始化。</li>\n</ul>\n<pre><code class=\"c\">char color[][10] = &#123;&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;&#125;;\n</code></pre>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//二维字符数组实现多个字符串排序\n#include&lt;stdlib.h&gt;\n#include&lt;string.h&gt;\n#define N 100\n#define LEN 81\n\nvoid Sort(char str[][LEN],int n);\n\nint main(void)\n&#123;\n    int i,n;\n    char str[N][LEN];\n\n    printf(&quot;输入n和n个字符串\\n&quot;);\n    scanf(&quot;%d&quot;,&amp;n);\n    getchar();\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        gets(str[i]);\n    &#125;\n\n    Sort(str,n);\n\n    for(i=0;i&lt;n;i++)\n    &#123;\n        printf(&quot;%s\\n&quot;,str[i]);\n    &#125;\n    return 0;\n&#125;\n\nvoid Sort(char str[][LEN],int n)\n&#123;\n    int i,j;\n    char temp[LEN];\n\n    for(i=0;i&lt;n-1;i++)\n        for(j=i+1;j&lt;n;j++)\n        &#123;\n            if(strcmp(str[i],str[j])&gt;0)\n            &#123;\n                strcpy(temp,str[i]);\n                strcpy(str[i],str[j]);\n                strcpy(str[j],temp);\n            &#125;\n        &#125;\n&#125;\n</code></pre>\n<h1 id=\"七、指针\"><a href=\"#七、指针\" class=\"headerlink\" title=\"七、指针\"></a>七、指针</h1><ul>\n<li><p>指针是用于表示内存地址的数据项。<br><img src=\"https://img-blog.csdnimg.cn/996c83472e2e45d9b9d6f934fcd2b43a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n</li>\n<li><p>指针的声明与普通变量的声明方式基本相同，唯一的不同是必须在指针变量名字前加一个“*”。</p>\n</li>\n</ul>\n<pre><code class=\"c\">int *ptr;//ptr是一个指向int类型的指针\n</code></pre>\n<ul>\n<li>指针变量使用时必须赋初值，可以再定义指针时进行初始化，也可以通过一个赋值语句来完成。</li>\n</ul>\n<pre><code class=\"c\">int count = 5, *cntptr;\ncntptr = &amp;count;\n/*\nint count = 5;\nint *cntptr = &amp;count;\n*/\n</code></pre>\n<ul>\n<li>指针的基本运算<ul>\n<li>&amp;：取地址运算符；</li>\n<li>*：访问指针所指内存对象。（间接寻址运算符）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一维数组与指针\"><a href=\"#一维数组与指针\" class=\"headerlink\" title=\"一维数组与指针\"></a>一维数组与指针</h2><ul>\n<li>指针与数组有着非常密切的关系，凡是由数组下标完成的操作都可以用指针完成。</li>\n<li>指针加&#x2F;减一个整数的结果是另一个指针。如果指针 p 指向数组元素 a[0]，则 p+1 将指向数组元素 a[1]。指针每增 1，指针所指向的内存地址的增量是其所指向类型的大小（字节数），即指向下一个同类型元素。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    double a[4] = &#123;1.5,2,3,4&#125;;\n    double *p;\n\n    p = &amp;a[0];\n    printf(&quot;p中存储的地址值:%p\\n&quot;,p);\n    printf(&quot;p所指变量的值:%.1f\\n&quot;,*p);\n\n    p = p + 1;\n    printf(&quot;p+1后\\n&quot;);\n    printf(&quot;p中存储的地址值:%p\\n&quot;,p);\n    printf(&quot;p所指变量的值:%.1f\\n&quot;,*p);\n\n    return 0;\n&#125;\n</code></pre>\n<ul>\n<li>同类型的指针相减结果为两个指针之间的距离，这个距离是用元素个数来度量，而不是用字节来度量。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    double a[2],*p,*q;\n\n    p = &amp;a[0];\n    q = &amp;a[1];\n    printf(&quot;%d\\n&quot;,(int*)q-(int*)p);\n    printf(&quot;%d\\n&quot;,q-p);\n    return 0;\n&#125;\n</code></pre>\n<ul>\n<li>数组相当于地址常量。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n#define N 100\n\nint main(void)\n&#123;\n    int i,n,a[N];\n    int *ptr = a;\n\n    scanf(&quot;%d&quot;,&amp;n);\n    for(i=0;i&lt;n;i++)\n        scanf(&quot;%d&quot;,a+i);\n    //用数组名/下标法引用数组元素\n    for(i=n-1;i&gt;=0;i--)\n        printf(&quot;%d &quot;,a[i]);\n\n    printf(&quot;\\n&quot;);\n    //用数组名/偏移量法引用数组元素\n    for(i=n-1;i&gt;=0;i--)\n        printf(&quot;%d &quot;,*(a+i));\n\n    printf(&quot;\\n&quot;);\n    //用指针/偏移量法引用数组元素\n    for(i=n-1;i&gt;=0;i--)\n        printf(&quot;%d &quot;,*(ptr+i));\n\n    printf(&quot;\\n&quot;);\n    //用指针下标法引用数组元素\n    for(i=n-1;i&gt;=0;i--)\n        printf(&quot;%d &quot;,ptr[i]);\n\n    printf(&quot;\\n&quot;);\n    //用移动指针法遍历数组元素\n    for(ptr=a+n-1;ptr&gt;=a;ptr--)\n        printf(&quot;%d &quot;,*ptr);\n\n    printf(&quot;\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ul>\n<li>数组名在参数传递时，总是被视为指针。数组名作为实参时，因数组名是指针常量，形参应该是同类型的指针变量。</li>\n</ul>\n<h2 id=\"指针与字符串\"><a href=\"#指针与字符串\" class=\"headerlink\" title=\"指针与字符串\"></a>指针与字符串</h2><ul>\n<li>由指向首字符的指针和字符串结束标志’\\0’就可以唯一地确定一个字符串。</li>\n</ul>\n<ol>\n<li>字符串常量为字符指针变量赋值</li>\n</ol>\n<pre><code class=\"c\">char *p;\np = &quot;abcd&quot;;//内存首地址存入p\n</code></pre>\n<ol start=\"2\">\n<li>字符串常量的指针运算</li>\n</ol>\n<pre><code class=\"c\">printf(&quot;%s&quot;,&quot;abcdef&quot;+2);//输出cdef\n</code></pre>\n<ol start=\"3\">\n<li>字符串常量的下标运算</li>\n</ol>\n<pre><code class=\"c\">char ch = &quot;abcd&quot;[2];//下标为2的字符&#39;c&#39;存入ch\n</code></pre>\n<pre><code class=\"c\">void DToR(int n,char str[],int r)//将十进制转换为r进制\n&#123;\n    int k = 0,d;\n\n    while(n!=0)\n    &#123;\n        d  = n%r;\n        str[k] = &quot;123456789abcdef&quot;[d];\n        k++;\n        n=n/r;\n    &#125;\n    str[k] = &#39;\\0&#39;;\n    strrev(str);\n&#125;\n</code></pre>\n<h2 id=\"指针实现动态内存分配\"><a href=\"#指针实现动态内存分配\" class=\"headerlink\" title=\"指针实现动态内存分配\"></a>指针实现动态内存分配</h2><ul>\n<li>在 C 语言中，动态分配内存是通过动态存储分配函数 malloc()来实现的。malloc（）函数功能是在内存的动态存储区中分配一连续空间。若申请成功，则返回指向所分配内存空间的起始地址的指针；若申请内存空间不成功，则返回 NULL（值为 0）</li>\n<li>calloc（）函数为数组分配内存，大致同 malloc（）相同，区别是 calloc（）函数会通过把所有字节置 0 来初始化该内存空间。</li>\n<li>为数组分配完空间后可能会发现帅过大或者过小。realloc（）函数可以调整已申请内存的大小。</li>\n<li>在动态内存分配时，应该在不需要该内存时将内存释放。如果频繁地申请内存而没有及时释放不再需要的内存，可能会将内存耗尽。free（）函数用来释放不需要的内存。</li>\n</ul>\n<pre><code class=\"c\">#include&lt;stdio.h&gt; //动态申请一个一维数组\n#include&lt;stdlib.h&gt;//malloc的头文件\n\nint main(void)\n&#123;\n    int n,i,*p;\n\n    scanf(&quot;%d&quot;,&amp;n);\n    p = (int *)/*强制转换*/malloc(n*sizeof(int));\n\n    if(p == NULL)\n    &#123;\n        printf(&quot;申请失败\\n&quot;);\n        exit(0);\n    &#125;\n\n    for(i=0;i&lt;n;i++)&#123;\n        scanf(&quot;%d&quot;,p+i);\n    &#125;\n    for(i=n-1;i&gt;=0;i--)&#123;\n        printf(&quot;%d &quot;,p[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n    free(p);\n    return 0;\n&#125;\n</code></pre>\n","feature":false,"text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（中）","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">五、数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">一维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">数组作为函数参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">二维数组</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">六、字符数组与字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">转义序列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">字符数据的输入问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">处理字符的函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符数组与字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用字符串函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">字符串数组</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E6%8C%87%E9%92%88\"><span class=\"toc-text\">七、指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">一维数组与指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">指针与字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">指针实现动态内存分配</span></a></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言程序设计（第二版）知识点总结(下)","uid":"5b88581a52377230e43264c4419525c8","slug":"C语言程序设计（第二版）知识点总结（下）","date":"2022-01-12T12:50:49.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（下）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（下）","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false},"next_post":{"title":"C语言程序设计（第二版）知识点总结(上)","uid":"0a53341be894f519839526451962b94e","slug":"C语言程序设计（第二版）知识点总结（上）","date":"2022-01-10T02:01:04.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（上）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（上）","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false}}