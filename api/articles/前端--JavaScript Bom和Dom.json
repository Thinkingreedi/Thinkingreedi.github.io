{"title":"JavaScript高级开发必备：Bom和Dom全解析","uid":"e5530224ca8e131eb4d30d06bd108a65","slug":"前端--JavaScript Bom和Dom","date":"2022-12-23T13:17:23.000Z","updated":"2025-07-14T15:12:20.463Z","comments":true,"path":"api/articles/前端--JavaScript Bom和Dom.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/de6c1a55cf774f9fa1e2cff7c25e5fc9.png","content":"<h1 id=\"JavaScript-Bom和Dom\"><a href=\"#JavaScript-Bom和Dom\" class=\"headerlink\" title=\"JavaScript Bom和Dom\"></a>JavaScript Bom和Dom</h1><h2 id=\"1、Web-API-基本认知\"><a href=\"#1、Web-API-基本认知\" class=\"headerlink\" title=\"1、Web API 基本认知\"></a>1、Web API 基本认知</h2><p><img src=\"https://img-blog.csdnimg.cn/388cf6af4cc4440fb6bed06a6daf2777.png#pic_center\"></p>\n<ul>\n<li>APl (Application Programming Interface,应用程序编程接口)是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。简单理解:<strong>API是给程序员提供的一种工具，以便能更轻松的实现想要完成的功能</strong></li>\n<li>Web API是浏览器提供的一套操作浏览器功能和页面元素的API( BOM和DOM )</li>\n<li>MDN 详细 API : <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API\">https://developer.mozilla.org/zh-CN/docs/Web/API</a></li>\n</ul>\n<h2 id=\"2、DOM-–-基础\"><a href=\"#2、DOM-–-基础\" class=\"headerlink\" title=\"2、DOM – 基础\"></a>2、DOM – 基础</h2><h3 id=\"2-1-DOM简介\"><a href=\"#2-1-DOM简介\" class=\"headerlink\" title=\"2.1 DOM简介\"></a>2.1 DOM简介</h3><ul>\n<li>文档对象模型（Document Object Model，简称DOM)，是W3C组织推荐的处理可扩展标记语言(HTML或者XML)的标准编程接口</li>\n<li>W3C已经定义了一系列的DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式</li>\n<li>DOM树：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/b85698e6e04c428dbaa420014799218c.png#pic_center\"></p>\n<ul>\n<li><p>文档:一个页面就是一个文档，DOM中使用document表示</p>\n</li>\n<li><p>元素:页面中的所有标签都是元素，DOM中使用element表示</p>\n</li>\n<li><p>节点:网页中的所有内容都是节点(标签、属性、文本、注释等)，DOM中使用node表示</p>\n</li>\n<li><p><strong>DOM把以上内容都看做是对象</strong></p>\n</li>\n</ul>\n<h3 id=\"2-2-获取元素\"><a href=\"#2-2-获取元素\" class=\"headerlink\" title=\"2.2 获取元素\"></a>2.2 获取元素</h3><p><strong>根据ID获取</strong></p>\n<ul>\n<li><p>使用**getElementByld()**方法可以获取带有ID的元素对象</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div id=&quot;time&quot;&gt;2019-9-9&lt;/div&gt;\n    &lt;script&gt;\n        // 1. 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面\n        // 2. get 获得 element 元素 by 通过 驼峰命名法 \n        // 3. 参数 id是大小写敏感的字符串\n        // 4. 返回的是一个元素对象\n        var timer = document.getElementById(&#39;time&#39;);\n        console.log(timer);\n        console.log(typeof timer);\n        // 5. console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法\n        console.dir(timer);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>根据标签名获取</strong></p>\n<ul>\n<li><p>使用**getElementsByTagName()**方法可以返回带有指定标签名的对象的集合</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;ul&gt;\n        &lt;li&gt;知否知否，应是等你好久11&lt;/li&gt;\n        &lt;li&gt;知否知否，应是等你好久22&lt;/li&gt;\n        &lt;li&gt;知否知否，应是等你好久33&lt;/li&gt;\n        &lt;li&gt;知否知否，应是等你好久44&lt;/li&gt;\n\n    &lt;/ul&gt;\n    &lt;ol id=&quot;ol&quot;&gt;\n        &lt;li&gt;生僻字&lt;/li&gt;\n        &lt;li&gt;生僻字&lt;/li&gt;\n        &lt;li&gt;生僻字&lt;/li&gt;\n        &lt;li&gt;生僻字&lt;/li&gt;\n\n    &lt;/ol&gt;\n\n    &lt;script&gt;\n        // 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的\n        var lis = document.getElementsByTagName(&#39;li&#39;);\n        console.log(lis);\n        console.log(lis[0]);\n        // 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式\n        for (var i = 0; i &lt; lis.length; i++) &#123;\n            console.log(lis[i]);\n\n        &#125;\n        // 3. 如果页面中只有一个li 返回的还是伪数组的形式 \n        // 4. 如果页面中没有这个元素 返回的是空的伪数组的形式\n        // 5. element.getElementsByTagName(&#39;标签名&#39;); 父元素必须是指定的单个元素\n        // var ol = document.getElementsByTagName(&#39;ol&#39;); // [ol]\n        // console.log(ol[0].getElementsByTagName(&#39;li&#39;));\n        var ol = document.getElementById(&#39;ol&#39;);\n        console.log(ol.getElementsByTagName(&#39;li&#39;));\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>注意：<ol>\n<li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li>\n<li>得到元素对象是动态的</li>\n<li>如果获取不到元素,则返回为空的伪数组(因为获取不到对象)</li>\n<li>父元素必须是单个对象(必须指明是哪一个元素对象).获取的时候不包括父元素自己</li>\n</ol>\n</li>\n</ul>\n<p><strong>通过HTML5新增的方法获取</strong></p>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div class=&quot;box&quot;&gt;盒子1&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;盒子2&lt;/div&gt;\n    &lt;div id=&quot;nav&quot;&gt;\n        &lt;ul&gt;\n            &lt;li&gt;首页&lt;/li&gt;\n            &lt;li&gt;产品&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        // 1. getElementsByClassName 根据类名获得某些元素集合\n        var boxs = document.getElementsByClassName(&#39;box&#39;);\n        console.log(boxs);\n        // 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav\n        var firstBox = document.querySelector(&#39;.box&#39;);\n        console.log(firstBox);\n        var nav = document.querySelector(&#39;#nav&#39;);\n        console.log(nav);\n        var li = document.querySelector(&#39;li&#39;);\n        console.log(li);\n        // 3. querySelectorAll()返回指定选择器的所有元素对象集合\n        var allBox = document.querySelectorAll(&#39;.box&#39;);\n        console.log(allBox);\n        var lis = document.querySelectorAll(&#39;li&#39;);\n        console.log(lis);\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>注意：querySelector和 queryselectorAll里面的选择器需要加符号,比如:document.querySelector ( ‘#nav’)</li>\n</ul>\n<p><strong>特殊元素获取</strong></p>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;script&gt;\n        // 1.获取body 元素\n        var bodyEle = document.body;\n        console.log(bodyEle);\n        console.dir(bodyEle);\n        // 2.获取html 元素\n        // var htmlEle = document.html;\n        var htmlEle = document.documentElement;\n        console.log(htmlEle);\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"2-3-事件基础\"><a href=\"#2-3-事件基础\" class=\"headerlink\" title=\"2.3 事件基础\"></a>2.3 事件基础</h3><ul>\n<li>JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为。简单理解:触发—响应机制</li>\n<li>事件三要素：<ol>\n<li>事件源</li>\n<li>事件类型</li>\n<li>事件处理程序</li>\n</ol>\n</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button id=&quot;btn&quot;&gt;唐伯虎&lt;/button&gt;\n    &lt;script&gt;\n        // 点击一个按钮，弹出对话框\n        //(1) 事件源 事件被触发的对象   谁  按钮\n        var btn = document.getElementById(&#39;btn&#39;);\n        //(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下\n        //(3) 事件处理程序  通过一个函数赋值的方式 完成\n        btn.onclick = function () &#123;\n            alert(&#39;点秋香&#39;);\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>执行事件步骤：<ol>\n<li>获取事件源</li>\n<li>注册事件(绑定事件)</li>\n<li>添加事件处理程序(采用函数赋值形式)</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-4-操作元素\"><a href=\"#2-4-操作元素\" class=\"headerlink\" title=\"2.4 操作元素\"></a>2.4 操作元素</h3><ul>\n<li>Javascript 的 DOM操作可以改变网页内容、结构和样式，我们可以利用DOM操作元索来改变元素里面的内容、属性等。注意以下都是属性</li>\n</ul>\n<p><strong>改变元素内容</strong></p>\n<ul>\n<li>element.innerText:从起始位置到终止位置的内容,<strong>但它去除 html标签</strong>，同时<strong>空格和换行</strong>也会去掉</li>\n<li>element.innerHTML:起始位置到终止位置的全部内容，<strong>包括html 标签</strong>，同时保留<strong>空格和换行</strong></li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;显示当前系统时间&lt;/button&gt;\n    &lt;div&gt;某个时间&lt;/div&gt;\n    &lt;p&gt;1123&lt;/p&gt;\n    &lt;script&gt;\n        // 当我们点击了按钮，  div里面的文字会发生变化\n        // 1. 获取元素 \n        var btn = document.querySelector(&#39;button&#39;);\n        var div = document.querySelector(&#39;div&#39;);\n        // 2.注册事件\n        btn.onclick = function() &#123;\n            // div.innerText = &#39;2019-6-6&#39;;\n            div.innerHTML = getDate();\n        &#125;\n\n        function getDate() &#123;\n            var date = new Date();\n            // 我们写一个 2019年 5月 1日 星期三\n            var year = date.getFullYear();\n            var month = date.getMonth() + 1;\n            var dates = date.getDate();\n            var arr = [&#39;星期日&#39;, &#39;星期一&#39;, &#39;星期二&#39;, &#39;星期三&#39;, &#39;星期四&#39;, &#39;星期五&#39;, &#39;星期六&#39;];\n            var day = date.getDay();\n            return &#39;今天是：&#39; + year + &#39;年&#39; + month + &#39;月&#39; + dates + &#39;日 &#39; + arr[day];\n        &#125;\n        // 3.我们元素可以不用添加事件\n        var p = document.querySelector(&#39;p&#39;);\n        p.innerHTML = getDate();\n    &lt;/script&gt;\n</code></pre>\n<p><strong>常见元素的属性操作</strong></p>\n<ol>\n<li>innerText、innerHTML。改变元素内容</li>\n<li>src、href</li>\n<li>id、alt、title</li>\n</ol>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button id=&quot;ldh&quot;&gt;刘德华&lt;/button&gt;\n    &lt;button id=&quot;zxy&quot;&gt;张学友&lt;/button&gt; &lt;br&gt;\n    &lt;img src=&quot;images/ldh.jpg&quot; alt=&quot;&quot; title=&quot;刘德华&quot;&gt;\n\n    &lt;script&gt;\n        // 修改元素属性  src\n        // 1. 获取元素\n        var ldh = document.getElementById(&#39;ldh&#39;);\n        var zxy = document.getElementById(&#39;zxy&#39;);\n        var img = document.querySelector(&#39;img&#39;);\n        // 2. 注册事件  处理程序\n        zxy.onclick = function () &#123;\n            img.src = &#39;images/zxy.jpg&#39;;\n            img.title = &#39;张学友&#39;;\n        &#125;\n        ldh.onclick = function () &#123;\n            img.src = &#39;images/ldh.jpg&#39;;\n            img.title = &#39;刘德华&#39;;\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>表单元素的属性操作</strong></p>\n<ul>\n<li><p>利用DOM可以操作如下表单元素的属性:type、value、checked、selected、disabled</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;按钮&lt;/button&gt;\n    &lt;input type=&quot;text&quot; value=&quot;输入内容&quot;&gt;\n    &lt;script&gt;\n        // 1. 获取元素\n        var btn = document.querySelector(&#39;button&#39;);\n        var input = document.querySelector(&#39;input&#39;);\n        // 2. 注册事件 处理程序\n        btn.onclick = function() &#123;\n            // input.innerHTML = &#39;点击了&#39;;  这个是 普通盒子 比如 div 标签里面的内容\n            // 表单里面的值 文字内容是通过 value 来修改的\n            input.value = &#39;被点击了&#39;;\n            // 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用\n            // btn.disabled = true;\n            this.disabled = true;\n            // this 指向的是事件函数的调用者 btn\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>仿京东显示密码代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div class=&quot;box&quot;&gt;\n        &lt;label for=&quot;&quot;&gt;\n            &lt;img src=&quot;images/close.png&quot; alt=&quot;&quot; id=&quot;eye&quot;&gt;\n        &lt;/label&gt;\n        &lt;input type=&quot;password&quot; name=&quot;&quot; id=&quot;pwd&quot;&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        var eye = document.getElementById(&#39;eye&#39;);\n        var pwd = document.getElementById(&#39;pwd&#39;);\n\n        var flag = 0;\n        eye.onclick = function () &#123;\n            if (flag == 0) &#123;\n                pwd.type = &#39;text&#39;;\n                eye.scr = &#39;imagrs/open.png&#39;;\n                flag = 1;\n            &#125; else &#123;\n                pwd.type = &#39;password&#39;;\n                eye.scr = &#39;imagrs/close.png&#39;;\n                flag = 0;\n            &#125;\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>样式属性操作</strong></p>\n<ul>\n<li><p>我们可以通过JS修改元素的大小、颜色、位置等样式。</p>\n<ol>\n<li>element.style \t行内样式操作</li>\n<li>element.className     类名样式操作</li>\n</ol>\n</li>\n<li><p>注意:</p>\n<ol>\n<li>JS里面的样式采取驼峰命名法比如fontsize、backgroundcolor</li>\n<li>JS修改style样式操作，产生的是行内样式，css权重比较高</li>\n<li>如果样式修改较多，可以采取操作类名方式更改元紊样式</li>\n<li>class因为是个保留字，因此使用className来操作元素类名属性</li>\n<li>className会直接更改元素的类名，会覆盖原先的类名</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        div &#123;\n            width: 200px;\n            height: 200px;\n            background-color: pink;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;script&gt;\n        // 1. 获取元素\n        var div = document.querySelector(&#39;div&#39;);\n        // 2. 注册事件 处理程序\n        div.onclick = function () &#123;\n            // div.style里面的属性 采取驼峰命名法 \n            this.style.backgroundColor = &#39;purple&#39;;\n            this.style.width = &#39;250px&#39;;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        div &#123;\n            width: 100px;\n            height: 100px;\n            background-color: pink;\n        &#125;\n\n        .change &#123;\n            background-color: purple;\n            color: #fff;\n            font-size: 25px;\n            margin-top: 100px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n\n&lt;body&gt;\n    &lt;div class=&quot;first&quot;&gt;文本&lt;/div&gt;\n    &lt;script&gt;\n        // 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用\n        var test = document.querySelector(&#39;div&#39;);\n        test.onclick = function () &#123;\n            // 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况\n            // 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器\n            this.className = &#39;change&#39;;\n            this.className = &#39;first change&#39;;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/166c8198de704e1791326a4e7d749f85.png#pic_center\"></p>\n<p><strong>排他思想</strong></p>\n<ul>\n<li><p>如果有同—组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法:</p>\n<ol>\n<li>所有元素全部清除样式（干掉其他人)</li>\n<li>给当前元素设置样式(留下我自己)</li>\n<li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;按钮1&lt;/button&gt;\n    &lt;button&gt;按钮2&lt;/button&gt;\n    &lt;button&gt;按钮3&lt;/button&gt;\n    &lt;button&gt;按钮4&lt;/button&gt;\n    &lt;button&gt;按钮5&lt;/button&gt;\n    &lt;script&gt;\n        // 1. 获取所有按钮元素\n        var btns = document.getElementsByTagName(&#39;button&#39;);\n        // btns得到的是伪数组  里面的每一个元素 btns[i]\n        for (var i = 0; i &lt; btns.length; i++) &#123;\n            btns[i].onclick = function() &#123;\n                // (1) 我们先把所有的按钮背景颜色去掉  干掉所有人\n                for (var i = 0; i &lt; btns.length; i++) &#123;\n                    btns[i].style.backgroundColor = &#39;&#39;;\n                &#125;\n                // (2) 然后才让当前的元素背景颜色为pink 留下我自己\n                this.style.backgroundColor = &#39;pink&#39;;\n\n            &#125;\n        &#125;\n        //2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想\n    &lt;/script&gt;\n</code></pre>\n<p><strong>自定义属性的操作</strong></p>\n<ol>\n<li>获取属性值<ul>\n<li>element.属性\t\t获取属性值。</li>\n<li>element.getAttribute(‘属性’);</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>区别:<ul>\n<li>element.属性\t获取<strong>内置属性值(元素本身自带的属性)</strong></li>\n<li>element.getAttribute ( ‘属性’);\t主要获得<strong>自定义的属性(标准)我们程序员自定义的属性</strong></li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>设置属性值</p>\n<ul>\n<li><p>element.属性&#x3D;‘值’\t\t设置内置属性值</p>\n</li>\n<li><p>element.setAttribute(‘属性’，’值”);</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>区别:<ul>\n<li>element.属性\t设置内置属性值</li>\n<li>element.setAttribute ( ‘属性’); 主要设置自定义的属性(标准)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>移除属性<ul>\n<li>element.removeAttribute(‘属性’)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div id=&quot;demo&quot; index=&quot;1&quot; class=&quot;nav&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var div = document.querySelector(&#39;div&#39;);\n        // 1. 获取元素的属性值\n        // (1) element.属性\n        console.log(div.id);\n        //(2) element.getAttribute(&#39;属性&#39;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index\n        console.log(div.getAttribute(&#39;id&#39;));\n        console.log(div.getAttribute(&#39;index&#39;));\n        \n        // 2. 设置元素属性值\n        // (1) element.属性= &#39;值&#39;\n        div.id = &#39;test&#39;;\n        div.className = &#39;navs&#39;;\n        // (2) element.setAttribute(&#39;属性&#39;, &#39;值&#39;);  主要针对于自定义属性\n        div.setAttribute(&#39;index&#39;, 2);\n        div.setAttribute(&#39;class&#39;, &#39;footer&#39;); // class 特殊  这里面写的就是class 不是className\n        \n        // 3 移除属性 removeAttribute(属性)    \n        div.removeAttribute(&#39;index&#39;);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>H5自定义属性</strong></p>\n<ul>\n<li><p>自定义属性目的:是为了保存并使用数据； 有些数据可以保存到页面中而不用保存到数据库中</p>\n</li>\n<li><p>自定义属性获取是通过getAttribute( 属性)获取。</p>\n</li>\n<li><p>1.设置H5自定义属性</p>\n<ul>\n<li>H5规定自定义属性 **data- **开头做为属性名并且赋值。比如&lt;div data-index&#x3D; “1”&gt; &lt; &#x2F;div&gt;；或者使用JS设置element.setAttribute( ‘data-index’ ,2)</li>\n</ul>\n</li>\n<li><p>2.获取H5自定义属性</p>\n<ul>\n<li>兼容性获取\telement.getAttribute( ‘data-index’ );</li>\n<li>H5新增element.dataset.index或者element.dataset[‘index’ ] <strong>ie 11才开始支持</strong></li>\n</ul>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div getTime=&quot;20&quot; data-index=&quot;2&quot; data-list-name=&quot;andy&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var div = document.querySelector(&#39;div&#39;);\n        // console.log(div.getTime);\n        console.log(div.getAttribute(&#39;getTime&#39;));\n        div.setAttribute(&#39;data-time&#39;, 20);\n        console.log(div.getAttribute(&#39;data-index&#39;));\n        console.log(div.getAttribute(&#39;data-list-name&#39;));\n        // h5新增的获取自定义属性的方法 它只能获取data-开头的\n        // dataset 是一个集合里面存放了所有以data开头的自定义属性\n        console.log(div.dataset);\n        console.log(div.dataset.index);\n        console.log(div.dataset[&#39;index&#39;]);\n        // 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法\n        console.log(div.dataset.listName);\n        console.log(div.dataset[&#39;listName&#39;]);\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"2-5-节点操作\"><a href=\"#2-5-节点操作\" class=\"headerlink\" title=\"2.5 节点操作\"></a>2.5 节点操作</h3><ul>\n<li>获取元素通常使用两种方式<ol>\n<li>利用DOM提供的方法获取元素 – 逻辑性不强，繁琐</li>\n<li>利用节点层级关系获取元素 – 利用父子兄节点关系获取元素，逻辑性强，兼容性稍差</li>\n</ol>\n</li>\n</ul>\n<p><strong>节点概述</strong></p>\n<ul>\n<li>网页中的所有内容都是节点(标签、属性、文本、注释等)，在DOM中，节点使用node 来表示</li>\n<li>HTML DOM树中的所有节点均可通过JavaScript进行访问，所有HTML元素(节点)均可被修改，也可以创建或删除</li>\n<li>一般地，节点至少拥有<strong>nodeType (节点类型)<strong>、</strong>nodeName(节点名称）</strong>和**nodeValue(节点值)**这三个基本属性</li>\n<li>元素节点    nodeType 为1</li>\n<li>属性节点    nodeType 为2</li>\n<li>文本节点    nodeType 为3 (文本节点包含文字、空格、换行等)</li>\n<li>我们在实际开发中，节点操作主要操作的是元素节点</li>\n</ul>\n<p><strong>节点层次</strong></p>\n<ul>\n<li>利用DOM树可以把节点划分为不同的层级关系，常见的是父子兄层级关系</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/53f70a47a91b42c980dcea88ed87730b.png#pic_center\"></p>\n<ul>\n<li><p>1.父级节点 – node.parentNode</p>\n<ul>\n<li>parentNode属性可返回某节点的父节点，注意是<strong>最近的一个父节点</strong></li>\n<li>如果指定的节点没有父节点则返回null</li>\n</ul>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div class=&quot;demo&quot;&gt;\n        &lt;div class=&quot;box&quot;&gt;\n            &lt;span class=&quot;erweima&quot;&gt;×&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // 1. 父节点 parentNode\n        var erweima = document.querySelector(&#39;.erweima&#39;);\n        // var box = document.querySelector(&#39;.box&#39;);\n        // 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null\n        console.log(erweima.parentNode);\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li><p>2.1子节点 – parentNode.childNodes(标准)</p>\n<ul>\n<li>parentNode.childNodes返回包含指定节点的子节点的集合，该集合为即时更新的集合</li>\n<li>注意:返回值里面包含了所有的子节点，包括元素节点，文本节点等</li>\n<li>如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用childNodes</li>\n</ul>\n</li>\n<li><p>2.2子节点 – parentNode.children (非标准)</p>\n<ul>\n<li>parentNode.children是一个只读属性，返回所有的子元素节点。<strong>它只返回子元素节点，其余节点不返回</strong>(这个是我们重点掌握的)</li>\n<li>虽然children是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</li>\n</ul>\n</li>\n<li><p>2.3子节点 – parentNode.firstchild</p>\n<ul>\n<li>firstChild返回第一个子节点，找不到则返回null。同样，也是包含所有的节点</li>\n</ul>\n</li>\n<li><p>2.4子节点 – parentNode. lastChild</p>\n<ul>\n<li>lastChild返回最后一个子节点，找不到则返回null。同样，也是包含所有的节点</li>\n</ul>\n</li>\n<li><p>2.5子节点 – parentNode.firstElementChild</p>\n<ul>\n<li>firstElementchild返回第一个子元素节点，找不到则返回null</li>\n<li>注意:这个方法有兼容性问题，IE9以上才支持</li>\n</ul>\n</li>\n<li><p>2.6子节点 – parentNode . lastElementchild</p>\n<ul>\n<li>lastElementchild返回最后一个子元素节点，找不到则返回null</li>\n<li>注意:这个方法有兼容性问题，IE9以上才支持</li>\n</ul>\n</li>\n<li><p>实际开发中，firstChild和lastChild包含其他节点，操作不方便，而firstElementChild和lastElementChild又有兼容性问题<br>1．如果想要第一个子元素节点，可以使用<strong>parentNode.chilren[0]</strong><br>2．如果想要最后一个子元素节点，可以使用<strong>parentNode.chilren[parentNode.chilren.length - 1]</strong></p>\n</li>\n<li><p>3.1兄弟节点 – node.nextSibling</p>\n<ul>\n<li>nextSibling返回当前元素的下一个兄弟元素节点，找不到则返回null。同样，也是包含所有的节点</li>\n</ul>\n</li>\n<li><p>3.2兄弟节点 – node.previousSibling</p>\n<ul>\n<li>previousSibling 返回当前元素上一个兄弟元素节点，找不到则返回null。同样，也是包含所有的节点</li>\n</ul>\n</li>\n<li><p>3.3兄弟节点 – node.nextElementSibling</p>\n<ul>\n<li>nextElementsibling返回当前元素下一个兄弟元素节点，找不到则返回null</li>\n<li>注意:这个方法有兼容性问题，IE9以上才支持</li>\n</ul>\n</li>\n<li><p>3.4兄弟节点 – node.previousElementsibling</p>\n<ul>\n<li>previousElementsibling返回当前元素上一个兄弟节点，找不到则返回null</li>\n<li>注意:这个方法有兼容性问题，IE9以上才支持</li>\n</ul>\n</li>\n<li><p>兼容性函数代码</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">   function getNextElementSibling(element) &#123;\n      var el = element;\n      while (el = el.nextSibling) &#123;\n        if (el.nodeType === 1) &#123;\n            return el;\n        &#125;\n      &#125;\n      return null;\n    &#125;  \n</code></pre>\n<p><strong>创建节点</strong></p>\n<ul>\n<li>document.createElement ( “tagName “ )</li>\n<li>document.createElement()方法创建由tagName 指定的HTML元素。因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点</li>\n</ul>\n<p><strong>添加节点</strong></p>\n<ul>\n<li><p>node. appendchild (child)</p>\n<ul>\n<li>node.appendChild()方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。类似于css里面的after 伪元素</li>\n</ul>\n</li>\n<li><p>node . insertBefore (child，指定元素)</p>\n<ul>\n<li>node.insertBefore(）方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。类似于css里面的 before伪元素</li>\n</ul>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;ul&gt;\n        &lt;li&gt;123&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        // 1. 创建节点元素节点\n        var li = document.createElement(&#39;li&#39;);\n        // 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push\n        var ul = document.querySelector(&#39;ul&#39;);\n        ul.appendChild(li);\n        // 3. 添加节点 node.insertBefore(child, 指定元素);\n        var lili = document.createElement(&#39;li&#39;);\n        ul.insertBefore(lili, ul.children[0]);\n        // 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素\n    &lt;/script&gt;\n</code></pre>\n<p><strong>删除节点</strong></p>\n<ul>\n<li>node . removeChild (child)<ul>\n<li>node.removechild()方法从DOM中删除一个子节点，返回删除的节点</li>\n</ul>\n</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;删除&lt;/button&gt;\n    &lt;ul&gt;\n        &lt;li&gt;熊大&lt;/li&gt;\n        &lt;li&gt;熊二&lt;/li&gt;\n        &lt;li&gt;光头强&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        // 1.获取元素\n        var ul = document.querySelector(&#39;ul&#39;);\n        var btn = document.querySelector(&#39;button&#39;);\n        // 2. 删除元素  node.removeChild(child)\n        // ul.removeChild(ul.children[0]);\n        // 3. 点击按钮依次删除里面的孩子\n        btn.onclick = function() &#123;\n            if (ul.children.length == 0) &#123;\n                this.disabled = true;\n            &#125; else &#123;\n                ul.removeChild(ul.children[0]);\n            &#125;\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>阻止链接跳转需要添加javascript:void(0);或者javascript:;</li>\n</ul>\n<p><strong>复制节点</strong></p>\n<ul>\n<li><p>node.cloneNode ( )</p>\n<ul>\n<li>node.cloneNode()方法返回调用该方法的节点的一个副本。也称为克隆节点&#x2F;拷贝节点</li>\n</ul>\n</li>\n<li><p>注意：</p>\n<ol>\n<li>如果括号参数为<strong>空或者为false</strong>，则是<strong>浅拷贝</strong>，即只克隆复制节点本身，不克隆里面的子节点</li>\n<li>如果括号参数为<strong>true</strong>，则是<strong>深度拷贝</strong>，会复制节点本身以及里面所有的子节点</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li&gt;2&lt;/li&gt;\n        &lt;li&gt;3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        var ul = document.querySelector(&#39;ul&#39;);\n        // 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容\n        // 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容\n        var lili = ul.children[0].cloneNode(true);\n        ul.appendChild(lili);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>三种动态创建元素区别</strong></p>\n<ul>\n<li><p>document.write ()</p>\n</li>\n<li><p>element.innerHTML</p>\n</li>\n<li><p>document.createElement ()</p>\n</li>\n<li><p>区别</p>\n<ol>\n<li><p>document.write 是直接将内容写入页面的内容流，<strong>但是文档流执行完毕，则它会导致页面全部重绘</strong></p>\n</li>\n<li><p>innerHTML是将内容写入某个DOM节点，不会导致页面全部重绘</p>\n</li>\n<li><p>innerHTML创建多个元素效率更高(不要拼接字符串，采取数组形式拼接)，结构稍微复杂</p>\n</li>\n<li><p>createElement ()创建多个元素效率稍低—点点，但是结构更清晰</p>\n</li>\n</ol>\n</li>\n<li><p>总结:不同浏览器下, innerHTML效率要比creatElement高</p>\n</li>\n</ul>\n<h3 id=\"2-6-DOM重点核心\"><a href=\"#2-6-DOM重点核心\" class=\"headerlink\" title=\"2.6 DOM重点核心\"></a>2.6 DOM重点核心</h3><ul>\n<li>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作</li>\n</ul>\n<p><strong>创建</strong></p>\n<ol>\n<li>document.write</li>\n<li>innerHTML</li>\n<li>createElement</li>\n</ol>\n<p><strong>增</strong></p>\n<ol>\n<li>appendChild</li>\n<li>insertBefore</li>\n</ol>\n<p><strong>删</strong></p>\n<ol>\n<li>removeChild</li>\n</ol>\n<p><strong>改</strong></p>\n<ul>\n<li>主要修改dom的元素属性。dom元素的内容、属性,表单的值等<ol>\n<li>修改元素属性:src. href、 title等</li>\n<li>修改普通元素内容:innerHTML . innerText</li>\n<li>修改表单元索:value. type.disabled等</li>\n<li>修改元素样式:style. className</li>\n</ol>\n</li>\n</ul>\n<p><strong>查</strong></p>\n<ul>\n<li>主要获取查询dom的元素<ol>\n<li>DOM提供的API方法: getElementByld.getElementsByTagName 古老用法不太推荐</li>\n<li>H5提供的新方法: querySelector.querySelectorAll提倡</li>\n<li>利用节点操作获取元素:父(parentNode)、子(children)、兄(previousElementSibling、nextElementsibling)提倡</li>\n</ol>\n</li>\n</ul>\n<p><strong>属性操作</strong></p>\n<ul>\n<li>主要针对于自定义属性<ol>\n<li>setAttribute:设置dom的属性值</li>\n<li>getAttribute:得到dom的属性值</li>\n<li>removeAttribute移除属性</li>\n</ol>\n</li>\n</ul>\n<p><strong>事件操作</strong></p>\n<ul>\n<li>给元素注册事件,采取事件源.事件类型&#x3D;事件处理程序</li>\n</ul>\n<h2 id=\"3、DOM-–-事件高级\"><a href=\"#3、DOM-–-事件高级\" class=\"headerlink\" title=\"3、DOM – 事件高级\"></a>3、DOM – 事件高级</h2><h3 id=\"3-1-注册事件-绑定事件\"><a href=\"#3-1-注册事件-绑定事件\" class=\"headerlink\" title=\"3.1 注册事件(绑定事件)\"></a>3.1 注册事件(绑定事件)</h3><p><strong>注册事件</strong></p>\n<ul>\n<li>给元素添加事件，称为注册事件或者绑定事件，注册事件有两种方式:<ol>\n<li>传统注册方式<ul>\n<li>利用on开头的事件：onclick</li>\n<li>注册事件的唯一性</li>\n<li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li>\n</ul>\n</li>\n<li>方法监听注册方式<ul>\n<li>addEventListener()它是一个方法</li>\n<li>特点:同一个元素同一个事件可以注册多个监听器；按注册顺序依次执行</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>addEventListener 事件监听方式</strong> </p>\n<ul>\n<li><p>eventTarget.addEventListener(type, listener[, useCapture]) </p>\n</li>\n<li><p>type:事件类型字符串，比如click 、mouseover，注意这里<strong>不要带on</strong></p>\n</li>\n<li><p>listener:事件处理函数，事件发生时，会调用该监听函数</p>\n</li>\n<li><p>useCapture:可选参数，是一个布尔值，默认是false</p>\n</li>\n</ul>\n<p><strong>attachEvent 事件监听方式</strong> (IE8及早期版本支持)</p>\n<ul>\n<li><p>eventTarget.attachEvent(eventNameWithOn, callback) </p>\n</li>\n<li><p>eventNameWithOn:事件类型字符串，比如onclick 、onmouseover，这里要<strong>带 on</strong></p>\n</li>\n<li><p>callback:事件处理函数，当目标触发事件时回调函数被调</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;传统注册事件&lt;/button&gt;\n    &lt;button&gt;方法监听注册事件&lt;/button&gt;\n    &lt;button&gt;ie9 attachEvent&lt;/button&gt;\n    &lt;script&gt;\n        var btns = document.querySelectorAll(&#39;button&#39;);\n        // 1. 传统方式注册事件\n        btns[0].onclick = function () &#123;\n            alert(&#39;hi&#39;);\n        &#125;\n        btns[0].onclick = function () &#123;\n            alert(&#39;hao a u&#39;);\n        &#125;\n        // 2. 事件侦听注册事件 addEventListener \n        // (1) 里面的事件类型是字符串 必定加引号 而且不带on\n        // (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）\n        btns[1].addEventListener(&#39;click&#39;, function () &#123;\n            alert(22);\n        &#125;)\n        btns[1].addEventListener(&#39;click&#39;, function () &#123;\n            alert(33);\n        &#125;)\n        // 3. attachEvent ie9以前的版本支持\n        btns[2].attachEvent(&#39;onclick&#39;, function () &#123;\n            alert(11);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<p><strong>注册事件兼容性解决方案</strong> </p>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"javascript\"> function addEventListener(element, eventName, fn) &#123;\n      // 判断当前浏览器是否支持 addEventListener 方法\n      if (element.addEventListener) &#123;\n        element.addEventListener(eventName, fn);  // 第三个参数 默认是false\n      &#125; else if (element.attachEvent) &#123;\n        element.attachEvent(&#39;on&#39; + eventName, fn);\n      &#125; else &#123;\n        // 相当于 element.onclick = fn;\n        element[&#39;on&#39; + eventName] = fn;\n &#125; \n</code></pre>\n<h3 id=\"3-2-删除事件-解绑事件\"><a href=\"#3-2-删除事件-解绑事件\" class=\"headerlink\" title=\"3.2 删除事件(解绑事件)\"></a>3.2 删除事件(解绑事件)</h3><ol>\n<li><p>传统注册方式</p>\n<ul>\n<li>eventTarget.onclick &#x3D; null;</li>\n</ul>\n</li>\n<li><p>方法监听注册方式</p>\n<ul>\n<li>①eventTarget.removeEventListener(type, listener[, useCapture]);</li>\n<li>②eventTarget.detachEvent(eventNameWithOn, callback);</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div&gt;1&lt;/div&gt;\n    &lt;div&gt;2&lt;/div&gt;\n    &lt;div&gt;3&lt;/div&gt;\n    &lt;script&gt;\n        var divs = document.querySelectorAll(&#39;div&#39;);\n        divs[0].onclick = function() &#123;\n                alert(11);\n                // 1. 传统方式删除事件\n                divs[0].onclick = null;\n            &#125;\n            // 2. removeEventListener 删除事件\n        divs[1].addEventListener(&#39;click&#39;, fn) // 里面的fn 不需要调用加小括号\n\n        function fn() &#123;\n            alert(22);\n            divs[1].removeEventListener(&#39;click&#39;, fn);\n        &#125;\n        // 3. detachEvent\n        divs[2].attachEvent(&#39;onclick&#39;, fn1);\n\n        function fn1() &#123;\n            alert(33);\n            divs[2].detachEvent(&#39;onclick&#39;, fn1);\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>删除事件兼容性解决方案</strong> </p>\n<pre><code class=\"JavaScript\"> function removeEventListener(element, eventName, fn) &#123;\n      // 判断当前浏览器是否支持 removeEventListener 方法\n      if (element.removeEventListener) &#123;\n        element.removeEventListener(eventName, fn);  // 第三个参数 默认是false\n      &#125; else if (element.detachEvent) &#123;\n        element.detachEvent(&#39;on&#39; + eventName, fn);\n      &#125; else &#123;\n        element[&#39;on&#39; + eventName] = null;\n &#125; \n</code></pre>\n<h3 id=\"3-3-DOM事件流\"><a href=\"#3-3-DOM事件流\" class=\"headerlink\" title=\"3.3 DOM事件流\"></a>3.3 DOM事件流</h3><ul>\n<li>事件流描述的是从页面中接收事件的顺序</li>\n<li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/e97d2e84b8d34d88825ac9bcff55b416.png#pic_center\"></p>\n<ul>\n<li><p>DOM事件流分为3个阶段:</p>\n<ol>\n<li>捕获阶段</li>\n<li>当前目标阶段</li>\n<li>冒泡阶段</li>\n</ol>\n</li>\n<li><p><strong>事件冒泡</strong>:IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到DOM最顶层节点的过程(回溯)</p>\n</li>\n<li><p><strong>事件捕获</strong>:网景最早提出，由DOM最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程(自顶向下)</p>\n</li>\n<li><p>举例：我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点)的捕获过程;之后会产生泡泡，会在最低点（最具体元素)之后漂浮到水面上，这个过程相当于事件冒泡</p>\n</li>\n<li><p><strong>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</strong></p>\n</li>\n<li><p>注意</p>\n<ol>\n<li>JS 代码中只能执行捕获或者冒泡其中的一个阶段</li>\n<li>onclick和attachEvent只能得到冒泡阶段</li>\n<li>addEventListener(type,listener[,useCapture])第三个参数如果是<strong>true</strong>，表示在事件<strong>捕获阶段调用事件处理程序</strong>;如果是 <strong>false (不写默认就是false)<strong>，表示在事件</strong>冒泡阶段调用事件处理程序</strong></li>\n<li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡</li>\n<li>有些事件是没有冒泡的，比如onblur、onfocus、onmouseenter、onmouseleave</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div class=&quot;father&quot;&gt;\n        &lt;div class=&quot;son&quot;&gt;son盒子&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        // dom 事件流 三个阶段\n        // 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。\n        // 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。\n        // 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son\n        // var son = document.querySelector(&#39;.son&#39;);\n        // son.addEventListener(&#39;click&#39;, function() &#123;\n        //     alert(&#39;son&#39;);\n        // &#125;, true);\n        // var father = document.querySelector(&#39;.father&#39;);\n        // father.addEventListener(&#39;click&#39;, function() &#123;\n        //     alert(&#39;father&#39;);\n        // &#125;, true);\n        // 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document\n        var son = document.querySelector(&#39;.son&#39;);\n        son.addEventListener(&#39;click&#39;, function () &#123;\n            alert(&#39;son&#39;);\n        &#125;, false);\n        var father = document.querySelector(&#39;.father&#39;);\n        father.addEventListener(&#39;click&#39;, function () &#123;\n            alert(&#39;father&#39;);\n        &#125;, false);\n        document.addEventListener(&#39;click&#39;, function () &#123;\n            alert(&#39;document&#39;);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"3-4-事件对象\"><a href=\"#3-4-事件对象\" class=\"headerlink\" title=\"3.4 事件对象\"></a>3.4 事件对象</h3><pre><code class=\"JavaScript\">  eventTarget.onclick = function(event) &#123;&#125; \n  eventTarget.addEventListener(&#39;click&#39;, function(event) &#123;&#125;）\n  // 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt \n</code></pre>\n<ul>\n<li>官方解释: event对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div&gt;123&lt;/div&gt;\n    &lt;script&gt;\n        // 事件对象\n        var div = document.querySelector(&#39;div&#39;);\n        div.onclick = function (e) &#123;\n            // console.log(e);\n            // console.log(window.event);\n            // e = e || window.event;\n            //事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;\n            console.log(e);\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>事件对象的常见属性和方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">事件对象属性方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">e.target</td>\n<td align=\"center\">返回触发事件的对象    标准</td>\n</tr>\n<tr>\n<td align=\"center\">e.srcElement</td>\n<td align=\"center\">返回触发事件的对象    非标准  ie6-8使用</td>\n</tr>\n<tr>\n<td align=\"center\">e.type</td>\n<td align=\"center\">返回事件的类型    比如click  mouseover  不带on</td>\n</tr>\n<tr>\n<td align=\"center\">e.cancelBubble</td>\n<td align=\"center\">该属性阻止冒泡 非标准 ie6-8使用</td>\n</tr>\n<tr>\n<td align=\"center\">e.returnValue</td>\n<td align=\"center\">该方法阻止默认事件(默认行为)    非标准  ie6-8使用  比如不让链接跳转</td>\n</tr>\n<tr>\n<td align=\"center\">e.preventDefault</td>\n<td align=\"center\">该方法阻止默认事件(默认行为)    标准  比如不让链接跳转</td>\n</tr>\n<tr>\n<td align=\"center\">e.stopPropagation</td>\n<td align=\"center\">阻止冒泡    标准</td>\n</tr>\n</tbody></table>\n<p><strong>target与this</strong></p>\n<pre><code class=\"html\">    &lt;div&gt;123&lt;/div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;abc&lt;/li&gt;\n        &lt;li&gt;abc&lt;/li&gt;\n        &lt;li&gt;abc&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        // 常见事件对象的属性和方法\n        // 1. e.target 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）\n        // 区别 ： e.target 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁\n        var div = document.querySelector(&#39;div&#39;);\n        div.addEventListener(&#39;click&#39;, function(e) &#123;\n            console.log(e.target);\n            console.log(this);\n\n        &#125;)\n        var ul = document.querySelector(&#39;ul&#39;);\n        ul.addEventListener(&#39;click&#39;, function(e) &#123;\n                // 我们给ul 绑定了事件  那么this 就指向ul  \n                console.log(this);\n                console.log(e.currentTarget);\n\n                // e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li\n                console.log(e.target);\n\n            &#125;)\n            // 了解兼容性\n            // div.onclick = function(e) &#123;\n            //     e = e || window.event;\n            //     var target = e.target || e.srcElement;\n            //     console.log(target);\n\n        // &#125;\n        // 2. 了解 跟 this 有个非常相似的属性 currentTarget  ie678不认识\n    &lt;/script&gt;\n</code></pre>\n<p><strong>返回事件类型和阻止默认行为</strong></p>\n<pre><code class=\"html\">    &lt;div&gt;123&lt;/div&gt;\n    &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;\n    &lt;form action=&quot;http://www.baidu.com&quot;&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;sub&quot;&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n        // 常见事件对象的属性和方法\n        // 1. 返回事件类型\n        var div = document.querySelector(&#39;div&#39;);\n        div.addEventListener(&#39;click&#39;, fn);\n        div.addEventListener(&#39;mouseover&#39;, fn);\n        div.addEventListener(&#39;mouseout&#39;, fn);\n\n        function fn(e) &#123;\n            console.log(e.type);\n\n        &#125;\n        // 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交\n        var a = document.querySelector(&#39;a&#39;);\n        a.addEventListener(&#39;click&#39;, function (e) &#123;\n            e.preventDefault(); //  dom 标准写法\n        &#125;)\n        // 3. 传统的注册方式\n        a.onclick = function (e) &#123;\n            // 普通浏览器 e.preventDefault();  方法\n            // e.preventDefault();\n            // 低版本浏览器 ie678  returnValue  属性\n            // e.returnValue;\n            // 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式\n            return false;\n            alert(11);\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>阻止事件冒泡</strong></p>\n<ul>\n<li><p>标准写法:利用事件对象里面的stopPropagation()方法</p>\n<ul>\n<li>e.stopPropagation ()</li>\n</ul>\n</li>\n<li><p>非标准写法:IE 6-8利用事件对象cancelBubble 属性</p>\n<ul>\n<li>e.cancelBubble &#x3D; true;</li>\n</ul>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div class=&quot;father&quot;&gt;\n        &lt;div class=&quot;son&quot;&gt;son儿子&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        // 常见事件对象的属性和方法\n        // 阻止冒泡  dom 推荐的标准 stopPropagation() \n        var son = document.querySelector(&#39;.son&#39;);\n        son.addEventListener(&#39;click&#39;, function(e) &#123;\n            alert(&#39;son&#39;);\n            e.stopPropagation(); // stop 停止  Propagation 传播\n            e.cancelBubble = true; // 非标准 cancel 取消 bubble 泡泡\n        &#125;, false);\n\n        var father = document.querySelector(&#39;.father&#39;);\n        father.addEventListener(&#39;click&#39;, function() &#123;\n            alert(&#39;father&#39;);\n        &#125;, false);\n        document.addEventListener(&#39;click&#39;, function() &#123;\n            alert(&#39;document&#39;);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>阻止事件冒泡的兼容性解决方案</li>\n</ul>\n<pre><code class=\"javascript\">if(e &amp;&amp; e.stopPropagation)&#123;\n      e.stopPropagation();\n  &#125;else&#123;\n      window.event.cancelBubble = true;\n  &#125;\n</code></pre>\n<h3 id=\"3-5-事件委托\"><a href=\"#3-5-事件委托\" class=\"headerlink\" title=\"3.5 事件委托\"></a>3.5 事件委托</h3><ul>\n<li><p>事件委托也称为事件代理，在jQuery里面称为事件委派</p>\n</li>\n<li><p>事件委托的原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</p>\n</li>\n<li><p>事件委托的作用：我们只操作了一次DOM，提高了程序的性能</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;ul&gt;\n        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;\n        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;\n        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;\n        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;\n        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        // 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点\n        var ul = document.querySelector(&#39;ul&#39;);\n        ul.addEventListener(&#39;click&#39;, function (e) &#123;\n            // alert(&#39;知否知否，点我应有弹框在手！&#39;);\n            // e.target 这个可以得到我们点击的对象\n            e.target.style.backgroundColor = &#39;pink&#39;;\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"3-6-常用事件\"><a href=\"#3-6-常用事件\" class=\"headerlink\" title=\"3.6 常用事件\"></a>3.6 常用事件</h3><p><strong>常见的鼠标事件</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">鼠标事件</th>\n<th align=\"center\">触发条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">onclick</td>\n<td align=\"center\">鼠标点击左键触发</td>\n</tr>\n<tr>\n<td align=\"center\">onmouseover</td>\n<td align=\"center\">鼠标经过触发</td>\n</tr>\n<tr>\n<td align=\"center\">onmouseout</td>\n<td align=\"center\">鼠标离开触发</td>\n</tr>\n<tr>\n<td align=\"center\">onfocus</td>\n<td align=\"center\">获得鼠标焦点触发</td>\n</tr>\n<tr>\n<td align=\"center\">onblur</td>\n<td align=\"center\">失去鼠标焦点触发</td>\n</tr>\n<tr>\n<td align=\"center\">onmousemove</td>\n<td align=\"center\">鼠标移动触发</td>\n</tr>\n<tr>\n<td align=\"center\">onmouseup</td>\n<td align=\"center\">鼠标弹起触发</td>\n</tr>\n<tr>\n<td align=\"center\">onmousedown</td>\n<td align=\"center\">鼠标按下触发</td>\n</tr>\n</tbody></table>\n<ul>\n<li>禁止鼠标右键菜单<ul>\n<li>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">document.addEventListener(&#39;contextmenu&#39;, function(e) &#123;\n    e.preventDefault();\n&#125;)\n</code></pre>\n<ul>\n<li>禁止鼠标选中（selectstart 开始选中）</li>\n</ul>\n<pre><code class=\"JavaScript\">document.addEventListener(&#39;selectstart&#39;, function(e) &#123;\n    e.preventDefault();\n&#125;)\n</code></pre>\n<p><strong>鼠标事件对象</strong></p>\n<ul>\n<li>event对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象MouseEvent和键盘事件对象KeyboardEvent</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">鼠标事件对象</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">e.clientX</td>\n<td align=\"center\">返回鼠标相对于浏览器窗口可视区的X坐标</td>\n</tr>\n<tr>\n<td align=\"center\">e.clientY</td>\n<td align=\"center\">返回鼠标相对于浏览器窗口可视区的Y坐标</td>\n</tr>\n<tr>\n<td align=\"center\">e.pageX</td>\n<td align=\"center\">返回鼠标相对于文档页面的X坐标    IE9+支持</td>\n</tr>\n<tr>\n<td align=\"center\">e.pageY</td>\n<td align=\"center\">返回鼠标相对于文档页面的Y坐标    IE9+支持</td>\n</tr>\n<tr>\n<td align=\"center\">e.screenX</td>\n<td align=\"center\">返回鼠标相对于电脑屏幕的X坐标</td>\n</tr>\n<tr>\n<td align=\"center\">e.screenY</td>\n<td align=\"center\">返回鼠标相对于电脑屏幕的Y坐标</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        // 鼠标事件对象 MouseEvent\n        document.addEventListener(&#39;click&#39;, function(e) &#123;\n            // 1. client 鼠标在可视区的x和y坐标\n            console.log(e.clientX);\n            console.log(e.clientY);\n            console.log(&#39;---------------------&#39;);\n\n            // 2. page 鼠标在页面文档的x和y坐标\n            console.log(e.pageX);\n            console.log(e.pageY);\n            console.log(&#39;---------------------&#39;);\n\n            // 3. screen 鼠标在电脑屏幕的x和y坐标\n            console.log(e.screenX);\n            console.log(e.screenY);\n\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<p><strong>常用键盘事件</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">键盘事件</th>\n<th align=\"center\">触发条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">onkeyup</td>\n<td align=\"center\">某个键盘按键被松开时触发</td>\n</tr>\n<tr>\n<td align=\"center\">onkeydown</td>\n<td align=\"center\">某个键盘按键被按下时触发</td>\n</tr>\n<tr>\n<td align=\"center\">onkeypress</td>\n<td align=\"center\">某个键盘按键被松开时触发    不识别功能键</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        // 常用的键盘事件\n        //1. keyup 按键弹起的时候触发 \n        // document.onkeyup = function() &#123;\n        //         console.log(&#39;我弹起了&#39;);\n\n        //     &#125;\n        document.addEventListener(&#39;keyup&#39;, function () &#123;\n            console.log(&#39;我弹起了&#39;);\n        &#125;)\n\n        //3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊\n        document.addEventListener(&#39;keypress&#39;, function () &#123;\n            console.log(&#39;我按下了press&#39;);\n        &#125;)\n        //2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊\n        document.addEventListener(&#39;keydown&#39;, function () &#123;\n            console.log(&#39;我按下了down&#39;);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li><p>注意:</p>\n<ol>\n<li><p>如果使用addEventListener不需要加on</p>\n</li>\n<li><p>onkeypress和前面2个的区别是，它不识别功能键，比如左右箭头,shift等</p>\n</li>\n<li><p>三个事件的执行顺序是: <strong>keydown – keypress — keyup</strong></p>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>键盘事件对象</strong></p>\n<ul>\n<li><p>keyCode – 返回该键的ASCII值</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        // 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值\n        // 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65\n        // 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65\n        document.addEventListener(&#39;keyup&#39;, function(e) &#123;\n            // console.log(e);\n            console.log(&#39;up:&#39; + e.keyCode);\n            // 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键\n            if (e.keyCode === 65) &#123;\n                alert(&#39;您按下的a键&#39;);\n            &#125; else &#123;\n                alert(&#39;您没有按下a键&#39;)\n            &#125;\n\n        &#125;)\n        document.addEventListener(&#39;keypress&#39;, function(e) &#123;\n            // console.log(e);\n            console.log(&#39;press:&#39; + e.keyCode);\n\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<ul>\n<li>注意:onkeydown和onkeyup 不区分字母大小写，onkeypress区分字母大小写</li>\n</ul>\n<h2 id=\"4、BOM\"><a href=\"#4、BOM\" class=\"headerlink\" title=\"4、BOM\"></a>4、BOM</h2><h3 id=\"4-1-BOM概述\"><a href=\"#4-1-BOM概述\" class=\"headerlink\" title=\"4.1 BOM概述\"></a>4.1 BOM概述</h3><ul>\n<li>BOM (Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window</li>\n<li>BOM缺乏标准，JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C，BOM最初是Netscape浏览器标准的一部分</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">DOM</th>\n<th align=\"center\">BOM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">文档对象模型</td>\n<td align=\"center\">浏览器对象模型</td>\n</tr>\n<tr>\n<td align=\"center\">把**[文档]<strong>当做一个</strong>[对象]**</td>\n<td align=\"center\">把**[浏览器]<strong>当做一个</strong>[对象]**</td>\n</tr>\n<tr>\n<td align=\"center\">DOM的顶级对象是document</td>\n<td align=\"center\">BOM的顶级对象是<strong>window</strong></td>\n</tr>\n<tr>\n<td align=\"center\">DOM主要学习的是操作页面元素</td>\n<td align=\"center\">BOM学习的是浏览窗口交互的一些对象</td>\n</tr>\n<tr>\n<td align=\"center\">DOM是W3C标准规范</td>\n<td align=\"center\">BOM是浏览器厂商在各自浏览器上定义的，兼容性较差</td>\n</tr>\n</tbody></table>\n<ul>\n<li>构成</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2170a0df0205446c9a130f2832769af1.png#pic_center\"></p>\n<ul>\n<li><p>window对象是浏览器的顶级对象，它具有双重角色。</p>\n<ol>\n<li><p>它是JS访问浏览器窗口的一个接口</p>\n</li>\n<li><p>它是一个全局对象。定义在全局作用域中的变量、函数都会变成window对象的属性和方法</p>\n</li>\n</ol>\n</li>\n<li><p>在调用的时候可以省略window，前面学习的对话框都属于window对象方法，如 alert()、prompt()等</p>\n</li>\n<li><p><strong>注意: window下的一个特殊属性window.name(变量不要声明为name)</strong></p>\n</li>\n</ul>\n<h3 id=\"4-2-windows对象的常见事件\"><a href=\"#4-2-windows对象的常见事件\" class=\"headerlink\" title=\"4.2 windows对象的常见事件\"></a>4.2 windows对象的常见事件</h3><p><strong>窗口加载事件</strong></p>\n<ul>\n<li><p><strong>window.onload 是窗口(页面)加载事件,当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS文件等),就调用的处理函数</strong></p>\n</li>\n<li><p>注意:</p>\n<ol>\n<li>有了window.onload就可以把JS代码写到页面元素的上方，因为onload 是等页面内容全部加载完毕，再去执行处理函数</li>\n<li>window.onload传统注册事件方式只能写一次，如果有多个，会以最后一个window.onload为准</li>\n<li>如果使用addEventListener则没有限制</li>\n</ol>\n</li>\n<li><p>DOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。(le9以上才支持)如果页面的图片很多的话,从用户访问到onload触发可能需要较长的时间,交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        window.addEventListener(&#39;load&#39;, function () &#123;\n            var btn = document.querySelector(&#39;button&#39;);\n            btn.addEventListener(&#39;click&#39;, function () &#123;\n                alert(11);\n            &#125;)\n        &#125;)\n        window.addEventListener(&#39;load&#39;, function () &#123;\n            alert(22);\n        &#125;)\n        document.addEventListener(&#39;DOMContentLoaded&#39;, function () &#123;\n            alert(33);\n        &#125;)\n            // load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等\n            // DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些\n    &lt;/script&gt;\n</code></pre>\n<p><strong>调整窗口大小事件</strong></p>\n<ul>\n<li><p><strong>window. onresize是调整窗口大小加载事件，当触发时就调用的处理函数</strong></p>\n</li>\n<li><p>注意:</p>\n<ol>\n<li>只要窗口大小发生像索变化，就会触发这个事件</li>\n<li>我们经常利用这个事件完成响应式布局。window.innerWidth当前屏慕的宽度</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        window.addEventListener(&#39;load&#39;, function () &#123;\n            var div = document.querySelector(&#39;div&#39;);\n            window.addEventListener(&#39;resize&#39;, function () &#123;\n                console.log(window.innerWidth);\n\n                console.log(&#39;变化了&#39;);\n                if (window.innerWidth &lt;= 800) &#123;\n                    div.style.display = &#39;none&#39;;\n                &#125; else &#123;\n                    div.style.display = &#39;block&#39;;\n                &#125;\n\n            &#125;)\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"4-3-定时器\"><a href=\"#4-3-定时器\" class=\"headerlink\" title=\"4.3 定时器\"></a>4.3 定时器</h3><p><strong>setTimeout()定时器</strong></p>\n<ul>\n<li><p><strong>window.setTimeout(调用函数, [延迟的毫秒数]);</strong></p>\n</li>\n<li><p>setTimeout()方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</p>\n</li>\n<li><p>setTimeout()这个调用函数我们也称为<strong>回调函数callback</strong>；普通函数是按照代码顺序直接调用，而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数</p>\n</li>\n<li><p>注意:</p>\n<ol>\n<li>window可以省略</li>\n<li>这个调用函数可以直接写函数，或者写函数名或者采取字符串‘函数名0’三种形式。第三种不推荐</li>\n<li>延迟的毫秒数省略默认是0。如果写，必须是毫秒</li>\n<li>因为定时器可能有很多。所以我们经常给定时器赋值一个标识符</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        function callback() &#123;\n            console.log(&#39;爆炸了&#39;);\n\n        &#125;\n        var timer1 = setTimeout(callback, 3000);\n        var timer2 = setTimeout(callback, 5000);\n        // setTimeout(&#39;callback()&#39;, 3000); // 我们不提倡这个写法\n    &lt;/script&gt;\n</code></pre>\n<pre><code class=\"html\">    //广告自动关闭\n    &lt;img src=&quot;images/ad.jpg&quot; alt=&quot;&quot; class=&quot;ad&quot;&gt;\n    &lt;script&gt;\n        var ad = document.querySelector(&#39;.ad&#39;);\n        setTimeout(function() &#123;\n            ad.style.display = &#39;none&#39;;\n        &#125;, 5000);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>停止setTimeout()定时器</strong></p>\n<ul>\n<li><p>window.clearTimeout(timeoutID)；</p>\n</li>\n<li><p>clearTimeout ()方法取消了先前通过调用setTimeout(〉建立的定时器</p>\n</li>\n<li><p>注意:</p>\n<ol>\n<li>window可以省略</li>\n<li>里面的参数就是定时器的标识符</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;点击停止定时器&lt;/button&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        var timer = setTimeout(function() &#123;\n            console.log(&#39;爆炸了&#39;);\n\n        &#125;, 5000);\n        btn.addEventListener(&#39;click&#39;, function() &#123;\n            clearTimeout(timer);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<p><strong>setInterval()定时器</strong></p>\n<ul>\n<li>window.setInterval(回调函数, [间隔的毫秒数]);</li>\n<li>setinterval0方法重复调用一个函数。每限这个时间，就去调用一次回调函数</li>\n<li>注意基本同setTimeout()定时器</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        setInterval(function () &#123;\n            console.log(&#39;继续输出&#39;);\n        &#125;, 1000);\n    &lt;/script&gt;\n</code></pre>\n<pre><code class=\"html\">    //定时器\n    &lt;div&gt;\n        &lt;span class=&quot;hour&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;minute&quot;&gt;2&lt;/span&gt;\n        &lt;span class=&quot;second&quot;&gt;3&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        // 1. 获取元素 \n        var hour = document.querySelector(&#39;.hour&#39;); // 小时的黑色盒子\n        var minute = document.querySelector(&#39;.minute&#39;); // 分钟的黑色盒子\n        var second = document.querySelector(&#39;.second&#39;); // 秒数的黑色盒子\n        var inputTime = +new Date(&#39;2022-5-6 12:00:00&#39;); // 返回的是用户输入时间总的毫秒数\n        countDown(); // 我们先调用一次这个函数，防止第一次刷新页面有空白 \n        // 2. 开启定时器\n        setInterval(countDown, 1000);\n\n        function countDown() &#123;\n            var nowTime = +new Date(); // 返回的是当前时间总的毫秒数\n            var times = (inputTime - nowTime) / 1000; // times是剩余时间总的秒数 \n            var h = parseInt(times / 60 / 60 % 24); //时\n            h = h &lt; 10 ? &#39;0&#39; + h : h;\n            hour.innerHTML = h; // 把剩余的小时给 小时黑色盒子\n            var m = parseInt(times / 60 % 60); // 分\n            m = m &lt; 10 ? &#39;0&#39; + m : m;\n            minute.innerHTML = m;\n            var s = parseInt(times % 60); // 当前的秒\n            s = s &lt; 10 ? &#39;0&#39; + s : s;\n            second.innerHTML = s;\n        &#125;\n    &lt;/script&gt;\n</code></pre>\n<p><strong>停止setInterval()定时器</strong></p>\n<ul>\n<li>window.clearInterval(intervalID);</li>\n<li>clearInterval()方法取消了先前通过调用setInterval()建立的定时器</li>\n<li>注意:基本同停止setTimeout()定时器</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button class=&quot;begin&quot;&gt;开启定时器&lt;/button&gt;\n    &lt;button class=&quot;stop&quot;&gt;停止定时器&lt;/button&gt;\n    &lt;script&gt;\n        var begin = document.querySelector(&#39;.begin&#39;);\n        var stop = document.querySelector(&#39;.stop&#39;);\n        var timer = null; // 全局变量  null是一个空对象\n        begin.addEventListener(&#39;click&#39;, function () &#123;\n            timer = setInterval(function () &#123;\n                console.log(&#39;你好&#39;);\n            &#125;, 1000);\n        &#125;)\n        stop.addEventListener(&#39;click&#39;, function () &#123;\n            clearInterval(timer);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<pre><code class=\"html\">    //发送短信\n    手机号码:&lt;input type=&quot;number&quot;&gt;&lt;button&gt;发送&lt;/button&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        var time = 5;\n        btn.addEventListener(&#39;click&#39;, function () &#123;\n            btn.disabled = true;\n            var timer = setInterval(function () &#123;\n                if (time == 0) &#123;\n                    clearInterval(timer);\n                    btn.disabled = false;\n                    btn.innerHTML = &#39;发送&#39;;\n                    time = 5;\n                &#125; else &#123;\n                    btn.innerHTML = &#39;还剩下&#39; + time + &#39;秒&#39;;\n                    time--;\n                &#125;\n            &#125;, 1000)\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<p><strong>this</strong></p>\n<ul>\n<li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下<strong>this的最终指向的是那个调用它的对象</strong><ol>\n<li><strong>全局作用域或者普通函数</strong>中this<strong>指向全局对象window</strong> (注意定时器里面的this指向window)</li>\n<li><strong>方法调用中谁调用this指向谁</strong></li>\n<li><strong>构造函数中this</strong>指向<strong>构造函数的实例</strong></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"4-4-JS执行机制\"><a href=\"#4-4-JS执行机制\" class=\"headerlink\" title=\"4.4 JS执行机制\"></a>4.4 JS执行机制</h3><ul>\n<li>JavaScript语言的一大特点就是单线程，也就是说，<strong>同一个时间只能做一件事</strong></li>\n<li>这是Javascript这门脚本语言诞生的使命所致——JavaScript是为处理页面中用户的交互，以及操作DOM而诞生的。比如我们对某个DOM元素进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除</li>\n</ul>\n<p><strong>同步和异步</strong></p>\n<ul>\n<li>为了解决这个问题，利用多核CPU的计算能力，HTML5提出 Web Worker标准，允许JavaScript脚本创建多个线程。于是，JS中出现了同步和异步</li>\n<li>本质区别:这条流水线上各个流程的执行顺序不同</li>\n<li>同步任务：同步任务都在主线程上执行，形成一个<strong>执行栈</strong></li>\n<li>异步任务：JS的异步是通过回调函数实现的</li>\n<li>—般而言，异步任务有以下三种类型:<ol>\n<li><strong>普通事件</strong>，如click、resize等</li>\n<li><strong>资源加载</strong>，如load、error等</li>\n<li><strong>定时器</strong>，包括setlnterval、setTimeout等</li>\n</ol>\n</li>\n<li>异步任务相关回调函数添加到<strong>任务队列</strong>中(任务队列也称为消息队列)。</li>\n</ul>\n<p><strong>执行机制</strong></p>\n<ol>\n<li><strong>先执行执行栈中的同步任务</strong></li>\n<li><strong>异步任务(回调函数）放入任务队列中</strong></li>\n<li><strong>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/c978f93f1e6443d780a05ba9e510fed0.png#pic_center\"></p>\n<ul>\n<li><p><strong>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（event loop)</strong></p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        // 第一个问题\n        // console.log(1);\n        // setTimeout(function () &#123;\n        //     console.log(3);\n        // &#125;, 1000);\n        // console.log(2);\n        // 2. 第二个问题\n        // console.log(1);\n        // setTimeout(function () &#123;\n        //     console.log(3);\n        // &#125;, 0);\n        // console.log(2);\n        // 3. 第三个问题\n        console.log(1);\n        document.onclick = function () &#123;\n            console.log(&#39;click&#39;);\n        &#125;\n        console.log(2);\n        setTimeout(function () &#123;\n            console.log(3)\n        &#125;, 3000)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"4-5-location对象\"><a href=\"#4-5-location对象\" class=\"headerlink\" title=\"4.5 location对象\"></a>4.5 location对象</h3><ul>\n<li>window对象给我们提供了一个<strong>location属性</strong>用于<strong>获取或设置窗体的URL</strong>，并且可以用于解析URL。因为这个属性返回的是一个对象，所以我们将这个属性也称为<strong>location对象</strong></li>\n</ul>\n<p><strong>UPL</strong></p>\n<ul>\n<li><p>统一资源定位符(Uniform Resource Locator,URL)是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p>\n</li>\n<li><p>一般格式：</p>\n<ul>\n<li><p>protocol:&#x2F;&#x2F;host[:port]&#x2F;path&#x2F;[?query]#fragment</p>\n<p><a href=\"http://www.itcast.cn/index.html?name=andy&age=18#link\">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">组成</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">protocol</td>\n<td align=\"center\">通信协议 常用的http,ftp.maito等</td>\n</tr>\n<tr>\n<td align=\"center\">host</td>\n<td align=\"center\">主机（域名） <a href=\"http://www.baidu.com/\">www.baidu.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">port</td>\n<td align=\"center\">端口号 可选，省略时使用方案的默认端口</td>\n</tr>\n<tr>\n<td align=\"center\">path</td>\n<td align=\"center\">路径 由零或多个’&#x2F;‘符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td>\n</tr>\n<tr>\n<td align=\"center\">query</td>\n<td align=\"center\">参数 以键值对的形式，通过&amp;符号分隔开来</td>\n</tr>\n<tr>\n<td align=\"center\">fragment</td>\n<td align=\"center\">片段 #后面内容 常见于链接 锚点</td>\n</tr>\n</tbody></table>\n<p><strong>location对象的属性</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">location对象属性</th>\n<th align=\"center\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">location.href</td>\n<td align=\"center\">获取或者设置 整个URL</td>\n</tr>\n<tr>\n<td align=\"center\">location.host</td>\n<td align=\"center\">返回主机(域名) <a href=\"http://www.bandu.com/\">www.bandu.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">location.port</td>\n<td align=\"center\">返回端口号 如果未写返回 空字符串</td>\n</tr>\n<tr>\n<td align=\"center\">location.pathname</td>\n<td align=\"center\">返回路径</td>\n</tr>\n<tr>\n<td align=\"center\">location.search</td>\n<td align=\"center\">返回参数</td>\n</tr>\n<tr>\n<td align=\"center\">location.hash</td>\n<td align=\"center\">返回片段</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;点击&lt;/button&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        var div = document.querySelector(&#39;div&#39;);\n        btn.addEventListener(&#39;click&#39;, function () &#123;\n            // console.log(location.href);\n            location.href = &#39;http://www.baidu.com&#39;;\n        &#125;)\n        var timer = 5;\n        setInterval(function () &#123;\n            if (timer == 0) &#123;\n                location.href = &#39;http://www.baidu.com&#39;;\n            &#125; else &#123;\n                div.innerHTML = &#39;您将在&#39; + timer + &#39;秒钟之后跳转到首页&#39;;\n                timer--;\n            &#125;\n\n        &#125;, 1000);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>location对象的方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">location对象方法</th>\n<th align=\"center\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">location.assign()</td>\n<td align=\"center\">跟href一样，可以跳转页面（(也称为重定向页面)</td>\n</tr>\n<tr>\n<td align=\"center\">location.replace()</td>\n<td align=\"center\">替换当前页面，因为<strong>不记录历史</strong>，所以不能后退页面</td>\n</tr>\n<tr>\n<td align=\"center\">location.reload()</td>\n<td align=\"center\">重新加载页面，相当于刷新按钮或者f5如果参数为true 强制刷新ctrl+f5</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;button&gt;点击&lt;/button&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        btn.addEventListener(&#39;click&#39;, function () &#123;\n            // 记录浏览历史，所以可以实现后退功能\n            // location.assign(&#39;http://www.baidu.com&#39;);\n            // 不记录浏览历史，所以不可以实现后退功能\n            // location.replace(&#39;http://www.baidu.com&#39;);\n            location.reload(true);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"4-6-navigator对象\"><a href=\"#4-6-navigator对象\" class=\"headerlink\" title=\"4.6 navigator对象\"></a>4.6 navigator对象</h3><ul>\n<li>navigator对象包含有关浏览器的信息，它有很多属性，我们最常用的是userAgent，该属性可以返回由客户机发送服务器的user-agent头部的值</li>\n<li>判断终端</li>\n</ul>\n<pre><code class=\"JavaScript\">if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;\n    window.location.href = &quot;&quot;;     //手机\n&#125; else &#123;\n    window.location.href = &quot;&quot;;     //电脑\n&#125;\n</code></pre>\n<h3 id=\"4-7-history对象\"><a href=\"#4-7-history对象\" class=\"headerlink\" title=\"4.7 history对象\"></a>4.7 history对象</h3><ul>\n<li>window对象给我们提供了一个history对象，与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)访问过的 URL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">history对象方法</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">back()</td>\n<td align=\"center\">后退功能</td>\n</tr>\n<tr>\n<td align=\"center\">forword()</td>\n<td align=\"center\">前进功能</td>\n</tr>\n<tr>\n<td align=\"center\">go(参数)</td>\n<td align=\"center\">前进后退功能，参数为1前进1个页面，-1后退一个页面</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    //index.html\n    &lt;a href=&quot;list.html&quot;&gt;点击我去往列表页&lt;/a&gt;\n    &lt;button&gt;前进&lt;/button&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        btn.addEventListener(&#39;click&#39;, function() &#123;\n            // history.forward();\n            history.go(1);\n        &#125;)\n    &lt;/script&gt;\n\n    //list.html\n    &lt;a href=&quot;index.html&quot;&gt;点击我去往首页&lt;/a&gt;\n    &lt;button&gt;后退&lt;/button&gt;\n    &lt;script&gt;\n        var btn = document.querySelector(&#39;button&#39;);\n        btn.addEventListener(&#39;click&#39;, function() &#123;\n            // history.back();\n            history.go(-1);\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h2 id=\"5、PC端网页特效\"><a href=\"#5、PC端网页特效\" class=\"headerlink\" title=\"5、PC端网页特效\"></a>5、PC端网页特效</h2><h3 id=\"5-1-元素偏移量offset系列\"><a href=\"#5-1-元素偏移量offset系列\" class=\"headerlink\" title=\"5.1 元素偏移量offset系列\"></a>5.1 元素偏移量offset系列</h3><ul>\n<li>offset翻译过来就是偏移量，我们使用offset系列相关属性可以<strong>动态的</strong>得到该元素的位置（偏移)、大小等</li>\n<li>获得元素距离带有定位父元素的位置</li>\n<li>获得元素自身的大小(宽度高度)</li>\n<li>注意:返回的数值都不带单位</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/654c5b89096b418fb8e42df119960af9.png#pic_center\"></p>\n<ul>\n<li>offset常见属性：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">offset系列属性</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">element.offsetParent</td>\n<td align=\"center\">返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body</td>\n</tr>\n<tr>\n<td align=\"center\">element.offsetTop</td>\n<td align=\"center\">返回元素相对带有定位父元素上方的偏移</td>\n</tr>\n<tr>\n<td align=\"center\">element.offsetLeft</td>\n<td align=\"center\">返回元素相对带有定位父元素左边框的偏移</td>\n</tr>\n<tr>\n<td align=\"center\">element.offsetWidth</td>\n<td align=\"center\">返回自身包括padding、边框、内容区的宽度、返回数值不带单位</td>\n</tr>\n<tr>\n<td align=\"center\">element.offsetHeight</td>\n<td align=\"center\">返回自身包括padding、边框、内容区的高度、返回数值不带单位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n\n        .father &#123;\n            /* position: relative; */\n            width: 200px;\n            height: 200px;\n            background-color: pink;\n            margin: 150px;\n        &#125;\n\n        .son &#123;\n            width: 100px;\n            height: 100px;\n            background-color: purple;\n            margin-left: 45px;\n        &#125;\n\n        .w &#123;\n            height: 200px;\n            background-color: skyblue;\n            margin: 0 auto 200px;\n            padding: 10px;\n            border: 15px solid red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;father&quot;&gt;\n        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;w&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        // offset 系列\n        var father = document.querySelector(&#39;.father&#39;);\n        var son = document.querySelector(&#39;.son&#39;);\n        // 1.可以得到元素的偏移 位置 返回的不带单位的数值  \n        console.log(father.offsetTop);\n        console.log(father.offsetLeft);\n        // 它以带有定位的父亲为准  如果么有父亲或者父亲没有定位 则以 body 为准\n        console.log(son.offsetLeft);\n        var w = document.querySelector(&#39;.w&#39;);\n        // 2.可以得到元素的大小 宽度和高度 是包含padding + border + width \n        console.log(w.offsetWidth);\n        console.log(w.offsetHeight);\n        // 3. 返回带有定位的父亲 否则返回的是body\n        console.log(son.offsetParent); // 返回带有定位的父亲 否则返回的是body\n        console.log(son.parentNode); // 返回父亲 是最近一级的父亲 亲爸爸 不管父亲有没有定位\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><strong>offset与style的区别</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">offset</th>\n<th align=\"center\">style</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">offset可以得到任意样式表中的样式值</td>\n<td align=\"center\">style只能得到行内样式表中的样式值</td>\n</tr>\n<tr>\n<td align=\"center\">offset系列获得的数值是<strong>没有单位</strong>的</td>\n<td align=\"center\">style.width获得的是带<strong>有单位的</strong>字符串</td>\n</tr>\n<tr>\n<td align=\"center\">offsetWidth 包含<strong>padding+border+width</strong></td>\n<td align=\"center\">style.width获得<strong>不包含padding和border</strong>的值</td>\n</tr>\n<tr>\n<td align=\"center\">offsetWidth 等属性是只读属性，只能获取不能赋值</td>\n<td align=\"center\">style.width是可读写属性，可以获取也可以赋值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>获取</strong>元素大小位置、用offset更合适</td>\n<td align=\"center\">想要给元素<strong>更改</strong>值，则需要用style</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    //获取鼠标在盒子内的坐标\n    &lt;script&gt;\n        // 我们在盒子内点击， 想要得到鼠标距离盒子左右的距离。\n        // 首先得到鼠标在页面中的坐标（ e.pageX, e.pageY）\n        // 其次得到盒子在页面中的距离(box.offsetLeft, box.offsetTop)\n        // 用鼠标距离页面的坐标减去盒子在页面中的距离， 得到 鼠标在盒子内的坐标\n        var box = document.querySelector(&#39;.box&#39;);\n        box.addEventListener(&#39;mousemove&#39;, function (e) &#123;\n            var x = e.pageX - this.offsetLeft;\n            var y = e.pageY - this.offsetTop;\n            this.innerHTML = &#39;x坐标是&#39; + x + &#39; y坐标是&#39; + y;\n        &#125;)\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"5-2-元素可视区client系列\"><a href=\"#5-2-元素可视区client系列\" class=\"headerlink\" title=\"5.2 元素可视区client系列\"></a>5.2 元素可视区client系列</h3><ul>\n<li>client翻译过来就是客户端，我们使用client系列的相关属性来获取元素可视区的相关信息。<img src=\"https://img-blog.csdnimg.cn/efbb85b3dbec46c6b2cab0e84f786259.png#pic_center\"><br>通过client 系列的相关属性可以动态的得到该元素的边框大小、元素大小等</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">client系列属性</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">element.clientTop</td>\n<td align=\"center\">返回元素上边框的大小</td>\n</tr>\n<tr>\n<td align=\"center\">element.clientLeft</td>\n<td align=\"center\">返回元素左边框的大小</td>\n</tr>\n<tr>\n<td align=\"center\">element.clientWidth</td>\n<td align=\"center\">返回自身包括padding 、内容区的宽度，<strong>不含边框</strong>，返回数值不带单位</td>\n</tr>\n<tr>\n<td align=\"center\">element.clientHeight</td>\n<td align=\"center\">返回自身包括padding 、内容区的高度，<strong>不含边框</strong>，返回数值不带单位</td>\n</tr>\n</tbody></table>\n<p><strong>立即执行函数</strong></p>\n<ul>\n<li>立即执行函数**(function() {})()<strong>或者</strong>(function(){}())**</li>\n<li>主要作用:创建一个独立的作用域；避免了命名冲突问题</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;script&gt;\n        // 1.立即执行函数: 不需要调用，立马能够自己执行的函数\n        function fn() &#123;\n            console.log(1);\n        &#125;\n        fn();\n        // 2. 写法 也可以传递参数进来\n        // 1.(function() &#123;&#125;)()    或者  2. (function()&#123;&#125;());\n        (function (a, b) &#123;\n            console.log(a + b);\n            var num = 10;\n        &#125;)(1, 2); // 第二个小括号可以看做是调用函数\n        (function sum(a, b) &#123;\n            console.log(a + b);\n            var num = 10; // 局部变量\n        &#125;(2, 3));\n        // 3. 立即执行函数最大的作用就是 独立创建了一个作用域, 里面所有的变量都是局部变量 不会有命名冲突的情况\n    &lt;/script&gt;\n</code></pre>\n<p><strong>flexible.js源码分析</strong></p>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"JavaScript\">(function flexible(window, document) &#123;\n    // 获取的html 的根元素\n    var docEl = document.documentElement\n    // dpr 物理像素比\n    var dpr = window.devicePixelRatio || 1\n\n    // adjust body font size  设置我们body 的字体大小\n    function setBodyFontSize() &#123;\n        // 如果页面中有body 这个元素 就设置body的字体大小\n        if (document.body) &#123;\n            document.body.style.fontSize = (12 * dpr) + &#39;px&#39;\n        &#125; else &#123;\n            // 如果页面中没有body 这个元素，则等着 我们页面主要的DOM元素加载完毕再去设置body\n            // 的字体大小\n            document.addEventListener(&#39;DOMContentLoaded&#39;, setBodyFontSize)\n        &#125;\n    &#125;\n    setBodyFontSize();\n\n    // set 1rem = viewWidth / 10    设置我们html 元素的文字大小\n    function setRemUnit() &#123;\n        var rem = docEl.clientWidth / 10\n        docEl.style.fontSize = rem + &#39;px&#39;\n    &#125;\n\n    setRemUnit()\n\n    // reset rem unit on page resize  当我们页面尺寸大小发生变化的时候，要重新设置下rem 的大小\n    window.addEventListener(&#39;resize&#39;, setRemUnit)\n    // pageshow 是我们重新加载页面触发的事件\n    window.addEventListener(&#39;pageshow&#39;, function (e) &#123;\n        // e.persisted 返回的是true 就是说如果这个页面是从缓存取过来的页面，也需要从新计算一下rem 的大小\n        if (e.persisted) &#123;\n            setRemUnit()\n        &#125;\n    &#125;)\n\n    // detect 0.5px supports  有些移动端的浏览器不支持0.5像素的写法\n    if (dpr &gt;= 2) &#123;\n        var fakeBody = document.createElement(&#39;body&#39;)\n        var testElement = document.createElement(&#39;div&#39;)\n        testElement.style.border = &#39;.5px solid transparent&#39;\n        fakeBody.appendChild(testElement)\n        docEl.appendChild(fakeBody)\n        if (testElement.offsetHeight === 1) &#123;\n            docEl.classList.add(&#39;hairlines&#39;)\n        &#125;\n        docEl.removeChild(fakeBody)\n    &#125;\n&#125;(window, document))\n</code></pre>\n<ul>\n<li>下面三种情况都会刷新页面都会触发load 事件<ol>\n<li>a标签的超链接</li>\n<li>F5或者刷新按钮(强制刷新)</li>\n<li>前进后退按钮</li>\n</ol>\n</li>\n<li>但是火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态;实际上是将整个页面都保存在了内存里；所以此时后退按钮不能刷新页面</li>\n<li>此时可以使用pageshow事件来触发，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发;根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件，注意这个事件给window添加</li>\n</ul>\n<h3 id=\"5-3-元素滚动scroll系列\"><a href=\"#5-3-元素滚动scroll系列\" class=\"headerlink\" title=\"5.3 元素滚动scroll系列\"></a>5.3 元素滚动scroll系列</h3><ul>\n<li>scroll翻译过来就是滚动的，我们使用scroll系列的相关属性可以动态的得到该元素的大小、滚动距离等</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/83996f6f97db43dc837f5355ba75b3a4.png#pic_center\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">scroll系列属性</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">element.scrollTop</td>\n<td align=\"center\">返回被卷去的上侧距离，返回数值不带单位</td>\n</tr>\n<tr>\n<td align=\"center\">element.scrollLeft</td>\n<td align=\"center\">返回被卷去的左侧距离，返回数值不带单位</td>\n</tr>\n<tr>\n<td align=\"center\">element.scrollWidth</td>\n<td align=\"center\">返回自身内容实际的宽度、不含边框、返回数值不带单位</td>\n</tr>\n<tr>\n<td align=\"center\">element.scrollHeight</td>\n<td align=\"center\">返回自身内容实际的高度、不含边框、返回数值不带单位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">//仿淘宝侧边栏\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        .slider-bar &#123;\n            position: absolute;\n            left: 50%;\n            top: 300px;\n            margin-left: 600px;\n            width: 45px;\n            height: 130px;\n            background-color: pink;\n        &#125;\n\n        .w &#123;\n            width: 1200px;\n            margin: 10px auto;\n        &#125;\n\n        .header &#123;\n            height: 150px;\n            background-color: purple;\n        &#125;\n\n        .banner &#123;\n            height: 250px;\n            background-color: skyblue;\n        &#125;\n\n        .main &#123;\n            height: 1000px;\n            background-color: yellowgreen;\n        &#125;\n\n        span &#123;\n            display: none;\n            position: absolute;\n            bottom: 0;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;slider-bar&quot;&gt;\n        &lt;span class=&quot;goBack&quot;&gt;返回顶部&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;header w&quot;&gt;头部区域&lt;/div&gt;\n    &lt;div class=&quot;banner w&quot;&gt;banner区域&lt;/div&gt;\n    &lt;div class=&quot;main w&quot;&gt;主体部分&lt;/div&gt;\n    &lt;script&gt;\n        //1. 获取元素\n        var sliderbar = document.querySelector(&#39;.slider-bar&#39;);\n        var banner = document.querySelector(&#39;.banner&#39;);\n        // banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面\n        var bannerTop = banner.offsetTop\n        // 当我们侧边栏固定定位之后应该变化的数值\n        var sliderbarTop = sliderbar.offsetTop - bannerTop;\n        // 获取main 主体元素\n        var main = document.querySelector(&#39;.main&#39;);\n        var goBack = document.querySelector(&#39;.goBack&#39;);\n        var mainTop = main.offsetTop;\n        // 2. 页面滚动事件 scroll\n        document.addEventListener(&#39;scroll&#39;, function () &#123;\n            // 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位\n            if (window.pageYOffset &gt;= bannerTop) &#123;\n                sliderbar.style.position = &#39;fixed&#39;;\n                sliderbar.style.top = sliderbarTop + &#39;px&#39;;\n            &#125; else &#123;\n                sliderbar.style.position = &#39;absolute&#39;;\n                sliderbar.style.top = &#39;300px&#39;;\n            &#125;\n            // 4. 当我们页面滚动到main盒子，就显示 goback模块\n            if (window.pageYOffset &gt;= mainTop) &#123;\n                goBack.style.display = &#39;block&#39;;\n            &#125; else &#123;\n                goBack.style.display = &#39;none&#39;;\n            &#125;\n        &#125;)\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><strong>页面被卷去的头部兼容性解决</strong></p>\n<ul>\n<li>如果浏览器的高（或宽)度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发onscroll事件</li>\n<li>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法:<ol>\n<li>声明了DTD，使用document.documentElement.scrollTop</li>\n<li>未声明DTD，使用document.body.scrollTop</li>\n<li>新方法window. pageYoffset和window.pageXoffset，IE9开始支持</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">function getScroll() &#123;\n    return &#123;\n      left: window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft||0,\n      top: window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0\n    &#125;;\n &#125; \n//使用的时候  getScroll().left\n</code></pre>\n<p><strong>三大系列总结</strong></p>\n<ol>\n<li>offset系列经常用于<strong>获得元素位置</strong>offsetLeft offsetTop</li>\n<li>client经常<strong>用于获取元素大小</strong>clientWidth clientHeight</li>\n<li>scroll经常用于<strong>获取滚动距离</strong>scrollTop scrollLeft</li>\n<li>注意页面滚动的距离通过window.pageXoffset获得</li>\n</ol>\n<p><strong>mouseenter和mouseover的区别</strong></p>\n<ul>\n<li>当鼠标移动到元素上时就会触发mouseenter事件，类似mouseover，它们两者之间的差别是<strong>mouseover鼠标经过自身盒子会触发，经过子盒子还会触发</strong>。<strong>mouseenter只会经过自身盒子触发</strong>。之所以这样，就是因为<strong>mouseenter不会冒泡</strong>；跟mouseenter搭配，鼠标离开 mouseleave 同样不会冒泡</li>\n</ul>\n<h3 id=\"5-4-动画函数封装\"><a href=\"#5-4-动画函数封装\" class=\"headerlink\" title=\"5.4 动画函数封装\"></a>5.4 动画函数封装</h3><p><strong>动画实现原理</strong></p>\n<ul>\n<li><p><strong>核心原理:通过定时器setlnterval()不断移动盒子位置</strong></p>\n</li>\n<li><p>实现步骤:</p>\n<ol>\n<li>获得盒子当前位置</li>\n<li>让盒子在当前位置加上1个移动距离</li>\n<li>利用定时器不断重复这个操作</li>\n<li>加一个结束定时器的条件</li>\n<li>注意此元素需要添加定位，才能使用element.style.left</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div&gt;&lt;/div&gt;//绝对定位\n    &lt;script&gt;\n        var div = document.querySelector(&#39;div&#39;);\n        var timer = setInterval(function () &#123;\n            if (div.offsetLeft &gt;= 400) &#123;\n                // 停止动画 本质是停止定时器\n                clearInterval(timer);\n            &#125;\n            div.style.left = div.offsetLeft + 1 + &#39;px&#39;;//改变 = 获取 + 1 + &#39;px&#39;\n        &#125;, 30);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>动画函数简单封装</strong></p>\n<ul>\n<li>函数需要传递2个参数，动画对象和移动到的距离</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"JavaScript\">// 简单动画函数封装obj目标对象 target 目标位置\n        function animate(obj, target) &#123;\n            var timer = setInterval(function () &#123;\n                if (obj.offsetLeft &gt;= target) &#123;\n                    // 停止动画 本质是停止定时器\n                    clearInterval(timer);\n                &#125;\n                obj.style.left = obj.offsetLeft + 1 + &#39;px&#39;;\n\n            &#125;, 30);\n        &#125;\n</code></pre>\n<p><strong>动画函数给不同元素记录不同定时器</strong></p>\n<ul>\n<li>如果多个元素都使用这个动画函数，每次都要var声明定时器。我们可以给不同的元素使用不同的定时器(自己专门用自己的定时器)</li>\n<li>核心原理:利用JS是一门动态语言，可以很方便的给当前对象添加属性</li>\n<li>代码：</li>\n</ul>\n<pre><code class=\"JavaScript\">function animate(obj, target) &#123;\n            // 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器\n            // 解决方案就是 让我们元素只有一个定时器执行\n            // 先清除以前的定时器，只保留当前的一个定时器执行\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () &#123;\n                if (obj.offsetLeft &gt;= target) &#123;\n                    // 停止动画 本质是停止定时器\n                    clearInterval(obj.timer);\n                &#125;\n                obj.style.left = obj.offsetLeft + 1 + &#39;px&#39;;\n            &#125;, 30);\n        &#125;\n</code></pre>\n<p><strong>缓动效果原理</strong></p>\n<ul>\n<li><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p>\n</li>\n<li><p>思路:</p>\n<ol>\n<li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来</li>\n<li><strong>核心算法:(目标值-现在的位置)&#x2F; 10 作为每次移动的距离步长</strong></li>\n<li>停止的条件是:让当前盒子位置等于目标位置就停止定时器</li>\n<li>注意步长值需要取整</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">function animate(obj, target) &#123;\n            // 先清除以前的定时器，只保留当前的一个定时器执行\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () &#123;\n                // 步长值写到定时器的里面\n                var step = (target - obj.offsetLeft) / 10;\n                if (obj.offsetLeft == target) &#123;\n                    // 停止动画 本质是停止定时器\n                    clearInterval(obj.timer);\n                &#125;\n                // 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10\n                obj.style.left = obj.offsetLeft + step + &#39;px&#39;;\n            &#125;, 15);\n        &#125;\n</code></pre>\n<p><strong>动画函数多个目标值之间移动</strong></p>\n<ul>\n<li><p>可以让动画函数从800移动到500</p>\n</li>\n<li><p>当我们点击按钮时候，判断步长是正值还是负值</p>\n<ol>\n<li>如果是正值，则步长往大了取整</li>\n<li>如果是负值，则步长向小了取整</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">function animate(obj, target) &#123;\n            // 先清除以前的定时器，只保留当前的一个定时器执行\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () &#123;\n                // 步长值写到定时器的里面\n                // 把我们步长值改为整数 不要出现小数的问题\n                // var step = Math.ceil((target - obj.offsetLeft) / 10);\n                var step = (target - obj.offsetLeft) / 10;\n                step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);\n                if (obj.offsetLeft == target) &#123;\n                    // 停止动画 本质是停止定时器\n                    clearInterval(obj.timer);\n                &#125;\n                // 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10\n                obj.style.left = obj.offsetLeft + step + &#39;px&#39;;\n            &#125;, 15);\n        &#125;\n</code></pre>\n<p><strong>动画函数添加回调函数</strong></p>\n<ul>\n<li><p>回调函数原理:函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调</p>\n</li>\n<li><p>回调函数写的位置:定时器结束的位置</p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">function animate(obj, target, callback) &#123;\n            // console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()\n            // 先清除以前的定时器，只保留当前的一个定时器执行\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () &#123;\n                // 步长值写到定时器的里面\n                // 把我们步长值改为整数 不要出现小数的问题\n                // var step = Math.ceil((target - obj.offsetLeft) / 10);\n                var step = (target - obj.offsetLeft) / 10;\n                step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);\n                if (obj.offsetLeft == target) &#123;\n                    // 停止动画 本质是停止定时器\n                    clearInterval(obj.timer);\n                    // 回调函数写到定时器结束里面\n                    if (callback) &#123;\n                        // 调用函数\n                        callback();\n                    &#125;\n                &#125;\n                // 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10\n                obj.style.left = obj.offsetLeft + step + &#39;px&#39;;\n            &#125;, 15);\n        &#125; \n</code></pre>\n<p><strong>动画函数封装到单独JS文件里面</strong></p>\n<ul>\n<li><p>因为以后经常使用这个动画函数，可以单独封装到一个ls文件里面，使用的时候引用这个JS文件即可</p>\n<ol>\n<li>单独新建一个JS文件</li>\n<li>HTML文件引入JS文件</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">//animate.js\nfunction animate(obj, target, callback) &#123;\n    // console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()\n\n    // 先清除以前的定时器，只保留当前的一个定时器执行\n    clearInterval(obj.timer);\n    obj.timer = setInterval(function () &#123;\n        // 步长值写到定时器的里面\n        // 把我们步长值改为整数 不要出现小数的问题\n        // var step = Math.ceil((target - obj.offsetLeft) / 10);\n        var step = (target - obj.offsetLeft) / 10;\n        step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);\n        if (obj.offsetLeft == target) &#123;\n            // 停止动画 本质是停止定时器\n            clearInterval(obj.timer);\n            // 回调函数写到定时器结束里面\n            // if (callback) &#123;\n            //     // 调用函数\n            //     callback();\n            // &#125;\n            callback &amp;&amp; callback();\n        &#125;\n        // 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10\n        obj.style.left = obj.offsetLeft + step + &#39;px&#39;;\n    &#125;, 15);\n&#125;\n</code></pre>\n<h3 id=\"5-5-常见网页特效案例\"><a href=\"#5-5-常见网页特效案例\" class=\"headerlink\" title=\"5.5 常见网页特效案例\"></a>5.5 常见网页特效案例</h3><p><strong>轮播图</strong></p>\n<ul>\n<li>轮播图也称为焦点图，是网页中比较常见的网页特效。</li>\n<li>功能需求:<ol>\n<li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮</li>\n<li>点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理</li>\n<li>图片播放的同时，下面小圆圈模块跟随─起变化</li>\n<li>点击小圆圈，可以播放相应图片</li>\n<li>鼠标不经过轮播图，轮播图也会自动播放图片</li>\n<li>鼠标经过，轮播图模块，自动播放停止</li>\n</ol>\n</li>\n</ul>\n<p><strong>节流阀</strong></p>\n<ul>\n<li>防止轮播图按钮连续点击造成播放过快</li>\n<li>节流阀目的:当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发</li>\n<li>核心实现思路:利用回调函数，添加一个变量来控制，锁住函数和解锁函数(操作系统信号量PV操作)<ul>\n<li>开始设置一个变量var flag &#x3D; true;</li>\n<li>lf(flag) {flag &#x3D; false; do something}关闭水龙头</li>\n<li>利用回调函数动画执行完毕, flag &#x3D; true打开水龙头</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6、移动端网页特效\"><a href=\"#6、移动端网页特效\" class=\"headerlink\" title=\"6、移动端网页特效\"></a>6、移动端网页特效</h2><h3 id=\"6-1-触屏事件\"><a href=\"#6-1-触屏事件\" class=\"headerlink\" title=\"6.1 触屏事件\"></a>6.1 触屏事件</h3><p><strong>触屏事件概述</strong></p>\n<ul>\n<li>移动端浏览器兼容性较好，我们不需要考虑以前JS的兼容性问题，可以放心的使用原生S书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch(也称触摸事件)，Android和IOS都有</li>\n<li>touch对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指(或触控笔)对屏幕或者触控板操作</li>\n<li>常见的触屏事件如下：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">触屏touch事件</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">touchstart</td>\n<td align=\"center\">手指<strong>触摸到</strong>一个DOM元素时触发</td>\n</tr>\n<tr>\n<td align=\"center\">touchmove</td>\n<td align=\"center\">手指在一个DOM元素上<strong>滑动时</strong>触发</td>\n</tr>\n<tr>\n<td align=\"center\">touchend</td>\n<td align=\"center\">手指从一个DOM元素<strong>移开时</strong>触发</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"html\">    &lt;div&gt;&lt;/div&gt;\n    &lt;script&gt;\n        // 1. 获取元素\n        // 2. 手指触摸DOM元素事件\n        var div = document.querySelector(&#39;div&#39;);\n        div.addEventListener(&#39;touchstart&#39;, function () &#123;\n            console.log(&#39;我摸了你&#39;);\n        &#125;);\n        // 3. 手指在DOM元素身上移动事件\n        div.addEventListener(&#39;touchmove&#39;, function () &#123;\n            console.log(&#39;我继续摸&#39;);\n        &#125;);\n        // 4. 手指离开DOM元素事件\n        div.addEventListener(&#39;touchend&#39;, function () &#123;\n            console.log(&#39;轻轻的我走了&#39;);\n        &#125;);\n    &lt;/script&gt;\n</code></pre>\n<p><strong>触摸事件对象</strong></p>\n<ul>\n<li>TouchEvent是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</li>\n<li>touchstart、touchmove、touchend三个事件都会各自有事件对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">触摸列表</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">touches</td>\n<td align=\"center\">正在<strong>触摸屏幕的所有手指</strong>的一个列表</td>\n</tr>\n<tr>\n<td align=\"center\">targetTouches</td>\n<td align=\"center\">正在<strong>触摸当前DOM元素上的手指</strong>的一个列表</td>\n</tr>\n<tr>\n<td align=\"center\">changedTouches</td>\n<td align=\"center\">手指<strong>状态发生了改变的列表</strong>，从无到有，从有到无变化</td>\n</tr>\n</tbody></table>\n<p><strong>移动端拖动元素</strong></p>\n<ul>\n<li><p>touchstart、touchmove、touchend可以实现拖动元素；但是拖动元素需要当前手指的坐标值；我们可以使用targetTouches[0]里面的pageX和pageY</p>\n</li>\n<li><p>移动端拖动的原理:手指移动中，计算出手指移动的距离；然后用盒子原来的位置＋手指移动的距离</p>\n</li>\n<li><p>手指移动的距离:<strong>手指滑动中的位置减去手指刚开始触摸的位置</strong></p>\n</li>\n<li><p>拖动元素三步曲:</p>\n<ol>\n<li>触摸元素touchstart: 获取手指初始坐标，同时获得盒子原来的位置</li>\n<li>移动手指touchmove: 计算手指的滑动距离，并且移动盒子</li>\n<li>离开手指touchend:</li>\n</ol>\n</li>\n<li><p>注意:<strong>手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动e.preventDefault();</strong></p>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"html\">    &lt;div&gt;&lt;/div&gt;\n    &lt;script&gt;\n        // （1） 触摸元素 touchstart：  获取手指初始坐标，同时获得盒子原来的位置\n        // （2） 移动手指 touchmove：  计算手指的滑动距离，并且移动盒子\n        // （3） 离开手指 touchend:\n        var div = document.querySelector(&#39;div&#39;);\n        var startX = 0; //获取手指初始坐标\n        var startY = 0;\n        var x = 0; //获得盒子原来的位置\n        var y = 0;\n        div.addEventListener(&#39;touchstart&#39;, function (e) &#123;\n            //  获取手指初始坐标\n            startX = e.targetTouches[0].pageX;\n            startY = e.targetTouches[0].pageY;\n            x = this.offsetLeft;\n            y = this.offsetTop;\n        &#125;);\n\n        div.addEventListener(&#39;touchmove&#39;, function (e) &#123;\n            //  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标\n            var moveX = e.targetTouches[0].pageX - startX;\n            var moveY = e.targetTouches[0].pageY - startY;\n            // 移动我们的盒子 盒子原来的位置 + 手指移动的距离\n            this.style.left = x + moveX + &#39;px&#39;;\n            this.style.top = y + moveY + &#39;px&#39;;\n            e.preventDefault(); // 阻止屏幕滚动的默认行为\n        &#125;);\n    &lt;/script&gt;\n</code></pre>\n<h3 id=\"6-2-移动端常见特效\"><a href=\"#6-2-移动端常见特效\" class=\"headerlink\" title=\"6.2 移动端常见特效\"></a>6.2 移动端常见特效</h3><p><strong>classList属性</strong></p>\n<ul>\n<li>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。该属性用于在元素中添加，移除及切换CSS类，对类选择器进行操作</li>\n<li>添加类:element.classList.add (’类名’) ;</li>\n<li>移除类:element.classList.remove (’类名’);</li>\n<li>切换类:element.classList.toggle (’类名’)；</li>\n<li>注意以上方法里面，所有类名都不带点</li>\n</ul>\n<p><strong>click延时解决方案</strong></p>\n<ul>\n<li><p>移动端click事件会有300ms的延时，原因是移动端屏幕双击会缩放(double tap to zoom)页面</p>\n</li>\n<li><p>解决方案:</p>\n</li>\n</ul>\n<ol>\n<li>禁用缩放。浏览器禁用默认的双击缩放行为并且去掉300ms的点击延迟<ul>\n<li>缺点：有的页面就是要使用双击缩放功能</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"html\">&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&gt;\n</code></pre>\n<ol start=\"2\">\n<li>利用touch事件自己封装这个事件解决300ms延迟<ul>\n<li>缺点：只能给一个元素使用</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>原理就是:</p>\n<ol>\n<li>当我们手指触摸屏幕，记录当前触摸时间</li>\n<li>当我们手指离开屏幕，用离开的时间减去触摸的时间</li>\n<li>如果时间小于150ms，并且没有滑动过屏幕，那么我们就定义为点击</li>\n</ol>\n</li>\n<li><p>代码：</p>\n</li>\n</ul>\n<pre><code class=\"JavaScript\">//封装tap，解决click 300ms 延时\nfunction tap (obj, callback) &#123;\n        var isMove = false;\n        var startTime = 0; // 记录触摸时候的时间变量\n        obj.addEventListener(&#39;touchstart&#39;, function (e) &#123;\n            startTime = Date.now(); // 记录触摸时间\n        &#125;);\n        obj.addEventListener(&#39;touchmove&#39;, function (e) &#123;\n            isMove = true;  // 看看是否有滑动，有滑动算拖拽，不算点击\n        &#125;);\n        obj.addEventListener(&#39;touchend&#39;, function (e) &#123;\n            if (!isMove &amp;&amp; (Date.now() - startTime) &lt; 150) &#123;  // 如果手指触摸和离开时间小于150ms 算点击\n                callback &amp;&amp; callback(); // 执行回调函数\n            &#125;\n            isMove = false;  //  取反 重置\n            startTime = 0;\n        &#125;);\n&#125;\n//调用  \ntap(div, function()&#123;   // 执行代码  &#125;);\n</code></pre>\n<ol start=\"3\">\n<li>使用插件。fastclick插件解决300ms延迟<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>代码：</li>\n</ul>\n<pre><code class=\"javascript\">if (&#39;addEventListener&#39; in document) &#123;\n            document.addEventListener(&#39;DOMContentLoaded&#39;, function() &#123;\n                       FastClick.attach(document.body);\n            &#125;, false);\n&#125;\n</code></pre>\n<h3 id=\"6-3-移动端常见开发插件\"><a href=\"#6-3-移动端常见开发插件\" class=\"headerlink\" title=\"6.3 移动端常见开发插件\"></a>6.3 移动端常见开发插件</h3><p><strong>插件的定义</strong></p>\n<ul>\n<li>JS插件是js文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件</li>\n<li>特点:它一般是为了解决某个问题而专门存在，其功能单一，并且比较小</li>\n</ul>\n<p><strong>插件的使用</strong></p>\n<ol>\n<li>确认插件实现的功能</li>\n<li>去官网查看使用说明</li>\n<li>下载插件</li>\n<li>打开demo实例文件，查看需要引入的相关文件，并且引入</li>\n<li>复制demo实例文件中的结构html，样式css以及js代码</li>\n</ol>\n<p><strong>移动端常见插件</strong></p>\n<ul>\n<li>解决延时：<a href=\"https://github.com/ftlabs/fastclick\">ftlabs&#x2F;fastclick: Polyfill to remove click delays on browsers with touch UIs (github.com)</a></li>\n<li>轮播图：<a href=\"https://www.swiper.com.cn/\">Swiper中文网-轮播图幻灯片js插件,H5页面前端开发</a></li>\n<li><a href=\"http://www.superslide2.com/\">SuperSlide | TouchSlide 官方网站 大话主席 (superslide2.com)</a></li>\n<li><a href=\"https://github.com/cubiq/iscroll\">cubiq&#x2F;iscroll: Smooth scrolling for the web (github.com)</a></li>\n</ul>\n<h3 id=\"6-4-移动端常用开发框架\"><a href=\"#6-4-移动端常用开发框架\" class=\"headerlink\" title=\"6.4 移动端常用开发框架\"></a>6.4 移动端常用开发框架</h3><p><strong>框架概述</strong></p>\n<ul>\n<li>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发</li>\n<li>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小</li>\n<li><strong>前端常用的框架有Bootstrap、Vue、Angular、React</strong>等。既能开发PC端，也能开发移动端前端常用的移动端</li>\n<li><strong>插件有swiper、superslide、iscroll</strong>等</li>\n<li>框架:大而全，一整套解决方案</li>\n<li>插件:小而专一，某个功能的解决方案</li>\n</ul>\n<p><strong>Bootstrap</strong></p>\n<ul>\n<li>Bootstrap是一个简洁、直观、强悍的前端开发框架，它让web开发更迅速、简单。它能开发PC端，也能开发移动端</li>\n<li>Bootstrap JS插件使用步骤:<ol>\n<li>引入相关js文件</li>\n<li>复制HTML结构</li>\n<li>修改对应样式</li>\n<li>修改相应JS参数</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"7、本地存储\"><a href=\"#7、本地存储\" class=\"headerlink\" title=\"7、本地存储\"></a>7、本地存储</h2><h3 id=\"7-1-本地存储\"><a href=\"#7-1-本地存储\" class=\"headerlink\" title=\"7.1 本地存储\"></a>7.1 本地存储</h3><ol>\n<li>数据存储在用户浏览器中</li>\n<li>设置、读取方便、甚至页面刷新不丢失数据</li>\n<li>容量较大,sessionStorage约5M、localStorage约20M</li>\n<li>只能存储字符串，可以将对象JSON.stringify()编码后存储</li>\n</ol>\n<h3 id=\"7-2-window-sessionStorage\"><a href=\"#7-2-window-sessionStorage\" class=\"headerlink\" title=\"7.2 window.sessionStorage\"></a>7.2 window.sessionStorage</h3><ol>\n<li><strong>生命周期为关闭浏览器窗口</strong></li>\n<li>在同一个窗口(页面)下数据可以共享</li>\n<li>以键值对的形式存储使用</li>\n</ol>\n<ul>\n<li>存储数据：sessionStorage.setItem(key, value)</li>\n<li>获取数据：sessionStorage.getItem(key)</li>\n<li>删除数据：sessionStorage.removeItem(key)</li>\n<li>删除所有数据：sessionStorage.clear()</li>\n</ul>\n<h3 id=\"7-3-window-localStorage\"><a href=\"#7-3-window-localStorage\" class=\"headerlink\" title=\"7.3 window.localStorage\"></a>7.3 window.localStorage</h3><ol>\n<li><strong>声明周期永久生效，除非手动删除</strong>否则关闭页面也会存在</li>\n<li>可以<strong>多窗口(页面)共享</strong>(同一浏览器可以共享)</li>\n<li>以键值对的形式存储使用</li>\n</ol>\n<ul>\n<li>存储数据：localStorage.setItem(key, value)</li>\n<li>获取数据：localStorage.getItem(key)</li>\n<li>删除数据：localStorage.removeItem(key)</li>\n<li>删除所有数据：localStorage.clear()<br>p (obj, callback) {<br>  var isMove &#x3D; false;<br>  var startTime &#x3D; 0; &#x2F;&#x2F; 记录触摸时候的时间变量<br>  obj.addEventListener(‘touchstart’, function (e) {<br>      startTime &#x3D; Date.now(); &#x2F;&#x2F; 记录触摸时间<br>  });<br>  obj.addEventListener(‘touchmove’, function (e) {<br>      isMove &#x3D; true;  &#x2F;&#x2F; 看看是否有滑动，有滑动算拖拽，不算点击<br>  });<br>  obj.addEventListener(‘touchend’, function (e) {<br>      if (!isMove &amp;&amp; (Date.now() - startTime) &lt; 150) {  &#x2F;&#x2F; 如果手指触摸和离开时间小于150ms 算点击<br>          callback &amp;&amp; callback(); &#x2F;&#x2F; 执行回调函数<br>      }<br>      isMove &#x3D; false;  &#x2F;&#x2F;  取反 重置<br>      startTime &#x3D; 0;<br>  });</li>\n</ul>\n<p>}<br>&#x2F;&#x2F;调用<br>tap(div, function(){   &#x2F;&#x2F; 执行代码  });</p>\n<pre><code>\n3. 使用插件。fastclick插件解决300ms延迟\n   * 推荐\n\n* 代码：\n\n~~~javascript\nif (&#39;addEventListener&#39; in document) &#123;\n            document.addEventListener(&#39;DOMContentLoaded&#39;, function() &#123;\n                       FastClick.attach(document.body);\n            &#125;, false);\n&#125;\n</code></pre>\n<h3 id=\"6-3-移动端常见开发插件-1\"><a href=\"#6-3-移动端常见开发插件-1\" class=\"headerlink\" title=\"6.3 移动端常见开发插件\"></a>6.3 移动端常见开发插件</h3><p><strong>插件的定义</strong></p>\n<ul>\n<li>JS插件是js文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件</li>\n<li>特点:它一般是为了解决某个问题而专门存在，其功能单一，并且比较小</li>\n</ul>\n<p><strong>插件的使用</strong></p>\n<ol>\n<li>确认插件实现的功能</li>\n<li>去官网查看使用说明</li>\n<li>下载插件</li>\n<li>打开demo实例文件，查看需要引入的相关文件，并且引入</li>\n<li>复制demo实例文件中的结构html，样式css以及js代码</li>\n</ol>\n<p><strong>移动端常见插件</strong></p>\n<ul>\n<li>解决延时：<a href=\"https://github.com/ftlabs/fastclick\">ftlabs&#x2F;fastclick: Polyfill to remove click delays on browsers with touch UIs (github.com)</a></li>\n<li>轮播图：<a href=\"https://www.swiper.com.cn/\">Swiper中文网-轮播图幻灯片js插件,H5页面前端开发</a></li>\n<li><a href=\"http://www.superslide2.com/\">SuperSlide | TouchSlide 官方网站 大话主席 (superslide2.com)</a></li>\n<li><a href=\"https://github.com/cubiq/iscroll\">cubiq&#x2F;iscroll: Smooth scrolling for the web (github.com)</a></li>\n</ul>\n<h3 id=\"6-4-移动端常用开发框架-1\"><a href=\"#6-4-移动端常用开发框架-1\" class=\"headerlink\" title=\"6.4 移动端常用开发框架\"></a>6.4 移动端常用开发框架</h3><p><strong>框架概述</strong></p>\n<ul>\n<li>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发</li>\n<li>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小</li>\n<li><strong>前端常用的框架有Bootstrap、Vue、Angular、React</strong>等。既能开发PC端，也能开发移动端前端常用的移动端</li>\n<li><strong>插件有swiper、superslide、iscroll</strong>等</li>\n<li>框架:大而全，一整套解决方案</li>\n<li>插件:小而专一，某个功能的解决方案</li>\n</ul>\n<p><strong>Bootstrap</strong></p>\n<ul>\n<li>Bootstrap是一个简洁、直观、强悍的前端开发框架，它让web开发更迅速、简单。它能开发PC端，也能开发移动端</li>\n<li>Bootstrap JS插件使用步骤:<ol>\n<li>引入相关js文件</li>\n<li>复制HTML结构</li>\n<li>修改对应样式</li>\n<li>修改相应JS参数</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"7、本地存储-1\"><a href=\"#7、本地存储-1\" class=\"headerlink\" title=\"7、本地存储\"></a>7、本地存储</h2><h3 id=\"7-1-本地存储-1\"><a href=\"#7-1-本地存储-1\" class=\"headerlink\" title=\"7.1 本地存储\"></a>7.1 本地存储</h3><ol>\n<li>数据存储在用户浏览器中</li>\n<li>设置、读取方便、甚至页面刷新不丢失数据</li>\n<li>容量较大,sessionStorage约5M、localStorage约20M</li>\n<li>只能存储字符串，可以将对象JSON.stringify()编码后存储</li>\n</ol>\n<h3 id=\"7-2-window-sessionStorage-1\"><a href=\"#7-2-window-sessionStorage-1\" class=\"headerlink\" title=\"7.2 window.sessionStorage\"></a>7.2 window.sessionStorage</h3><ol>\n<li><strong>生命周期为关闭浏览器窗口</strong></li>\n<li>在同一个窗口(页面)下数据可以共享</li>\n<li>以键值对的形式存储使用</li>\n</ol>\n<ul>\n<li>存储数据：sessionStorage.setItem(key, value)</li>\n<li>获取数据：sessionStorage.getItem(key)</li>\n<li>删除数据：sessionStorage.removeItem(key)</li>\n<li>删除所有数据：sessionStorage.clear()</li>\n</ul>\n<h3 id=\"7-3-window-localStorage-1\"><a href=\"#7-3-window-localStorage-1\" class=\"headerlink\" title=\"7.3 window.localStorage\"></a>7.3 window.localStorage</h3><ol>\n<li><strong>声明周期永久生效，除非手动删除</strong>否则关闭页面也会存在</li>\n<li>可以<strong>多窗口(页面)共享</strong>(同一浏览器可以共享)</li>\n<li>以键值对的形式存储使用</li>\n</ol>\n<ul>\n<li>存储数据：localStorage.setItem(key, value)</li>\n<li>获取数据：localStorage.getItem(key)</li>\n<li>删除数据：localStorage.removeItem(key)</li>\n<li>删除所有数据：localStorage.clear()</li>\n</ul>\n","feature":true,"text":"JavaScript BOM（浏览器对象模型）和DOM（文档对象模型）是前端开发中的两个重要概念。BOM是用于操作浏览器窗口、浏览器历史记录和浏览器位置等的API，而DOM则是用于操作HTML和XML文档中的元素和属性的API。通过使用BOM和DOM，开发人员可以创建交互性更强的网页，实现动态效果和用户交互功能。...","permalink":"/post/前端--JavaScript Bom和Dom","photos":[],"count_time":{"symbolsCount":"70k","symbolsTime":"1:03"},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-Bom%E5%92%8CDom\"><span class=\"toc-text\">JavaScript Bom和Dom</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Web-API-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E7%9F%A5\"><span class=\"toc-text\">1、Web API 基本认知</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81DOM-%E2%80%93-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2、DOM – 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-DOM%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">2.1 DOM简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2 获取元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.3 事件基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.4 操作元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.5 节点操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-DOM%E9%87%8D%E7%82%B9%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">2.6 DOM重点核心</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81DOM-%E2%80%93-%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">3、DOM – 事件高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6-%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.1 注册事件(绑定事件)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%A0%E9%99%A4%E4%BA%8B%E4%BB%B6-%E8%A7%A3%E7%BB%91%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.2 删除事件(解绑事件)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-DOM%E4%BA%8B%E4%BB%B6%E6%B5%81\"><span class=\"toc-text\">3.3 DOM事件流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.4 事件对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98\"><span class=\"toc-text\">3.5 事件委托</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.6 常用事件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81BOM\"><span class=\"toc-text\">4、BOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-BOM%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">4.1 BOM概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-windows%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.2 windows对象的常见事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">4.3 定时器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">4.4 JS执行机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-location%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4.5 location对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-navigator%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4.6 navigator对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-history%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4.7 history对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88\"><span class=\"toc-text\">5、PC端网页特效</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%85%83%E7%B4%A0%E5%81%8F%E7%A7%BB%E9%87%8Foffset%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">5.1 元素偏移量offset系列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%85%83%E7%B4%A0%E5%8F%AF%E8%A7%86%E5%8C%BAclient%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">5.2 元素可视区client系列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%85%83%E7%B4%A0%E6%BB%9A%E5%8A%A8scroll%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">5.3 元素滚动scroll系列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%8A%A8%E7%94%BB%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">5.4 动画函数封装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E5%B8%B8%E8%A7%81%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">5.5 常见网页特效案例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88\"><span class=\"toc-text\">6、移动端网页特效</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E8%A7%A6%E5%B1%8F%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">6.1 触屏事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%89%B9%E6%95%88\"><span class=\"toc-text\">6.2 移动端常见特效</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">6.3 移动端常见开发插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">6.4 移动端常用开发框架</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">7、本地存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">7.1 本地存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-window-sessionStorage\"><span class=\"toc-text\">7.2 window.sessionStorage</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-window-localStorage\"><span class=\"toc-text\">7.3 window.localStorage</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6-1\"><span class=\"toc-text\">6.3 移动端常见开发插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-1\"><span class=\"toc-text\">6.4 移动端常用开发框架</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8-1\"><span class=\"toc-text\">7、本地存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8-1\"><span class=\"toc-text\">7.1 本地存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-window-sessionStorage-1\"><span class=\"toc-text\">7.2 window.sessionStorage</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-window-localStorage-1\"><span class=\"toc-text\">7.3 window.localStorage</span></a></li></ol></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"前端进阶：探索JavaScript高级语法","uid":"da652f0027f23ff5ab9b268e0c44336d","slug":"前端--JavaScript高级","date":"2023-01-07T05:22:11.000Z","updated":"2025-07-14T15:12:20.463Z","comments":true,"path":"api/articles/前端--JavaScript高级.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/de6c1a55cf774f9fa1e2cff7c25e5fc9.png","text":"JavaScript高级语法包括闭包、原型链、对象高级、线程与执行机制等。掌握这些高级语法可以提升代码的可维护性和性能，实现更复杂的功能和逻辑。在前端开发中，熟练应用JavaScript高级语法能够编写出结构清晰、功能强大的代码，为用户提供更流畅的交互体验。...","permalink":"/post/前端--JavaScript高级","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"JavaScript入门：掌握基础语法","uid":"20bde650eb44b90bc389cc737e93f282","slug":"前端--JavaScript基础知识点大全","date":"2022-12-19T13:55:31.000Z","updated":"2025-07-14T15:12:20.463Z","comments":true,"path":"api/articles/前端--JavaScript基础知识点大全.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/de6c1a55cf774f9fa1e2cff7c25e5fc9.png","text":"JavaScript基础语法包括变量声明、数据类型、运算符、条件语句和循环结构等。通过学习JavaScript基础语法，开发者可以实现网页的动态效果和交互功能，如表单验证、页面元素操作及动画效果等。JavaScript作为前端开发的核心语言，掌握其基础语法对于创建交互丰富的网页至关重要。...","permalink":"/post/前端--JavaScript基础知识点大全","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}