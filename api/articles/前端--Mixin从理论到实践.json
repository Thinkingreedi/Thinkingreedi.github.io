{"title":"前端开发实用技巧：mixin提高代码复用率","uid":"78d471353b2103866278592ac6c06983","slug":"前端--Mixin从理论到实践","date":"2023-09-11T11:21:16.000Z","updated":"2025-07-14T15:12:20.464Z","comments":true,"path":"api/articles/前端--Mixin从理论到实践.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/2251c818c62042c78e5eadcdebd0fb42.png","content":"<h1 id=\"mixin从理论到实践\"><a href=\"#mixin从理论到实践\" class=\"headerlink\" title=\"mixin从理论到实践\"></a>mixin从理论到实践</h1><hr>\n<h2 id=\"一、什么是mixin\"><a href=\"#一、什么是mixin\" class=\"headerlink\" title=\"一、什么是mixin\"></a>一、什么是mixin</h2><ul>\n<li><p><a href=\"https://v2.cn.vuejs.org/v2/guide/mixins.html\">mixin混入 — Vue.js (vuejs.org)</a></p>\n</li>\n<li><p><strong>官方解释：</strong> 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n</li>\n<li><p><strong>个人理解：</strong> 如果在写vue组件时，发现有几个组件的逻辑类似，那么就可以使用vue的mixin（混入），把类似的逻辑抽离出来封装成js，然后在各个组件引入使用。mixin是一种可以在Vue组件中复用代码的方式。mixin可以包含任意的组件选项，例如data、methods、computed、watch等。当一个组件使用mixin时，它会将mixin中的选项与组件本身的选项合并。如果有选项名称冲突，一般情况下组件选项将覆盖mixin选项。</p>\n</li>\n<li><p><strong>优势：</strong></p>\n<ul>\n<li><strong>代码重用和维护性</strong>：通过使用混入，可以将常用的样式、功能或逻辑集中在一个地方定义，避免了代码的重复编写，提高了代码的重用性。当需要修改或更新某个样式或功能时，只需修改混入的定义，所有使用该混入的组件或模板都会自动应用更新，提高了代码的维护性。</li>\n<li><strong>抽象和可配置性</strong>：混入可以将通用的代码逻辑抽象出来，并提供参数以使其具有灵活性。通过传递不同的参数给混入，可以根据具体的需求来定制代码逻辑和样式，实现更强的可配置性。</li>\n<li><strong>组件模块化和复合性</strong>：混入能够将多个功能或样式组合在一起，形成更丰富的组件模块。通过将不同的混入组合使用，可以快速创建出具有复杂功能和样式的组件，提高了前端开发的效率和灵活性。</li>\n</ul>\n</li>\n<li><p><strong>劣势：</strong></p>\n<ul>\n<li><strong>命名冲突和可读性</strong>：过度使用混入可能导致命名冲突，特别是当多个混入定义了相同的样式或功能时。这可能会增加代码的复杂性和维护成本，并降低代码的可读性。</li>\n<li><strong>依赖关系和耦合</strong>：使用混入可能导致组件之间产生依赖关系，并增加它们之间的耦合度。如果修改了一个混入的定义，可能会影响到多个组件或模板，需要特别注意修改带来的潜在风险。</li>\n<li><strong>性能影响</strong>：当多个混入被应用到一个组件或模板中时，可能会导致多余的代码和样式加载。这可能会对页面的性能产生一定影响，特别是在加载大量混入的情况下。</li>\n</ul>\n</li>\n<li><p><strong>由于mixin会导致命名冲突和混乱的依赖关系、灵活性和可读性问题，以及会导致编译效率和性能问题，在 Vue 3 中引入了更加灵活和可组合的 Composition API。Composition API 允许以函数的形式编写逻辑，并将其作为可复用的组合函数在组件中使用。这种方式提供了更好的代码组织结构、更明确的依赖关系和更高的可读性。通过 Composition API，开发者可以更灵活地组合功能并避免命名冲突。</strong></p>\n</li>\n<li><p><strong>但并不意味着 mixin 完全没有价值，混入仍然可以在某些情况下提供一些价值和灵活性。在 Vue 2 中，它仍然是一种常用的代码重用机制。特别是对于较小规模的项目或具有简单需求的组件，使用 mixin 可以提供一种简单且灵活的方式来组织和复用代码。</strong></p>\n</li>\n<li><p><strong>在使用混入时，需要权衡利弊，合理使用，并确保良好的代码组织和命名规范，以最大化地发挥混入的优势并减少其潜在的缺点。</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、使用mixin\"><a href=\"#二、使用mixin\" class=\"headerlink\" title=\"二、使用mixin\"></a>二、使用mixin</h2><pre><code class=\"js\">// 定义一个 Mixin 对象\nconst myMixin = &#123;\n  data() &#123;\n    return &#123;\n      message: &#39;Hello, Mixin!&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    greet() &#123;\n      console.log(this.message);\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<pre><code class=\"vue\">// 在组件中引入 Mixin\nVue.component(&#39;my-component&#39;, &#123;\n  mixins: [myMixin],\n  mounted() &#123;\n    this.greet(); // 输出：Hello, Mixin!\n  &#125;\n&#125;)\n</code></pre>\n<ul>\n<li>在这个例子中，定义了一个名为 <code>myMixin</code> 的 Mixin 对象，它包含了一个名为 <code>message</code> 的数据属性和一个名为 <code>greet</code> 的方法。然后，我们在一个组件中通过 <code>mixins</code> 选项引入了这个 Mixin。最终，在组件的 <code>mounted</code> 生命周期钩子中调用了 <code>greet</code> 方法，控制台输出了 <code>Hello, Mixin!</code></li>\n</ul>\n<hr>\n<h2 id=\"三、mixin的合并策略\"><a href=\"#三、mixin的合并策略\" class=\"headerlink\" title=\"三、mixin的合并策略\"></a>三、mixin的合并策略</h2><p><strong>data选项</strong></p>\n<ul>\n<li>当一个组件和Mixin都拥有相同的data属性时，Vue会将它们合并成一个新的对象。<strong>如果是基本类型，组件的data属性将覆盖Mixin中的data属性，如果两个属性的值都是对象，则Vue会将它们深度合并</strong>，<strong>递归</strong>对比key，如果是同名key则会覆盖，如果不是同名的，则保留。</li>\n</ul>\n<p><strong>生命周期钩子</strong></p>\n<ul>\n<li>当一个组件和Mixin都定义了相同的生命周期钩子时，同名钩子函数将合并为一个数组，因此都将被调用。另外，<strong>混入对象的钩子将在组件自身钩子之前调用</strong>。</li>\n</ul>\n<p><strong>方法与计算属性</strong></p>\n<ul>\n<li><p>当一个组件和Mixin都包含相同名称的方法或计算属性时，<strong>组件的方法或计算属性会覆盖Mixin的方法或计算属性</strong>。</p>\n</li>\n<li><p>除了上面这些选项，还有比如<code>components</code>（组件），和<code>directives</code>(指令)等也是一样的逻辑，同名的会覆盖，以<strong>组件</strong>的为优先。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"四、mixin辨析\"><a href=\"#四、mixin辨析\" class=\"headerlink\" title=\"四、mixin辨析\"></a>四、mixin辨析</h2><p><strong>与 Vuex 的区别</strong></p>\n<ul>\n<li><p><strong>Vuex：</strong>  用来做状态管理，vuex中定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。相当于所有组件共享。</p>\n</li>\n<li><p><strong>Mixins：</strong>  可以定义共用的变量，在每个组件中使用，引用组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。组件直接使用是相互隔离的，数据互不影响。</p>\n</li>\n</ul>\n<p><strong>与公共组件的区别</strong></p>\n<ul>\n<li><p><strong>组件：</strong> 在父组件中引入组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据 prop 来传值，但本质上两者是相对独立的。</p>\n</li>\n<li><p><strong>Mixins：</strong> 在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"五、个人实践\"><a href=\"#五、个人实践\" class=\"headerlink\" title=\"五、个人实践\"></a>五、个人实践</h2><ul>\n<li>前置情况：使用nust对项目进行重构，还是使用Vue2为主，且查询方案大量冗余，故使用mixin将相同代码进行抽离。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/7f7e741a04284824aee8b7c4d50e6401.png#pic_center\"></p>\n<ul>\n<li>目录结构定义mixins的文件夹，并创建queryPlan.js文件</li>\n</ul>\n<pre><code class=\"js\">//导出\nexport const QueryPlan = &#123;\n    data() &#123;\n        return &#123;\n            list: &#123;\n                markets: [],\n                themes: [],\n                styles: [],\n                plays: [],\n            &#125;,\n            // ......\n        &#125;;\n    &#125;,\n    methods: &#123;\n        getMarkets() &#123;\n            // ...\n        &#125;,\n        getThemeList() &#123;\n            // ...\n        &#125;,\n        getPlays() &#123;\n            // ...\n        &#125;,\n        getStyles() &#123;\n            // ...\n        &#125;,\n        // ......\n    &#125;,\n    created() &#123;\n        // ......\n    &#125;,\n    mounted() &#123;\n        // ......\n    &#125;,\n&#125;;\n</code></pre>\n<ul>\n<li>创建好之后在.vue文件中引入即可</li>\n</ul>\n<pre><code class=\"vue\">&lt;template&gt;\n    &lt;div id=&quot;main&quot;&gt;\n        &lt;!-- ... --&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n// 引入\nimport &#123; QueryPlan &#125; from &quot;~/mixins/queryPlan.js&quot;;\n\nexport default &#123;\n    name: &quot;index&quot;,\n    mixins: [QueryPlan],\n    data() &#123;\n    return &#123;\n        // ...\n    &#125;;\n    &#125;,\n    mounted() &#123;\n        // ...\n    &#125;,\n    methods: &#123;\n        // ...\n    &#125;,\n    watch: &#123;\n        // ...\n    &#125;,\n    computed: &#123;\n        // ...\n    &#125;,\n&#125;;\n&lt;/script&gt;\n&lt;style lang=&quot;scss&quot; scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n","feature":true,"text":"混入 (Mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。...","permalink":"/post/前端--Mixin从理论到实践","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mixin%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">mixin从理论到实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFmixin\"><span class=\"toc-text\">一、什么是mixin</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8mixin\"><span class=\"toc-text\">二、使用mixin</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81mixin%E7%9A%84%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">三、mixin的合并策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81mixin%E8%BE%A8%E6%9E%90\"><span class=\"toc-text\">四、mixin辨析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%B8%AA%E4%BA%BA%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">五、个人实践</span></a></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"简洁高效的样式编写：揭秘Tailwind CSS","uid":"85079fc8b482b07bf1c46c305ca3f3b0","slug":"前端--Tailwind CSS浅析与实操","date":"2023-10-08T02:41:03.000Z","updated":"2025-07-14T15:12:20.464Z","comments":true,"path":"api/articles/前端--Tailwind CSS浅析与实操.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/direct/5e815334e934418fba98adf3a9f46e43.jpeg","text":"Tailwind CSS是一种实用的CSS框架，通过提供一组原子类，使得构建用户界面更加高效。它不同于传统的CSS框架，可以让你直接在HTML中使用类来定义样式，而无需编写自定义的CSS。Tailwind CSS提倡快速开发和一致的UI设计，同时也支持自定义主题和扩展性。这使得它成为许多开发者喜爱的工具，特别是对于快速原型设计和快速迭代的项目。...","permalink":"/post/前端--Tailwind CSS浅析与实操","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"掌握SEO核心技巧：深入了解搜索引擎优化","uid":"823667777e9312d7b7603b0c35d55e32","slug":"前端--深入理解搜索前端引擎优化(SEO)","date":"2023-09-01T01:08:31.000Z","updated":"2025-07-14T15:12:20.466Z","comments":true,"path":"api/articles/前端--深入理解搜索前端引擎优化(SEO).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/c79948b2af6745b69adac2358a8a1327.png","text":"前端SEO是指通过优化前端代码和内容，提高网页在搜索引擎中的排名和可见性。它包括合理的HTML结构、语义化标签、良好的页面加载速度、响应式设计等方面的优化。通过使用合适的关键字、优化页面标题和描述，以及创建友好的URL等方法，可以提高网页在搜索结果中的排名。...","permalink":"/post/前端--深入理解搜索前端引擎优化(SEO)","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"SEO","slug":"SEO","count":1,"path":"api/tags/SEO.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}