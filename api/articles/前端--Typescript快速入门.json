{"title":"打造高效开发环境：Typescript进阶指南","uid":"89c991e26472da293343598b88f77ea9","slug":"前端--Typescript快速入门","date":"2023-08-16T03:14:23.000Z","updated":"2025-07-14T15:12:20.464Z","comments":true,"path":"api/articles/前端--Typescript快速入门.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/direct/4b9f960ab3854ce3ad3761f7e6eb1095.png","content":"<hr>\n<h1 id=\"打造高效开发环境：TypeScript进阶指南\"><a href=\"#打造高效开发环境：TypeScript进阶指南\" class=\"headerlink\" title=\"打造高效开发环境：TypeScript进阶指南\"></a>打造高效开发环境：TypeScript进阶指南</h1><h1 id=\"一、快速入门\"><a href=\"#一、快速入门\" class=\"headerlink\" title=\"一、快速入门\"></a>一、快速入门</h1><h2 id=\"0、TypeScript简介\"><a href=\"#0、TypeScript简介\" class=\"headerlink\" title=\"0、TypeScript简介\"></a>0、TypeScript简介</h2><ol>\n<li><strong>TypeScript是JavaScript的超集。</strong></li>\n<li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li>\n<li><strong>TS代码需要通过编译器编译为JS</strong>，然后再交由JS解析器执行。</li>\n<li><strong>TS完全兼容JS</strong>，换言之，任何的JS代码都可以直接当成JS使用。</li>\n<li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>\n</ol>\n<h2 id=\"1、TypeScript-开发环境搭建\"><a href=\"#1、TypeScript-开发环境搭建\" class=\"headerlink\" title=\"1、TypeScript 开发环境搭建\"></a>1、TypeScript 开发环境搭建</h2><ol>\n<li><p>下载Node.js</p>\n<ul>\n<li>64位：<a href=\"https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi\">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li>\n<li>32位：<a href=\"https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi\">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li>\n</ul>\n</li>\n<li><p>安装Node.js</p>\n</li>\n<li><p>使用npm全局安装typescript</p>\n<ul>\n<li>进入命令行</li>\n<li>输入：npm i -g typescript</li>\n</ul>\n</li>\n<li><p>创建一个ts文件</p>\n</li>\n<li><p>使用tsc对ts文件进行编译</p>\n<ul>\n<li><p>进入命令行</p>\n</li>\n<li><p>进入ts文件所在目录</p>\n</li>\n<li><p>执行命令：tsc xxx.ts</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>为了简化编译步骤，可以通过两个解决方案来完成:</p>\n<ul>\n<li>方式一:通过webpack，配置本地的TypeScript编译环境和开启一个本地服务，可以直接运行在浏览器上;<a href=\"https://mp.weixin.qq.com/s/wnL1l-ERjTDykWM76l4Ajw\">https://mp.weixin.qq.com/s/wnL1l-ERjTDykWM76l4Ajw</a></li>\n<li>方式二:通过ts-node库，为TypeScript的运行提供执行环境;<ul>\n<li>安装ts-node:<code>npm install ts-node -g</code></li>\n<li>ts-node需要以来tslib和@types&#x2F;node两个包:<code>npm install tslib @types/node -g</code></li>\n<li>直接运行代码:<code>ts-node xxx.ts</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最简单的 TypeScript 使用方法，就是使用官网的在线编译页面，叫做 <a href=\"http://www.typescriptlang.org/play/\">TypeScript Playground</a>。</p>\n</li>\n</ul>\n<h2 id=\"2、基本类型\"><a href=\"#2、基本类型\" class=\"headerlink\" title=\"2、基本类型\"></a>2、基本类型</h2><ul>\n<li><p>类型声明</p>\n<ul>\n<li><p>类型声明是TS非常重要的一个特点</p>\n</li>\n<li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p>\n</li>\n<li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p>\n</li>\n<li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p>\n</li>\n<li><p>在TypeScript定义变量(标识符）和ES6之后一致，可以使用var、let、const来定义，在tslint中<strong>并不推荐使用var</strong>来声明变量</p>\n</li>\n<li><p>语法：</p>\n<ul>\n<li><pre><code class=\"typescript\">let 变量: 类型;\nlet a: number;\n\nlet 变量: 类型 = 值;\nlet a: number = 10;\n\nfunction fn(参数: 类型, 参数: 类型): 类型&#123;\n    ...\n&#125;\n function sum(a: number, b: number): number &#123;\n    return a + b;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>自动类型判断</strong></p>\n<ul>\n<li>TS拥有自动的类型判断机制</li>\n<li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li>\n<li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li>\n</ul>\n</li>\n<li><p>类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">number</td>\n<td align=\"center\">1, -33, 2.5</td>\n<td align=\"center\">任意数字</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">‘hi’, “hi”, <code>hi</code></td>\n<td align=\"center\">任意字符串</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">true、false</td>\n<td align=\"center\">布尔值true或false</td>\n</tr>\n<tr>\n<td align=\"center\">字面量</td>\n<td align=\"center\">其本身</td>\n<td align=\"center\">限制变量的值就是该字面量的值</td>\n</tr>\n<tr>\n<td align=\"center\">any</td>\n<td align=\"center\">*</td>\n<td align=\"center\">任意类型</td>\n</tr>\n<tr>\n<td align=\"center\">unknown</td>\n<td align=\"center\">*</td>\n<td align=\"center\">类型安全的any</td>\n</tr>\n<tr>\n<td align=\"center\">void</td>\n<td align=\"center\">空值（undefined）</td>\n<td align=\"center\">没有值（或undefined）</td>\n</tr>\n<tr>\n<td align=\"center\">never</td>\n<td align=\"center\">没有值</td>\n<td align=\"center\">不能是任何值</td>\n</tr>\n<tr>\n<td align=\"center\">object</td>\n<td align=\"center\">{name:’孙悟空’}</td>\n<td align=\"center\">任意的JS对象</td>\n</tr>\n<tr>\n<td align=\"center\">array</td>\n<td align=\"center\">[1,2,3]</td>\n<td align=\"center\">任意JS数组</td>\n</tr>\n<tr>\n<td align=\"center\">tuple</td>\n<td align=\"center\">[4,5]</td>\n<td align=\"center\">元素，TS新增类型，固定长度数组</td>\n</tr>\n<tr>\n<td align=\"center\">enum</td>\n<td align=\"center\">enum{A, B}</td>\n<td align=\"center\">枚举，TS中新增类型</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>number</p>\n<ul>\n<li><pre><code class=\"typescript\">let decimal: number = 6;  //十进制\nlet hex: number = 0xf00d;  //十六进制\nlet binary: number = 0b1010;  //二进制\nlet octal: number = 0o744;  //八进制\nlet big: bigint = 100n;  //大整形\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>boolean</p>\n<ul>\n<li><pre><code class=\"typescript\">let isDone: boolean = false;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>string</p>\n<ul>\n<li><pre><code class=\"typescript\">let color: string = &quot;blue&quot;;\ncolor = &#39;red&#39;;\n\nlet fullName: string = `Bob Bobbington`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is $&#123;fullName&#125;.\n\nI&#39;ll be $&#123;age + 1&#125; years old next month.`;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>字面量</p>\n<ul>\n<li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围(<strong>类似于常量，限定值或范围</strong>)</p>\n</li>\n<li><p>第一次创建的对象字面量, 称之为fresh(新鲜的)</p>\n</li>\n<li><p>对于新鲜的字面量, 会进行严格的类型检测. 必须完全满足类型的要求(不能有多余的属性)</p>\n</li>\n<li><pre><code class=\"typescript\">let color: &#39;red&#39; | &#39;blue&#39; | &#39;black&#39;;\nlet num: 1 | 2 | 3 | 4 | 5;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>any</p>\n<ul>\n<li><p>相当于对该变量关闭了TS的类型检测</p>\n</li>\n<li><p>TypeScript 提供了一个编译选项<code>noImplicitAny</code>，打开该选项，只要推断出<code>any</code>类型就会报错。</p>\n<pre><code class=\"powershell\"> tsc --noImplicitAny app.ts\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><pre><code class=\"typescript\">let d: any = 4;\nd = &#39;hello&#39;;\nd = true;\n//隐式\nlet e;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>unknown</p>\n<ul>\n<li>unknown类型的变量，不能直接赋值给其他变量，不能直接调用</li>\n</ul>\n<ul>\n<li><pre><code class=\"typescript\">let notSure: unknown = 4;\nnotSure = &#39;hello&#39;;\n\n//类型检查\nlet s:string;\nif(typeof e === &quot;string&quot;)&#123;\n    s = e;\n&#125;\n\n//类型断言\n/*\n语法：\n变量 as 类型\n&lt;类型&gt;变量\n*/\ns = e as string;\n//s = &lt;string&gt;e;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>void</p>\n<ul>\n<li><pre><code class=\"typescript\">let unusable: void = undefined;\n\n//没写void，没写return，默认为void\n//可以将undefined赋值给void类型，函数可以返回undefined\nfunction fn(): void &#123;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>never</p>\n<ul>\n<li>表示永远不会返回结果</li>\n</ul>\n<ul>\n<li><pre><code class=\"typescript\">function error(message: string): never &#123;\n  throw new Error(message);\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>object（没啥用）</p>\n<ul>\n<li><pre><code class=\"typescript\">let obj: object = &#123;&#125;;\n\n// &#123;&#125; 用来指定对象中可以包含哪些属性\n// 语法：&#123;属性名:属性值,属性名:属性值&#125;\n// 在属性名后边加上?，表示属性是可选的\nlet b: &#123; name: string, age?: number &#125;;\nb = &#123; name: &#39;孙悟空&#39;, age: 18 &#125;;\n\n//定义对象结构\n// [propName: string]: any 表示任意类型的属性\nlet c: &#123; name: string, [propName: string]: any &#125;;\nc = &#123; name: &#39;猪八戒&#39;, age: 18, gender: &#39;男&#39; &#125;;\n\n//定义函数结构\n/*\n  设置函数结构的类型声明：\n  语法：(形参:类型, 形参:类型 ...) =&gt; 返回值\n*/\nlet d: (a: number, b: number) =&gt; number;\n// d = function (n1: string, n2: string): number&#123;\n//     return 10;\n// &#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>array</p>\n<ul>\n<li><pre><code class=\"typescript\">//类型[]\nlet list: number[] = [1, 2, 3];\nlist.push(4)\n\n//Array&lt;类型&gt;\nlet list: Array&lt;number&gt; = [1, 2, 3];\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>tuple</p>\n<ul>\n<li><pre><code class=\"typescript\">//元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型\nlet x: [string, number];\nx = [&quot;hello&quot;, 10]; \n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>enum</p>\n<ul>\n<li><pre><code class=\"typescript\">enum Color &#123;\n  Red,\n  Green,\n  Blue,\n&#125;\nlet c: Color = Color.Green;\n\nenum Color &#123;\n  Red = 1,\n  Green,\n  Blue,\n&#125;\nlet c: Color = Color.Green;\n\nenum Color &#123;\n  Red = 1,\n  Green = 2,\n  Blue = 4,\n&#125;\nlet c: Color = Color.Green;\n\n// &amp;表示同时\nlet j: &#123; name: string &#125; &amp; &#123; age: number &#125;;\n// j = &#123;name: &#39;孙悟空&#39;, age: 18&#125;;\n\n// 类型的别名\ntype myType = 1 | 2 | 3 | 4 | 5;\nlet k: myType;\nlet l: myType;\nlet m: myType;\n\nk = 2;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>函数的参数类型</p>\n<ul>\n<li>指定函数的参数和返回值类型</li>\n</ul>\n<pre><code class=\"ts\">function sum(num1: number, num2: number): number &#123;\n  return num1 + num2\n&#125;\n\nconst res = sum(123, 321)\n\nexport &#123;&#125;\n</code></pre>\n<ul>\n<li>函数类型表达式</li>\n</ul>\n<pre><code class=\"typescript\">type CalcType = (num1: number, num2: number) =&gt; number\n\n// 1.函数的定义\nfunction calc(calcFn: CalcType) &#123;\n  const num1 = 10\n  const num2 = 20\n  const res = calcFn(num1, num2)\n  console.log(res)\n&#125;\n\n\n// 2.函数的调用\nfunction sum(num1: number, num2: number) &#123;\n  return num1 + num2\n&#125;\n\nfunction foo(num1: number) &#123;\n  return num1\n&#125;\ncalc(sum)\ncalc(foo)\n\nfunction mul(num1: number, num2: number) &#123;\n  return num1 * num2\n&#125;\ncalc(mul)\n\n// 3.使用匿名函数\ncalc(function(num1, num2) &#123;\n  return num1 - num2\n&#125;)\n\nexport &#123;&#125;\n</code></pre>\n<ul>\n<li>调用签名与构造签名</li>\n</ul>\n<pre><code class=\"typescript\">// 1.函数类型表达式\ntype BarType = (num1: number) =&gt; number\n\n// 2.函数的调用签名(从对象的角度来看待这个函数, 也可以有其他属性)\ninterface IBar &#123;\n  name: string\n  age: number\n  // 函数可以调用: 函数调用签名\n  (num1: number): number\n&#125;\n\nconst bar: IBar = (num1: number): number =&gt; &#123;\n  return 123\n&#125;\n\nbar.name = &quot;aaa&quot;\nbar.age = 18\nbar(123)\n\nexport &#123;&#125;\n// 开发中如何选择:\n// 1.如果只是描述函数类型本身(函数可以被调用), 使用函数类型表达式(Function Type Expressions)\n// 2.如果在描述函数作为对象可以被调用, 同时也有其他属性时, 使用函数调用签名(Call Signatures)\n</code></pre>\n<pre><code class=\"typescript\">class Person &#123;\n&#125;\n\ninterface ICTORPerson &#123;\n  new (): Person\n&#125;\n\nfunction factory(fn: ICTORPerson) &#123;\n  const f = new fn()\n  return f\n&#125;\n\nfactory(Person)\n</code></pre>\n<ul>\n<li>参数的可选类型：**function  foo(x :  number, y? : number){ }**，此时y的类型为number|undefined</li>\n<li>默认参数：**function  foo(x :  number, y : number&#x3D;6){ }**，此时y的类型为number|undefined</li>\n<li>剩余参数：**function  foo(…nums：number[]){ }**，剩余参数语法允许我们将一个不定数量的参数放到一个数组中</li>\n<li>函数重载：举例，传入字符串或者数组，获取到它的长度</li>\n</ul>\n<pre><code class=\"typescript\">// 1.普通的实现\nfunction getLength(arg) &#123;\n  return arg.length\n&#125;\n\n// 2.函数的重载\nfunction getLength(arg: string): number\nfunction getLength(arg: any[]): number\nfunction getLength(arg) &#123;\n  return arg.length\n&#125;\n\n// 3.联合类型实现(可以使用联合类型实现的情况, 尽量使用联合类型)\nfunction getLength(arg: string | any[]) &#123;\n  return arg.length\n&#125;\n\n// 4.对象类型实现\nfunction getLength(arg: &#123; length: number &#125;) &#123;\n  return arg.length\n&#125;\n</code></pre>\n<ul>\n<li><p>函数中的this：<a href=\"https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA\">前端面试之彻底搞懂this指向</a></p>\n<ul>\n<li>在没有指定this的情况，this默认情况下是any类型的，此时创建tsconfig.json文件，noImplicitThis设置为true，TypeScript 会根据上下文推导 this ，但是在不能正确推导时，就会报错，需要我们明确的指定 this </li>\n<li>函数的第一个参数我们可以根据该函数之后被调用的情况，用于声明this的类型(名词必须叫this)在后续调用函数传入参数时，从第二个参数开始传递的，this参数会在编译后被抹除</li>\n</ul>\n<pre><code class=\"typescript\">// 1.对象中的函数中的this\nconst obj = &#123;\n  name: &quot;why&quot;,\n  studying: function(this: &#123;&#125;) &#123;\n    // 默认情况下, this是any类型\n    console.log(this, &quot;studying&quot;)\n  &#125;\n&#125;\n\n// obj.studying()\nobj.studying.call(&#123;&#125;)\n\n\n// 2.普通的函数\nfunction foo(this: &#123; name: string &#125;, info: &#123;name: string&#125;) &#123;\n  console.log(this, info)\n&#125;\n\nfoo.call(&#123; name: &quot;why&quot; &#125;, &#123; name: &quot;kobe&quot; &#125;)\n\nexport &#123;&#125;\n</code></pre>\n<ul>\n<li>this相关的内置工具<ul>\n<li>ThisParameterType:用于提取一个函数类型Type的this (opens new window)参数类型;如果这个函数类型没有this参数返回unknown</li>\n<li>OmitThisParameter:用于移除一个函数类型Type的this参数类型,并且返回当前的函数类型</li>\n<li>ThisType:这个类型不返回一个转换过的类型，它被用作标记一个上下文的this 类型。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"typescript\">function foo(this: &#123; name: string &#125;, info: &#123;name: string&#125;) &#123;\n  console.log(this, info)\n&#125;\n\ntype FooType = typeof foo\n\n// 1.ThisParameterType: 获取FooType类型中this的类型\ntype FooThisType = ThisParameterType&lt;FooType&gt;\n\n\n// 2.OmitOmitThisParameter: 删除this参数类型, 剩余的函数类型\ntype PureFooType = OmitThisParameter&lt;FooType&gt;\n\n\n// 3.ThisType: 用于绑定一个上下文的this\ninterface IState &#123;\n  name: string\n  age: number\n&#125;\n\ninterface IStore &#123;\n  state: IState\n  eating: () =&gt; void\n  running: () =&gt; void\n&#125;\n\nconst store: IStore &amp; ThisType&lt;IState&gt; = &#123;\n  state: &#123;\n    name: &quot;why&quot;,\n    age: 18\n  &#125;,\n  eating: function() &#123;\n    console.log(this.name)\n  &#125;,\n  running: function() &#123;\n    console.log(this.name)\n  &#125;\n&#125;\n\nstore.eating.call(store.state)\n\nexport &#123;&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>匿名函数的参数会自动指定类型，会进行类型推断，这个过程称为上下文类型，因为函数执行的上下文可以帮助确定参数和返回值类型</p>\n</li>\n</ul>\n<pre><code class=\"ts\">const names: string[] = [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;]\n\n// 匿名函数最好不要添加类型注解\nnames.forEach(function(item, index, arr) &#123;\n  console.log(item, index, arr)\n&#125;)\n\nexport &#123;&#125;\n</code></pre>\n<ul>\n<li><p>联合类型和交叉类型</p>\n<ul>\n<li>联合类型：联合类型是由两个或者多个其他类型组成的类型，表示可以是这些类型中的任何一个值；联合类型中的每一个类型被称之为联合成员（ union’s members）</li>\n</ul>\n<pre><code class=\"typescript\">function printID(id: number | string) &#123;\n  console.log(&quot;您的ID:&quot;, id)\n\n  // 类型缩小\n  if (typeof id === &quot;string&quot;) &#123;\n    console.log(id.length)\n  &#125; else &#123;\n    console.log(id)\n  &#125;\n&#125;\n\nprintID(&quot;abc&quot;)\nprintID(123)\n</code></pre>\n<ul>\n<li>类型别名：类型别名和接口非常类似</li>\n</ul>\n<pre><code class=\"typescript\">// 类型别名: type\ntype MyNumber = number\nconst age: MyNumber = 18\n\n// 给ID的类型起一个别名\ntype IDType = number | string\n\nfunction printID(id: IDType) &#123;\n  console.log(id)\n&#125;\n\n\n// 打印坐标\ntype PointType = &#123; x: number, y: number, z?: number &#125;\nfunction printCoordinate(point: PointType) &#123;\n  console.log(point.x, point.y, point.z)\n&#125;\n</code></pre>\n<ul>\n<li>interface 和 type 都可以用来定义对象类型，如果是定义非对象类型 ，通常 推荐使用 type ，如果是定义对象类型，那么他们是有区别的：interface可以重复的对某个接口来定义属性和方法；而type 定义的是别名，别名是不能重复的</li>\n</ul>\n<pre><code class=\"typescript\">// 1.区别一: type类型使用范围更广, 接口类型只能用来声明对象\ntype MyNumber = number\ntype IDType = number | string\n\n// 2.区别二: 在声明对象时, interface可以多次声明\n// 2.1. type不允许两个相同名称的别名同时存在\n// type PointType1 = &#123;\n//   x: number\n//   y: number\n// &#125;\n\n// type PointType1 = &#123;\n//   z?: number\n// &#125;\n\n// 2.2. interface可以多次声明同一个接口名称\ninterface PointType2 &#123;\n  x: number\n  y: number\n&#125;\n\ninterface PointType2 &#123;\n  z: number\n&#125;\n\nconst point: PointType2 = &#123;\n  x: 100,\n  y: 200,\n  z: 300\n&#125;\n\n// 3.interface支持继承的\ninterface IPerson &#123;\n  name: string\n  age: number\n&#125;\n\ninterface IKun extends IPerson &#123;\n  kouhao: string\n&#125;\n\nconst ikun1: IKun = &#123;\n  kouhao: &quot;你干嘛, 哎呦&quot;,\n  name: &quot;kobe&quot;,\n  age: 30\n&#125;\n\n// 4.interface可以被类实现(TS面向对象时候再讲)\n// class Person implements IPerson &#123;\n// &#125;\n\n// 总结: 如果是非对象类型的定义使用type, 如果是对象类型的声明那么使用interface\n\nexport &#123;&#125;\n</code></pre>\n<ul>\n<li>交叉类型：交叉类似表示需要满足多个类型的条件，交叉类型使用&amp;符号</li>\n</ul>\n<pre><code class=\"typescript\">// 交叉类型: 两种(多种)类型要同时满足\ntype NewType = number &amp; string // 没有意义\n\ninterface IKun &#123;\n  name: string\n  age: number\n&#125;\n\ninterface ICoder &#123;\n  name: string\n  coding: () =&gt; void\n&#125;\n\ntype InfoType = IKun &amp; ICoder\n\nconst info: InfoType = &#123;\n  name: &quot;why&quot;,\n  age: 18,\n  coding: function() &#123;\n    console.log(&quot;coding&quot;)\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li><p><strong>类型断言</strong></p>\n<ul>\n<li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p>\n<ul>\n<li><p>第一种：as关键词</p>\n<ul>\n<li><pre><code class=\"typescript\">let someValue: unknown = &quot;this is a string&quot;;\nlet strLength: number = (someValue as string).length;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><p>第二种：尖括号语法</p>\n<ul>\n<li><pre><code class=\"typescript\">let someValue: unknown = &quot;this is a string&quot;;\nlet strLength: number = (&lt;string&gt;someValue).length;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>非空类型断言</p>\n<ul>\n<li><pre><code class=\"typescript\">// 访问属性: 可选链: ?.\nconsole.log(info.friend?.name)\n// 非空类型断言(有点危险, 只有确保friend一定有值的情况, 才能使用)\ninfo.friend!.name = &quot;james&quot;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>字面量类型</p>\n<ul>\n<li><pre><code class=\"typescript\">// 1.字面量类型的基本上\nconst name: &quot;why&quot; = &quot;why&quot;\nlet age: 18 = 18\n\n// 2.将多个字面量类型联合起来 |\ntype Direction = &quot;left&quot; | &quot;right&quot; | &quot;up&quot; | &quot;down&quot;\nconst d1: Direction = &quot;left&quot;\n\n// 栗子: 封装请求方法\ntype MethodType = &quot;get&quot; | &quot;post&quot;\nfunction request(url: string, method: MethodType) &#123;\n&#125;\n\nrequest(&quot;http://codercba.com/api/aaa&quot;, &quot;post&quot;)\n\nexport &#123;&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>类型缩小：在给定的执行路径中，我们可以缩小比声明时更小的类型 ，这个过程称之为缩小(Narrowing），typeof padding &#x3D;&#x3D;&#x3D; “number 可以称之为 <strong>类型保护(type guards):typeof、平等缩小(比如  &#x3D; &#x3D; &#x3D;、! &#x3D; &#x3D;)、instanceof、in、等等…</strong></p>\n<pre><code class=\"typescript\">// 1.typeof: 使用的最多\nfunction printID(id: number | string) &#123;\n  if (typeof id === &quot;string&quot;) &#123;\n    console.log(id.length, id.split(&quot; &quot;))\n  &#125; else &#123;\n    console.log(id)\n  &#125;\n&#125;\n\n\n// 2.===/!==: 方向的类型判断\ntype Direction = &quot;left&quot; | &quot;right&quot; | &quot;up&quot; | &quot;down&quot;\nfunction switchDirection(direction: Direction) &#123;\n  if (direction === &quot;left&quot;) &#123;\n    console.log(&quot;左:&quot;, &quot;角色向左移动&quot;)\n  &#125; else if (direction === &quot;right&quot;) &#123;\n    console.log(&quot;右:&quot;, &quot;角色向右移动&quot;)\n  &#125; else if (direction === &quot;up&quot;) &#123;\n    console.log(&quot;上:&quot;, &quot;角色向上移动&quot;)\n  &#125; else if (direction === &quot;down&quot;) &#123;\n    console.log(&quot;下:&quot;, &quot;角色向下移动&quot;)\n  &#125;\n&#125;\n\n\n// 3. instanceof: 传入一个日期, 打印日期\nfunction printDate(date: string | Date) &#123;\n  if (date instanceof Date) &#123;\n    console.log(date.getTime())\n  &#125; else &#123;\n    console.log(date)\n  &#125;\n&#125;\n\n\n// 4.in: 判断是否有某一个属性\ninterface ISwim &#123;\n  swim: () =&gt; void\n&#125;\n\ninterface IRun &#123;\n  run: () =&gt; void\n&#125;\n\nfunction move(animal: ISwim | IRun) &#123;\n  if (&quot;swim&quot; in animal) &#123;\n    animal.swim()\n  &#125; else if (&quot;run&quot; in animal) &#123;\n    animal.run()\n  &#125;\n&#125;\n\nconst fish: ISwim = &#123;\n  swim: function() &#123;&#125;\n&#125;\n\nconst dog: IRun = &#123;\n  run: function() &#123;&#125;\n&#125;\n\nmove(fish)\nmove(dog)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、编译选项\"><a href=\"#3、编译选项\" class=\"headerlink\" title=\"3、编译选项\"></a>3、编译选项</h2><ul>\n<li><p>自动编译文件</p>\n<ul>\n<li><p>编译文件时，使用 <code>-w </code> 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"powershell\">tsc xxx.ts -w\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>自动编译整个项目</p>\n<ul>\n<li><p>如果直接使用<code>tsc</code>指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p>\n</li>\n<li><p>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json(<code>tsc --init</code>)</p>\n</li>\n<li><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需<code> tsc</code> 命令即可完成对整个项目的编译<code>tsc -w</code>自动监视所有文件</p>\n</li>\n<li><p>配置选项：</p>\n<ul>\n<li><p><strong>include</strong></p>\n<ul>\n<li><p>定义希望被编译文件所在的目录</p>\n</li>\n<li><p>默认值：[“**&#x2F;*“]    (** 表示任意目录 *表示任意文件)</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;include&quot;:[&quot;src/**/*&quot;, &quot;tests/**/*&quot;]\n</code></pre>\n</li>\n<li><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>exclude</strong></p>\n<ul>\n<li><p>定义需要排除在外的目录</p>\n</li>\n<li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]\n</code></pre>\n</li>\n<li><p>上述示例中，src下hello目录下的文件都不会被编译</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>extends</strong></p>\n<ul>\n<li><p>定义被继承的配置文件</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;extends&quot;: &quot;./configs/base&quot;\n</code></pre>\n</li>\n<li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>files</strong></p>\n<ul>\n<li><p>指定被编译文件的列表，只有需要编译的<strong>文件少时才会用到</strong></p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;files&quot;: [\n    &quot;core.ts&quot;,\n    &quot;sys.ts&quot;,\n    &quot;types.ts&quot;,\n    &quot;scanner.ts&quot;,\n    &quot;parser.ts&quot;,\n    &quot;utilities.ts&quot;,\n    &quot;binder.ts&quot;,\n    &quot;checker.ts&quot;,\n    &quot;tsc.ts&quot;\n  ]\n</code></pre>\n</li>\n<li><p>列表中的文件都会被TS编译器所编译</p>\n</li>\n</ul>\n</li>\n<li><p><strong>compilerOptions</strong></p>\n<ul>\n<li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p>\n</li>\n<li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p>\n<ul>\n<li><p>项目选项</p>\n<ul>\n<li><p><strong>target</strong></p>\n<ul>\n<li><p>设置ts代码编译的目标版本</p>\n</li>\n<li><p>可选值：</p>\n<ul>\n<li>ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext(ES最新版本)</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;target&quot;: &quot;ES6&quot;\n&#125;\n</code></pre>\n</li>\n<li><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>lib</strong></p>\n<ul>\n<li><p>指定代码运行时所包含的库（宿主环境）</p>\n</li>\n<li><p>可选值：</p>\n<ul>\n<li>ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;target&quot;: &quot;ES6&quot;,\n    &quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;],\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &quot;outFile&quot;: &quot;dist/aa.js&quot;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>module</strong></p>\n<ul>\n<li><p>设置编译后代码使用的模块化系统</p>\n</li>\n<li><p>可选值：</p>\n<ul>\n<li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"typescript\">&quot;compilerOptions&quot;: &#123;\n    &quot;module&quot;: &quot;CommonJS&quot;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>outDir</strong></p>\n<ul>\n<li><p>编译后文件的所在目录</p>\n</li>\n<li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;outDir&quot;: &quot;dist&quot;\n&#125;\n</code></pre>\n</li>\n<li><p>设置后编译后的js文件将会生成到dist目录</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>outFile</strong></p>\n<ul>\n<li><p>将所有的文件编译为一个js文件</p>\n</li>\n<li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;outFile&quot;: &quot;dist/app.js&quot;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>rootDir</strong></p>\n<ul>\n<li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;rootDir&quot;: &quot;./src&quot;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>allowJs</strong></p>\n<ul>\n<li>是否对js文件编译</li>\n</ul>\n</li>\n<li><p><strong>checkJs</strong></p>\n<ul>\n<li><p>是否对js文件进行检查</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"json\">&quot;compilerOptions&quot;: &#123;\n    &quot;allowJs&quot;: true,\n    &quot;checkJs&quot;: true\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>removeComments</strong></p>\n<ul>\n<li>是否删除注释</li>\n<li>默认值：false</li>\n</ul>\n</li>\n<li><p><strong>noEmit</strong></p>\n<ul>\n<li>不对代码进行编译</li>\n<li>默认值：false</li>\n</ul>\n</li>\n<li><p><strong>sourceMap</strong></p>\n<ul>\n<li>是否生成sourceMap</li>\n<li>默认值：false</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>严格检查</strong></p>\n<ul>\n<li><strong>strict</strong><ul>\n<li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li>\n</ul>\n</li>\n<li><strong>alwaysStrict</strong><ul>\n<li>总是以严格模式对代码进行编译</li>\n</ul>\n</li>\n<li><strong>noImplicitAny</strong><ul>\n<li>禁止隐式的any类型</li>\n</ul>\n</li>\n<li><strong>noImplicitThis</strong><ul>\n<li>禁止类型不明确的this</li>\n</ul>\n</li>\n<li><strong>strictBindCallApply</strong><ul>\n<li>严格检查bind、call和apply的参数列表</li>\n</ul>\n</li>\n<li><strong>strictFunctionTypes</strong><ul>\n<li>严格检查函数的类型</li>\n</ul>\n</li>\n<li><strong>strictNullChecks</strong><ul>\n<li>严格的空值检查</li>\n</ul>\n</li>\n<li><strong>strictPropertyInitialization</strong><ul>\n<li>严格检查属性是否初始化</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>额外检查</strong></p>\n<ul>\n<li><strong>noFallthroughCasesInSwitch</strong><ul>\n<li>检查switch语句包含正确的break</li>\n</ul>\n</li>\n<li><strong>noImplicitReturns</strong><ul>\n<li>检查函数没有隐式的返回值</li>\n</ul>\n</li>\n<li><strong>noUnusedLocals</strong><ul>\n<li>检查未使用的局部变量</li>\n</ul>\n</li>\n<li><strong>noUnusedParameters</strong><ul>\n<li>检查未使用的参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>高级</strong></p>\n<ul>\n<li><strong>allowUnreachableCode</strong><ul>\n<li>检查不可达代码</li>\n<li>可选值：<ul>\n<li>true，忽略不可达代码</li>\n<li>false，不可达代码将引起错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>noEmitOnError</strong><ul>\n<li>有错误的情况下不进行编译</li>\n<li>默认值：false</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、webpack\"><a href=\"#4、webpack\" class=\"headerlink\" title=\"4、webpack\"></a>4、webpack</h2><ul>\n<li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p>\n</li>\n<li><p>步骤：</p>\n<ol>\n<li><p>初始化项目</p>\n<ul>\n<li>进入项目根目录，执行命令 <code>npm init -y</code><ul>\n<li>主要作用：创建package.json文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>下载构建工具</p>\n<ul>\n<li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul>\n<li>共安装了7个包<ul>\n<li>webpack<ul>\n<li>构建工具webpack</li>\n</ul>\n</li>\n<li>webpack-cli<ul>\n<li>webpack的命令行工具</li>\n</ul>\n</li>\n<li>webpack-dev-server<ul>\n<li>webpack的开发服务器</li>\n</ul>\n</li>\n<li>typescript<ul>\n<li>ts编译器</li>\n</ul>\n</li>\n<li>ts-loader<ul>\n<li>ts加载器，用于在webpack中编译ts文件</li>\n</ul>\n</li>\n<li>html-webpack-plugin<ul>\n<li>webpack中html插件，用来自动创建html文件</li>\n</ul>\n</li>\n<li>clean-webpack-plugin<ul>\n<li>webpack中的清除插件，每次构建都会先清除目录</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>根目录下创建webpack的配置文件webpack.config.js</p>\n<ul>\n<li><pre><code class=\"javascript\">const path = require(&quot;path&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\nconst &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);\n\nmodule.exports = &#123;\n    optimization:&#123;\n        minimize: false // 关闭代码压缩，可选\n    &#125;,\n\n    entry: &quot;./src/index.ts&quot;,\n    \n    devtool: &quot;inline-source-map&quot;,\n    \n    devServer: &#123;\n        contentBase: &#39;./dist&#39;\n    &#125;,\n\n    output: &#123;\n        path: path.resolve(__dirname, &quot;dist&quot;),\n        filename: &quot;bundle.js&quot;,\n        environment: &#123;\n            arrowFunction: false // 关闭webpack的箭头函数，可选\n        &#125;\n    &#125;,\n\n    resolve: &#123;\n        extensions: [&quot;.ts&quot;, &quot;.js&quot;]\n    &#125;,\n    \n    module: &#123;\n        rules: [\n            &#123;\n                test: /\\.ts$/,\n                use: &#123;\n                   loader: &quot;ts-loader&quot;     \n                &#125;,\n                exclude: /node_modules/\n            &#125;\n        ]\n    &#125;,\n\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin(&#123;\n            title:&#39;TS测试&#39;\n        &#125;),\n    ]\n\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>根目录下创建tsconfig.json，配置可以根据自己需要</p>\n<ul>\n<li><pre><code class=\"json\">&#123;\n    &quot;compilerOptions&quot;: &#123;\n        &quot;target&quot;: &quot;ES2015&quot;,\n        &quot;module&quot;: &quot;ES2015&quot;,\n        &quot;strict&quot;: true\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>修改package.json添加如下配置</p>\n<ul>\n<li><pre><code class=\"json\">&#123;\n  ...略...\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;build&quot;: &quot;webpack&quot;,\n    &quot;start&quot;: &quot;webpack serve --open chrome.exe&quot;\n  &#125;,\n  ...略...\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5、Babel\"><a href=\"#5、Babel\" class=\"headerlink\" title=\"5、Babel\"></a>5、Babel</h2><ul>\n<li><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p>\n<ol>\n<li><p>安装依赖包：</p>\n<ul>\n<li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li>\n<li>共安装了4个包，分别是：<ul>\n<li>@babel&#x2F;core<ul>\n<li>babel的核心工具</li>\n</ul>\n</li>\n<li>@babel&#x2F;preset-env<ul>\n<li>babel的预定义环境</li>\n</ul>\n</li>\n<li>@babel-loader<ul>\n<li>babel在webpack中的加载器</li>\n</ul>\n</li>\n<li>core-js<ul>\n<li>core-js用来使老版本的浏览器支持新版ES语法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>修改webpack.config.js配置文件</p>\n<ul>\n<li><pre><code class=\"javascript\">...略...\nmodule: &#123;\n    rules: [\n        &#123;\n            test: /\\.ts$/,\n            use: [\n                &#123;\n                    loader: &quot;babel-loader&quot;,\n                    options:&#123;\n                        presets: [\n                            [\n                                &quot;@babel/preset-env&quot;,\n                                &#123;\n                                    &quot;targets&quot;:&#123;\n                                        &quot;chrome&quot;: &quot;58&quot;,\n                                        &quot;ie&quot;: &quot;11&quot;\n                                    &#125;,\n                                    &quot;corejs&quot;:&quot;3&quot;,\n                                    &quot;useBuiltIns&quot;: &quot;usage&quot;\n                                &#125;\n                            ]\n                        ]\n                    &#125;\n                &#125;,\n                &#123;\n                    loader: &quot;ts-loader&quot;,\n\n                &#125;\n            ],\n            exclude: /node_modules/\n        &#125;\n    ]\n&#125;\n...略...\n</code></pre>\n</li>\n<li><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h1 id=\"二、面向对象\"><a href=\"#二、面向对象\" class=\"headerlink\" title=\"二、面向对象\"></a>二、面向对象</h1><h2 id=\"0、面向对象简介\"><a href=\"#0、面向对象简介\" class=\"headerlink\" title=\"0、面向对象简介\"></a>0、面向对象简介</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p>\n<ul>\n<li>举例来说：<ul>\n<li>操作浏览器要使用window对象</li>\n<li>操作网页要使用document对象</li>\n<li>操作控制台要使用console对象</li>\n</ul>\n</li>\n</ul>\n<p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p>\n<p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p>\n<h2 id=\"1、类（class）\"><a href=\"#1、类（class）\" class=\"headerlink\" title=\"1、类（class）\"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p>\n<ul>\n<li><p>定义类：</p>\n<ul>\n<li><pre><code class=\"typescript\">class 类名 &#123;\n    属性名: 类型;\n    \n    constructor(参数: 类型)&#123;\n        this.属性名 = 参数;\n    &#125;\n    \n    方法名()&#123;\n        ....\n    &#125;\n\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>示例：构造函数不需要返回任何值，默认返回当前创建出来的实例</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person&#123;\n    name: string;\n    age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n\n    sayHello()&#123;\n        console.log(`大家好，我是$&#123;this.name&#125;`);\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>使用类：</p>\n<ul>\n<li><pre><code class=\"typescript\">const p = new Person(&#39;孙悟空&#39;, 18);\np.sayHello();\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>直接定义的属性是实例属性，需要通过对象的实例去访问；使用static开头的属性是静态属性（类属性），可以直接通过类去访问<code>static readonly age: number = 18</code>;；readonly开头的属性表示一个只读的属性无法修改<code>readonly name: string = &#39;孙悟空&#39;;</code></li>\n<li>TypeScript对于类型检测的时候使用的鸭子类型</li>\n<li>鸭子类型: 如果一只鸟, 走起来像鸭子, 游起来像鸭子, 看起来像鸭子, 那么你可以认为它就是一只鸭子。即鸭子类型, 只关心属性和行为, 不关心你具体是不是对应的类型</li>\n<li>有的时候，你不能提前知道一个类型里的所有属性的名字，但是你知道这些值的特征;这种情况，<strong>你就可以用一个索引签名</strong>(index signature)来描述可能的值的类型;<strong>一个索引签名的属性类型必须是string或者是number</strong></li>\n</ul>\n<pre><code class=\"typescript\">interface MyObject &#123;\n  [key: string]: number;\n&#125;\n\nconst obj: MyObject = &#123;\n  a: 1,\n  b: 2,\n  c: 3,\n&#125;;\n\nconsole.log(obj[&#39;a&#39;]); // 输出: 1\nconsole.log(obj[&#39;b&#39;]); // 输出: 2\nconsole.log(obj[&#39;c&#39;]); // 输出: 3\n</code></pre>\n<h2 id=\"2、面向对象的特点\"><a href=\"#2、面向对象的特点\" class=\"headerlink\" title=\"2、面向对象的特点\"></a>2、面向对象的特点</h2><ul>\n<li><p>封装</p>\n<ul>\n<li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p>\n</li>\n<li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p>\n</li>\n<li><p>只读属性（readonly）：</p>\n<ul>\n<li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li>\n</ul>\n</li>\n<li><p>TS中属性具有三种修饰符：</p>\n<ul>\n<li><strong>public（默认值），可以在类、子类和对象中修改</strong></li>\n<li><strong>protected ，可以在类、子类中修改</strong></li>\n<li><strong>private ，可以在类中修改</strong></li>\n</ul>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><p>public – public是默认的修饰符，也是可以直接访问的</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person&#123;\n    public name: string; // 写或什么都不写都是public\n    public age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name; // 可以在类中修改\n        this.age = age;\n    &#125;\n\n    sayHello()&#123;\n        console.log(`大家好，我是$&#123;this.name&#125;`);\n    &#125;\n&#125;\n\nclass Employee extends Person&#123;\n    constructor(name: string, age: number)&#123;\n        super(name, age);\n        this.name = name; //子类中可以修改\n    &#125;\n&#125;\n\nconst p = new Person(&#39;孙悟空&#39;, 18);\np.name = &#39;猪八戒&#39;;// 可以通过对象修改\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>protected</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person&#123;\n    protected name: string;\n    protected age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name; // 可以修改\n        this.age = age;\n    &#125;\n\n    sayHello()&#123;\n        console.log(`大家好，我是$&#123;this.name&#125;`);\n    &#125;\n&#125;\n\nclass Employee extends Person&#123;\n\n    constructor(name: string, age: number)&#123;\n        super(name, age);\n        this.name = name; //子类中可以修改\n    &#125;\n&#125;\n\nconst p = new Person(&#39;孙悟空&#39;, 18);\np.name = &#39;猪八戒&#39;;// 不能修改\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>private</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person&#123;\n    private name: string;\n    private age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name; // 可以修改\n        this.age = age;\n    &#125;\n\n    sayHello()&#123;\n        console.log(`大家好，我是$&#123;this.name&#125;`);\n    &#125;\n&#125;\n\nclass Employee extends Person&#123;\n\n    constructor(name: string, age: number)&#123;\n        super(name, age);\n        this.name = name; //子类中不能修改\n    &#125;\n&#125;\n\nconst p = new Person(&#39;孙悟空&#39;, 18);\np.name = &#39;猪八戒&#39;;// 不能修改\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>readonly – 不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用readonly</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person &#123;\n  readonly name: string\n  age: number\n\n  constructor(name: string, age: number) &#123;\n    this.name = name\n    this.age = age\n  &#125;\n&#125;\n\n// 类和实例之间的关系(重要)\nconst p = new Person(&quot;why&quot;, 18)\nconsole.log(p.name, p.age)\n\n// p.name = &quot;kobe&quot; 只读属性不能进行写入操作\np.age = 20\n\nexport &#123;&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>属性存取器</p>\n<ul>\n<li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p>\n</li>\n<li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p>\n</li>\n<li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p>\n</li>\n<li><p><strong>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</strong></p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"typescript\">class Person&#123;\n    private _name: string;\n\n    constructor(name: string)&#123;\n        this._name = name;\n    &#125;\n\n    get name()&#123;\n        return this._name;\n    &#125;\n\n    set name(name: string)&#123;\n        this._name = name;\n    &#125;\n\n&#125;\n\nconst p1 = new Person(&#39;孙悟空&#39;);\nconsole.log(p1.name); // 通过getter读取name属性\np1.name = &#39;猪八戒&#39;; // 通过setter修改name属性\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态属性</p>\n<ul>\n<li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p>\n</li>\n<li><p>静态属性（方法）使用static开头</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"typescript\">class Tools&#123;\n    static PI = 3.1415926;\n    \n    static sum(num1: number, num2: number)&#123;\n        return num1 + num2\n    &#125;\n&#125;\n\nconsole.log(Tools.PI);\nconsole.log(Tools.sum(123, 456));\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>this</p>\n<ul>\n<li><strong>在类中，使用this表示当前对象</strong></li>\n</ul>\n</li>\n<li><p>参数属性</p>\n<ul>\n<li>通过在构造函数参数前添加一个可见性修饰符public private protected或者readonly来创建参数属性，最后这些类属性字段也会得到这些修饰符</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n<li><p>继承</p>\n<ul>\n<li><p>继承是面向对象中的又一个特性</p>\n</li>\n<li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p>\n<ul>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"typescript\">class Animal&#123;\n    name: string;\n    age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n&#125;\n\nclass Dog extends Animal&#123;\n\n    bark()&#123;\n        console.log(`$&#123;this.name&#125;在汪汪叫！`);\n    &#125;\n&#125;\n\nconst dog = new Dog(&#39;旺财&#39;, 4);\ndog.bark();\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>通过继承可以在不修改类的情况下完成对类的扩展</p>\n</li>\n<li><p>重写</p>\n<ul>\n<li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><pre><code class=\"typescript\">class Animal&#123;\n    name: string;\n    age: number;\n\n    constructor(name: string, age: number)&#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n\n    run()&#123;\n        console.log(`父类中的run方法！`);\n    &#125;\n&#125;\n\nclass Dog extends Animal&#123;\n\n    bark()&#123;\n        console.log(`$&#123;this.name&#125;在汪汪叫！`);\n    &#125;\n\n    run()&#123;\n        console.log(`子类中的run方法，会重写父类中的run方法！`);\n    &#125;\n&#125;\n\nconst dog = new Dog(&#39;旺财&#39;, 4);\ndog.bark();\n</code></pre>\n</li>\n<li><p>在子类中可以使用super来完成对父类的引用(构造函数)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抽象类（abstract class）</p>\n<ul>\n<li><p>抽象类是专门用来被其他类所继承的类，它<strong>只能被其他类所继承不能用来创建实例</strong></p>\n</li>\n<li><pre><code class=\"typescript\">abstract class Animal&#123;\n    abstract run(): void;\n    bark()&#123;\n        console.log(&#39;动物在叫~&#39;);\n    &#125;\n&#125;\n\nclass Dog extends Animals&#123;\n    run()&#123;\n        console.log(&#39;狗在跑~&#39;);\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，<strong>继承抽象类时抽象方法必须要实现</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、接口（Interface）\"><a href=\"#3、接口（Interface）\" class=\"headerlink\" title=\"3、接口（Interface）\"></a>3、接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p>\n<ul>\n<li><p>示例（检查对象类型）：</p>\n<ul>\n<li><pre><code class=\"typescript\">interface Person&#123;\n    name: string;\n    sayHello():void;\n&#125;\n\nfunction fn(per: Person)&#123;\n    per.sayHello();\n&#125;\n\nfn(&#123;name:&#39;孙悟空&#39;, sayHello() &#123;console.log(`Hello, 我是 $&#123;this.name&#125;`)&#125;&#125;);\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>示例（实现）</p>\n<ul>\n<li><pre><code class=\"typescript\">interface Person&#123;\n    name: string;\n    sayHello():void;\n&#125;\n\nclass Student implements Person&#123;\n    constructor(public name: string) &#123;\n    &#125;\n\n    sayHello() &#123;\n        console.log(&#39;大家好，我是&#39;+this.name);\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>接口支持多继承，类不支持多继承，<code>interface IKun extends IPerson &#123;&#125;</code></p>\n</li>\n</ul>\n<h2 id=\"4、泛型（Generic）\"><a href=\"#4、泛型（Generic）\" class=\"headerlink\" title=\"4、泛型（Generic）\"></a>4、泛型（Generic）</h2><p>软件工程的主要目的是构建不仅仅明确和一致的API，还要让代码具有很强的可重用性。定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p>\n<ul>\n<li><p>举个例子：</p>\n<ul>\n<li><pre><code class=\"typescript\">function test(arg: any): any&#123;\n    return arg;\n&#125;\n</code></pre>\n</li>\n<li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p>\n</li>\n<li><p>使用泛型：</p>\n</li>\n<li><pre><code class=\"typescript\">function test&lt;T&gt;(arg: T): T&#123;\n    return arg;\n&#125;\n</code></pre>\n</li>\n<li><pre><code class=\"typescript\">// 1.定义函数: 将传入的内容返回\n// number/string/&#123;name: string&#125;\nfunction bar&lt;Type&gt;(arg: Type): Type &#123;\n  return arg\n&#125;\n\n// 1.1. 完整的写法\nconst res1 = bar&lt;number&gt;(123)\nconst res2 = bar&lt;string&gt;(&quot;abc&quot;)\nconst res3 = bar&lt;&#123;name: string&#125;&gt;(&#123; name: &quot;why&quot; &#125;)\n\n// 1.2. 省略的写法\nconst res4 = bar(&quot;aaaaaaaaa&quot;)\nconst res5 = bar(11111111)\n</code></pre>\n</li>\n<li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p>\n</li>\n<li><p>那么如何使用上边的函数呢？</p>\n<ul>\n<li><p>方式一（直接使用）：</p>\n<ul>\n<li><pre><code class=\"typescript\">test(10)\n</code></pre>\n</li>\n<li><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p>\n</li>\n</ul>\n</li>\n<li><p>方式二（指定类型）：</p>\n<ul>\n<li><pre><code class=\"typescript\">test&lt;number&gt;(10)\n</code></pre>\n</li>\n<li><p>也可以在函数后手动指定泛型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p>\n<ul>\n<li><pre><code class=\"typescript\">function test&lt;T, K&gt;(a: T, b: K): K&#123;\n    return b;\n&#125;\n\ntest&lt;number, string&gt;(10, &quot;hello&quot;);\n</code></pre>\n</li>\n<li><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用</p>\n</li>\n</ul>\n</li>\n<li><p>类中同样可以使用泛型：</p>\n<ul>\n<li><pre><code class=\"typescript\">class MyClass&lt;T&gt;&#123;\n    prop: T;\n\n    constructor(prop: T)&#123;\n        this.prop = prop;\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>除此之外，也可以对泛型的范围进行约束</p>\n<ul>\n<li><pre><code class=\"typescript\">interface MyInter&#123;\n    length: number;\n&#125;\n\nfunction test&lt;T extends MyInter&gt;(arg: T): number&#123;\n    return arg.length;\n&#125;\n</code></pre>\n</li>\n<li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p>\n</li>\n</ul>\n</li>\n<li><p>映射类型，就是使用了PropertyKeys 联合类型的泛型;其中 PropertyKeys 多是通过keyof 创建，然后循环遍历键名创建一个类型</p>\n<ul>\n<li><pre><code class=\"typescript\">// TypeScript提供了映射类型: 函数\n// 映射类型不能使用interface定义\n// Type = IPerson\n// keyof = &quot;name&quot; | &quot;age&quot;\ntype MapPerson&lt;Type&gt; = &#123;\n  // 索引类型以此进行使用\n  [aaa in keyof Type]: Type[aaa]\n&#125;\n\n// type MapPerson&lt;Type&gt; = &#123;\n//   readonly [Property in keyof Type]?: Type[Property]\n// &#125;\n\ninterface IPerson &#123;\n  name: string\n  age: number\n&#125;\n\n// 拷贝一份IPerson\ntype NewPerson = MapPerson&lt;IPerson&gt;\n\nexport &#123;&#125;\n</code></pre>\n</li>\n<li><p>在使用映射类型时，有两个额外的修饰符可能会用到:</p>\n<ul>\n<li><p>一个是readonly，用于设置属性只读</p>\n</li>\n<li><p>一个是?，用于设置属性可选</p>\n</li>\n<li><p>可以通过前缀–或者＋删除（移除）或者添加这些修饰符，如果没有写前缀，相当于使用了＋前缀</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"三、类型体操\"><a href=\"#三、类型体操\" class=\"headerlink\" title=\"三、类型体操\"></a>三、类型体操</h1><h2 id=\"0、类型体操简介\"><a href=\"#0、类型体操简介\" class=\"headerlink\" title=\"0、类型体操简介\"></a>0、类型体操简介</h2><ul>\n<li>TypeScript 的目的是为 JavaScript 添加一套类型校验系统 ，因为 JavaScript 本身的灵活性，也让 TypeScript 类型系统<br>不得不增加更附加的功能 以适配 JavaScript 的灵活性</li>\n<li>TypeScript 是一种可以 支持类型编程的类型系统</li>\n<li>你在开发一些框架、库，或者通用性的工具，为了考虑各种适配的情况，就需要使用类型编程</li>\n<li>TypeScript本身为我们提供了类型工具，帮助我们辅助进行类型转换</li>\n</ul>\n<h2 id=\"1、条件类型\"><a href=\"#1、条件类型\" class=\"headerlink\" title=\"1、条件类型\"></a>1、条件类型</h2><ul>\n<li>很多时候，日常开发中我们需要基于输入的值来决定输出的值，同样我们也需要基于输入的值的类型来决定输出的值的类型。</li>\n<li><strong>条件类型(Conditional types）就是用来帮助我们描述输入类型和输出类型之间的关系。</strong></li>\n<li><code>SomeType extends OtherType ? TrueType : FalseType</code></li>\n</ul>\n<pre><code class=\"typescript\">function sum &lt;T extends number | string&gt;(arg1: T, arg2: T): T extends number ? number : string \nfunction sum (arg1: any, arg2: any) &#123;\n  return arg1 + arg2\n&#125;\n\nconst result = sum(1, 2)\nconst result2 = sum(&#39;1&#39;, &#39;2&#39;)\n</code></pre>\n<ul>\n<li>条件类型提供了<strong>infer</strong> 关键词，可以从正在比较的类型中推断类型，然后在true分支里引用该推断结果</li>\n</ul>\n<pre><code class=\"typescript\">type CalcFnType = (num1: number, num2: number) =&gt; number\ntype YKReturnType &lt;T extends (...args: any[]) =&gt; any&gt; = T extends (...args: any[]) =&gt; infer R ? R : never\ntype CalcFnReturnType = YKReturnType&lt;CalcFnType&gt;\n\ntype ParamType &lt;T extends (...args: any[]) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never\ntype CalcFnParamType = ParamType&lt;CalcFnType&gt;\n</code></pre>\n<ul>\n<li>分发条件类型：当在泛型中使用条件类型的时候，如果传入一个联合类型，就会变成分发的</li>\n</ul>\n<pre><code class=\"typescript\">type toArray&lt;Type&gt; = Type extends any ? Type[] : never\n\ntype newType = toArray&lt;number | string&gt; // number[] | string[]\n</code></pre>\n<h2 id=\"2、类型体操\"><a href=\"#2、类型体操\" class=\"headerlink\" title=\"2、类型体操\"></a>2、类型体操</h2><p><strong>Record&lt; Type &gt;</strong></p>\n<ul>\n<li>以 typeof 格式快速创建一个类型，此类型包含一组指定的属性且都是<strong>必填</strong>。具体的复杂业务场景中，一般会接口 <code>Pick</code> 、<code>Partial</code> 等组合使用，从而过滤和重组出新的类型定义。</li>\n</ul>\n<pre><code class=\"ts\">type Coord = Record&lt;&#39;x&#39; | &#39;y&#39;, number&gt;;\n\n// 等同于\ntype Coord = &#123;\n    x: number;\n    y: number;\n&#125;\n</code></pre>\n<p><strong>Partial&lt; Type &gt;</strong></p>\n<ul>\n<li>构造一个Type下面的所有属性都设置为<strong>可选</strong>的类型</li>\n</ul>\n<pre><code class=\"ts\">type Coord = Partial&lt;Record&lt;&#39;x&#39; | &#39;y&#39;, number&gt;&gt;;\n\n// 等同于\ntype Coord = &#123;\n    x?: number;\n    y?: number;\n&#125;\n</code></pre>\n<p><strong>Readonly&lt; Type &gt;</strong></p>\n<ul>\n<li>构造一个Type下面的所有属性全都设置为<strong>只读</strong>的类型，意味着这个类型的所有的属性全都不可以重新赋值</li>\n</ul>\n<pre><code class=\"ts\">type Coord = Readonly&lt;Record&lt;&#39;x&#39; | &#39;y&#39;, number&gt;&gt;;\n\n// 等同于\ntype Coord = &#123;\n    readonly x: number;\n    readonly y: number;\n&#125;\n\n// 如果进行了修改，则会报错：\nconst c: Coord = &#123; x: 1, y: 1 &#125;;\nc.x = 2; // Error: Cannot assign to &#39;x&#39; because it is a read-only property.\n</code></pre>\n<p><strong>Pick</strong></p>\n<ul>\n<li>构造—个类型，它是从Type类型里面<strong>挑选</strong>了—些属性Keys</li>\n</ul>\n<pre><code class=\"ts\">type Coord = Record&lt;&#39;x&#39; | &#39;y&#39;, number&gt;;\ntype CoordX = Pick&lt;Coord, &#39;x&#39;&gt;;\n\n// 等用于\ntype CoordX = &#123;\n    x: number;\n&#125;\n</code></pre>\n<p><strong>Required&lt; Type &gt;</strong></p>\n<ul>\n<li>构造一个Type下面的所有属性全都设置为<strong>必填</strong>的类型，这个工具类型跟 Partial相反</li>\n</ul>\n<pre><code class=\"ts\">type Coord = Required&lt;&#123; x: number, y?:number &#125;&gt;;\n\n// 等同于\ntype Coord = &#123;\n    x: number;\n    y: number;\n&#125;\n</code></pre>\n<p><strong>Exclude&lt;UnionType, ExcludedMembers&gt;</strong></p>\n<ul>\n<li>构造一个类型，它是从UnionType联合类型里面<strong>排除</strong>了所有可以赋给ExcludedMembers的类型</li>\n</ul>\n<pre><code class=\"ts\">type T0 = Exclude&lt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39;, &#39;b&#39;&gt; // &#39;a&#39; | &#39;c&#39;\ntype T1 = Exclude&lt;string | number | boolean, boolean&gt; // string | number\n</code></pre>\n<p><strong>Extract&lt;Type, Union&gt;</strong></p>\n<ul>\n<li>构造一个类型，它是从Type类型里面<strong>提取</strong>了所有可以赋给Union的类型</li>\n</ul>\n<pre><code class=\"ts\">type T0 = Extract&lt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39;, &#39;a&#39;&gt; // &#39;a&#39;\ntype T1 = Extract&lt;string | number | boolean, boolean&gt; // boolean\n</code></pre>\n<p><strong>Omit&lt; Type Keys &gt;</strong></p>\n<ul>\n<li>构造一个类型，它是从Type类型里面<strong>过滤</strong>了一些属性Keys</li>\n</ul>\n<pre><code class=\"ts\">interface I1 &#123;\n    a: number;\n    b: string;\n    c: boolean;\n&#125;\n\ntype AC = Omit&lt;I1, &#39;b&#39;&gt;;     // &#123; a:number; c:boolean &#125; \ntype C = Omit&lt;I1, &#39;a&#39; |&#39;b&#39;&gt;  // &#123; c: boolean &#125;\n</code></pre>\n<p><strong>NonNullable&lt; Type &gt;</strong></p>\n<ul>\n<li>构造一个类型，这个类型从Type中<strong>排除了所有的null、undefined</strong>的类型</li>\n</ul>\n<pre><code class=\"ts\">type T1 = NonNullable&lt;string | null | undefined&gt;; // string\n</code></pre>\n<p><strong>Parameters&lt;T extends (…args: any) &#x3D;&gt;any&gt;</strong></p>\n<ul>\n<li>获取函数的全部参数类型，以 <strong>元组类型</strong> 返回</li>\n</ul>\n<pre><code class=\"ts\">type F1 = (a: string, b: number) =&gt; void;\n\ntype F1ParamTypes = Parameters(F1);  // [string, number]\n</code></pre>\n<p><strong>ConstructorParameters&lt;T extends new (…args: any) &#x3D;&gt;any&gt;</strong></p>\n<ul>\n<li>获取的是 <strong>构造函数</strong> 的全部参数。关于构造函数声明，以及如何使用此 高级类型 的方式：</li>\n</ul>\n<pre><code class=\"ts\">interface IEntity &#123;\n    count?: () =&gt; number\n&#125;\n\ninterface IEntityConstructor &#123;\n    new (a: boolean, b: string): IEntity;\n&#125;\n\nclass Entity implements IEntity &#123;\n    constructor(a: boolean, b: string) &#123; &#125;\n&#125;\n\ntype EntityConstructorParamType = ConstructorParameters&lt;IEntityConstructor&gt;; // [boolean, string]\n</code></pre>\n<p><strong>ReturnType&lt;T extends (…args: any)&#x3D;&gt;any&gt;</strong></p>\n<ul>\n<li>构造一个含有<strong>Type函数的返回值</strong>的类型</li>\n</ul>\n<pre><code class=\"ts\">type F1 = () =&gt; Date;\n\ntype F1ReturnType = ReturnType&lt;F1&gt;; // Date\n</code></pre>\n<p><strong>lnstanceType&lt;T extends (…args: any)&#x3D;&gt;any&gt;</strong></p>\n<ul>\n<li>构造一个由所有Type的构造函数的实例类型组成的类型</li>\n</ul>\n<pre><code class=\"TS\">type EntityType = InstanceType&lt;IEntityConstructor&gt;; // IEntity\n</code></pre>\n<p><strong>ThisParameterType&lt; T &gt;</strong></p>\n<ul>\n<li><strong>获取函数中 <code>this</code> 的数据类型</strong>，如果没有则返回 <code>unknown</code> 类型：</li>\n</ul>\n<pre><code class=\"js\">interface Foo &#123;\n    x: number\n&#125;;\n\nfunction fn(this: Foo) &#123;&#125;\n\ntype Test = ThisParameterType&lt;typeof fn&gt;; // Foo\n</code></pre>\n<p><strong>OmitThisParameter&lt; T &gt;</strong></p>\n<ul>\n<li><strong>移除函数中的 <code>this</code> 数据类型</strong>：</li>\n</ul>\n<pre><code class=\"ts\">interface Foo &#123;\n    x: number\n&#125;;\n\ntype Fn = (this: Foo) =&gt; void\n\ntype NonReturnFn = OmitThisParameter&lt;Fn&gt;; // () =&gt; void\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/type-challenges/type-challenges\">type-challenges&#x2F;type-challenges: Collection of TypeScript type challenges with online judge (github.com)</a></li>\n</ul>\n<hr>\n<h1 id=\"四、知识扩展\"><a href=\"#四、知识扩展\" class=\"headerlink\" title=\"四、知识扩展\"></a>四、知识扩展</h1><ul>\n<li>JavaScript有一个很长的处理模块化代码的历史，TypeScript 从2012年开始跟进，现在已经实现支持了很多格式。但是随着时间流逝，社区和JavaScript规范已经使用为名为ES Module的格式，这也就是我们所知的import&#x2F;export 语法。</li>\n<li><strong>在TypeScript中最主要使用的模块化方案就是ES Module</strong></li>\n</ul>\n<p><strong>非模块</strong></p>\n<ul>\n<li>JavaScript 规范声明任何<strong>没有export的JavaScript文件都应该被认为是一个脚本，而非一个模块</strong>。</li>\n<li>在一个脚本文件中，变量和类型会被声明在共享的全局作用域，将多个输入文件合并成一个输出文件，或者在HTML使用多个&lt; script &gt;标签加载这些文件。</li>\n<li>如果有一个文件，现在没有任何import 或者export，但是希望它被作为模块处理，添加这行代码：export {}**，这会把文件改成一个没有导出任何内容的模块，这个语法可以生效，无论你的模块目标是什么。</li>\n</ul>\n<p><strong>内置类型导入</strong></p>\n<pre><code class=\"ts\">import &#123; type IFoo,type IDType &#125; from &quot;./foo&quot;\nconst id : IDType = 100\nconst foo: IFoo = &#123;\n    name:&quot;why&quot;,\n    age:18\n&#125;\n</code></pre>\n<p><strong>命名空间namespace</strong></p>\n<ul>\n<li>TypeScript有它自己的模块格式，名为namespaces，它在ES模块标准之前出现。</li>\n<li>命名空间在TypeScript早期时，称之为内部模块，目的是将一个模块内部再进行作用域的划分，防止一些命名冲突的问题;虽然命名空间没有被废弃，但是由于ES模块已经拥有了命名空间的大部分特性，因此更推荐使用ES模块，这样才能与JavaScript保持一致</li>\n</ul>\n<p><strong>类型查找</strong></p>\n<ul>\n<li>.d.ts 文件，它是用来做类型的声明(declare)，称之为类型声明(Type Declaration)或者类型定义(TypeDefinition)文件。<br>它仅仅用来做类型检测，告知typescript我们有哪些类型</li>\n<li>typescript会在内置类型声明、外部定义类型声明、自己定义类型声明来查找</li>\n</ul>\n<p><strong>内置类型声明</strong></p>\n<ul>\n<li><p>内置类型声明是typescript自带的、帮助我们内置了JavaScript运行时的一些标准化API的声明文件：</p>\n<ul>\n<li>包括比如Function、String、Math、Date等内置类型</li>\n<li>也包括运行环境中的DOM APl，比如Window、Document等</li>\n</ul>\n</li>\n<li><p>TypeScript使用模式命名这些声明文件<strong>lib.[something].d.ts</strong></p>\n</li>\n<li><p>可以通过target和lib来决定哪些内置类型声明是可以使用的</p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/tsconfig#lib\">TypeScript: TSConfig Reference - Docs on every TSConfig option (typescriptlang.org)</a></p>\n</li>\n</ul>\n<p><strong>外部定义类型声明</strong></p>\n<ul>\n<li><strong>方式一:在自己库中进行类型声明（编写.d.ts文件)，比如axios</strong></li>\n<li><strong>方式二:通过社区的一个公有库DefinitelyTyped存放类型声明文件</strong></li>\n<li>需要自己来定义声明文件情况<ul>\n<li>情况一:我们使用的第三方库是一个纯的JavaScript库，没有对应的声明文件;比如lodash</li>\n<li>情况二:我们给自己的代码中声明一些类型，方便在其他地方直接进行使用</li>\n</ul>\n</li>\n</ul>\n<p><strong>declare声明</strong></p>\n<ul>\n<li>我们也可以声明模块，比如lodash模块默认不能使用的情况，可以自己来<strong>声明模块</strong>:</li>\n</ul>\n<pre><code class=\"ts\">declare module &quot;lodash&quot;  &#123;\n    export function join(args: any[]): any ;\n&#125;\n</code></pre>\n<ul>\n<li><p>声明模块的语法: <strong>declare module ‘模块名’{}</strong></p>\n</li>\n<li><p>在声明模块的内部，我们可以通过export 导出对应库的类、函数等</p>\n</li>\n<li><p>在某些情况下，我们也可以<strong>声明文件</strong>:</p>\n<ul>\n<li>比如在开发vue的过程中，默认是不识别我们的.vue文件的，那么我们就需要对其进行文件的声明</li>\n<li>比如在开发中我们使用了jpg这类图片文件，默认typescript也是不支持的，也需要对其进行声明</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"ts\">declare  module &#39;*.vue&#39; &#123;\n    import&#123;DefineComponent &#125; from &#39;vue&#39;\n    const component: Definecomponent\n    \n    export default component\n&#125;\ndeclare module &#39;*.jpg&#39; &#123;\n    const src: string\n    export default src\n&#125;\n</code></pre>\n<ul>\n<li>declare命名空间</li>\n</ul>\n<p><strong>tsconfig.json</strong></p>\n<ul>\n<li><p>tsconfig.json文件有两个作用:</p>\n<ul>\n<li>作用一(主要的作用)︰让TypeScript Compiler在编译的时候，知道如何去编译TypeScript代码和进行类型检测;<ul>\n<li>比如是否允许不明确的this选项，是否允许隐式的any类型</li>\n<li>将TypeScript代码编译成什么版本的JavaScript代码</li>\n</ul>\n</li>\n<li>作用二:让编辑器（比如VSCode）可以按照正确的方式识别TypeScript代码;√对于哪些语法进行提示、类型错误检测等等</li>\n</ul>\n</li>\n<li><p>tsconfig.json在编译时的使用</p>\n<ul>\n<li>在调用tsc命令并且没有其它输入文件参数时，编译器将由当前目录开始向父级目录寻找包含tsconfig文件的目录</li>\n<li>调用tsc 命令并且没有其他输入文件参数，可以使用–project(或者只是-p)的命令行选项来指定包含了tsconfig.json的目录</li>\n<li>当命令行中指定了输入文件参数, tsconfig.json文件会被忽略</li>\n</ul>\n</li>\n<li><p>webpack中使用ts-loader进行打包时，也会自动读取tsconfig文件，根据配置编译TypeScript代码。</p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/tsconfig\">TypeScript: TSConfig Reference - Docs on every TSConfig option (typescriptlang.org)</a></p>\n</li>\n</ul>\n","feature":true,"text":"TypeScript是一种开源的编程语言，是JavaScript的超集。它添加了静态类型检查和更强大的面向对象特性，使得JavaScript代码更可靠、易于维护。掌握TypeScript全面解析可以让开发者更好地利用这个强大的语言来开发现代化的Web应用。...","permalink":"/post/前端--Typescript快速入门","photos":[],"count_time":{"symbolsCount":"37k","symbolsTime":"34 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":2,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9ATypeScript%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">打造高效开发环境：TypeScript进阶指南</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">一、快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0%E3%80%81TypeScript%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0、TypeScript简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81TypeScript-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">1、TypeScript 开发环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2、基本类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">3、编译选项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81webpack\"><span class=\"toc-text\">4、webpack</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Babel\"><span class=\"toc-text\">5、Babel</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">二、面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0、面向对象简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%B1%BB%EF%BC%88class%EF%BC%89\"><span class=\"toc-text\">1、类（class）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2、面向对象的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%8E%A5%E5%8F%A3%EF%BC%88Interface%EF%BC%89\"><span class=\"toc-text\">3、接口（Interface）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%B3%9B%E5%9E%8B%EF%BC%88Generic%EF%BC%89\"><span class=\"toc-text\">4、泛型（Generic）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D\"><span class=\"toc-text\">三、类型体操</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0%E3%80%81%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0、类型体操简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1、条件类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D\"><span class=\"toc-text\">2、类型体操</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">四、知识扩展</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"掌握SEO核心技巧：深入了解搜索引擎优化","uid":"823667777e9312d7b7603b0c35d55e32","slug":"前端--深入理解搜索前端引擎优化(SEO)","date":"2023-09-01T01:08:31.000Z","updated":"2025-07-14T15:12:20.466Z","comments":true,"path":"api/articles/前端--深入理解搜索前端引擎优化(SEO).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/c79948b2af6745b69adac2358a8a1327.png","text":"前端SEO是指通过优化前端代码和内容，提高网页在搜索引擎中的排名和可见性。它包括合理的HTML结构、语义化标签、良好的页面加载速度、响应式设计等方面的优化。通过使用合适的关键字、优化页面标题和描述，以及创建友好的URL等方法，可以提高网页在搜索结果中的排名。...","permalink":"/post/前端--深入理解搜索前端引擎优化(SEO)","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"SEO","slug":"SEO","count":1,"path":"api/tags/SEO.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Nuxt.js快速上手","uid":"23d588264c6e2698d0390789d641229e","slug":"前端--Nuxt.js快速上手","date":"2023-08-14T06:09:57.000Z","updated":"2025-07-14T15:12:20.464Z","comments":true,"path":"api/articles/前端--Nuxt.js快速上手.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/af419381c43c4f3da2b0580e8447ac2f.png","text":"Nuxt.js是一个基于Vue.js的应用框架，用于创建通用、可扩展的Web应用程序。它提供了预设的配置和约定，使得开发者可以更快速地构建高性能的前端应用。Nuxt.js支持服务端渲染(SSR)和静态站点生成(SSG)，具有优化SEO和首屏加载速度的特点。...","permalink":"/post/前端--Nuxt.js快速上手","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Nuxt.js","slug":"Nuxt-js","count":1,"path":"api/tags/Nuxt-js.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}