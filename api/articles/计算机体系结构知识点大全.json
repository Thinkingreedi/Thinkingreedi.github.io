{"title":"计算机体系结构概述","uid":"c87b8553228183b157da295156afb592","slug":"计算机体系结构知识点大全","date":"2023-07-02T01:47:11.000Z","updated":"2025-07-14T15:12:20.470Z","comments":true,"path":"api/articles/计算机体系结构知识点大全.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/direct/c9a21fa8cc98404588e864660d2e34bd.png","content":"<hr>\n<h1 id=\"计算机体系结构\"><a href=\"#计算机体系结构\" class=\"headerlink\" title=\"计算机体系结构\"></a>计算机体系结构</h1><h2 id=\"Chapter-1：计算机系统结构的基本概念\"><a href=\"#Chapter-1：计算机系统结构的基本概念\" class=\"headerlink\" title=\"Chapter-1：计算机系统结构的基本概念\"></a>Chapter-1：计算机系统结构的基本概念</h2><p><strong>认识计算机系统结构</strong></p>\n<ul>\n<li><p>1945年诞生与美国宾夕法尼亚大学的<strong>ENIAC</strong>，用于计算火炮的弹道</p>\n</li>\n<li><p>1946年，生于匈牙利的美国数学家<strong>冯·诺依曼</strong>提出了”存储程序计算机”</p>\n</li>\n<li><p>定义：</p>\n<ul>\n<li><p>计算机体系结构是<strong>程序员</strong>所看到的计算机的属性，即概念性结构与功能特性。</p>\n</li>\n<li><p>定义二:计算机系统结构包括计算机系统设计的三个方面:计算机指令系统;计算机组成;计算机硬件。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/42c77ce2bee742bfab1f5281106f61c6.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/b3ecb15c3fee4f4dbf124a4e569ebdc0.png\"></p>\n<p><strong>计算机系统结构的分类</strong></p>\n<ul>\n<li><p><strong>并行性能</strong>是计算机系统结构的分类标准</p>\n<ul>\n<li><strong>弗林(Flynn)分类法</strong><ul>\n<li>指令流(Instruction Stream) :指令的传送序列。</li>\n<li>数据流(Data Stream):数据传送、加工的序列。</li>\n<li>多倍性(Multiplicity):在系统性能瓶颈部件上处于同一执行阶段的指令或数据的最大可能个数。</li>\n<li>单指令流单数据流(SISD)|单指令流多数据流(SIMD)|多指令流单数据流(MISD)|多指令流多数据流(MIMD)</li>\n</ul>\n</li>\n<li><strong>冯氏分类法</strong><ul>\n<li>最大并行度是指计算机单位时间内能够处理的最大的二进制位数。最大并行度是指计算机单位时间内能够处理的最大的二进制位数</li>\n<li>字串位串，WSBS | 字串位并，WSBP | 字并位串，WPBS | 字并位并，WPBP</li>\n</ul>\n</li>\n<li><strong>汉德勒(Hander)分类法</strong><ul>\n<li>从硬件设备结构的并行级和流水线的程度分类:程序控制部件的个数;算术逻辑运算部件(处理部件的个数);基本逻辑线路的套数。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计算机系统结构  –  主要研究软硬件功能的分配和对软件、硬件界面的确定，是计算机系统的概念性结构和功能特性。</p>\n</li>\n<li><p>计算机组成  –  计算机系统结构的逻辑实现。</p>\n</li>\n<li><p>计算机的实现  –  指其计算机组成的物理实现。</p>\n</li>\n</ul>\n<p><strong>计算机系统结构的发展</strong></p>\n<ul>\n<li>巨型机、大型机、中型机、小型机、微型机</li>\n<li><strong>冯-诺依曼结构：存储程序计算机；计算机由四个部分组成（运算器、存储器、控制器、输入&#x2F;输出设备）</strong></li>\n<li>冯·诺依曼结构两个最重要特征:<ul>\n<li>指令驱动计算机内部的信息流动</li>\n<li>计算机应用主要面向数值计算</li>\n</ul>\n</li>\n<li>非冯·诺依曼体系结构：数据流计算机，归约计算机，基于面向对象程序设计语言的计算机，人工智能计算机</li>\n<li>指令的操作：取指令→指令译码→取操作数→运算→结果写回(重新开始)</li>\n<li>对系统结构进行的4种改进方式<ul>\n<li>输入&#x2F;输出方式的改进<ul>\n<li>程序控制 &#x2F; DMA &#x2F; IO处理机</li>\n</ul>\n</li>\n<li>采用并行处理技术</li>\n<li>存储器组织结构的发展</li>\n<li>指令系统的发展<ul>\n<li>复杂指令集计算机&#x2F;精减指令集计算机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>量化设计的基本原则</strong></p>\n<ul>\n<li><p><strong>大概率事件优先原则</strong>：对于大概率事件或者说最常见的事件，赋予它优先的处理权和资源使用权，以获得全局的最优结果。</p>\n</li>\n<li><p><strong>Amdahl定律</strong>：系统中对某一部件采用更快执行方式所能获得的系统性能改进程度，取决于这种执行方式被使用的频率，或所占总执行时间的比例。</p>\n<ul>\n<li>加速比：假设我们对机器（部件）进行某种改进，那么机器系统部件的加速比就是：</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/ed331f779bd2474fb0a3677269866b3e.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/472b3dbffe2b403cbd0bf1dc100935fd.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/ec57c2dcc4724f229cc81fa79f035629.png\"></p>\n<ul>\n<li><strong>程序的局部性原理</strong>：程序的局部性原理是指程序总是趋向于使用最近使用过的数据和指令。程序访问地址的分布不是随机的，而是相对地簇聚<ul>\n<li>时间局部性:近期被访问的代码，很可能不久又将再次被访问。</li>\n<li>空间局部性:是指地址上相邻近的代码可能会被连续的访问。</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算机系统结构中并行性的发展</strong></p>\n<ul>\n<li>并行性概念:计算机系统在同一时刻或者同一时间间隔内进行多种运算或操作。<ul>\n<li>同时性:两个或两个以上的事件在同一时刻发生。</li>\n<li>并发性:两个或两个以上的事件在同一时间间隔内发生。</li>\n</ul>\n</li>\n<li>从处理数据角度，并行  性等级从低到高为：字串位串|字串位并|字并位串|字并位并</li>\n<li>从执行程序角度，并行性等级从低到高为：指令内部并行|指令级并行|线程级并行|任务级或过程级并行|作业或程序级并行</li>\n<li>提高并行性的技术途径：时间重叠（时间）– 基础设是<strong>部件功能专用化</strong>、资源重复（空间）、资源共享（轮流使用）</li>\n<li>并行机发展的四个阶段：<ul>\n<li>并行机的萌芽阶段(1964-1975)</li>\n<li>向量机的发展和鼎盛阶段(1976-1990)</li>\n<li>MPP出现和蓬勃发展阶段(1990-1995)</li>\n<li>各种体系结构并存阶段(1995-2000)</li>\n<li>机群蓬勃发展阶段(2000 - ?)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chapter-2：指令系统\"><a href=\"#Chapter-2：指令系统\" class=\"headerlink\" title=\"Chapter-2：指令系统\"></a>Chapter-2：指令系统</h2><p><strong>指令系统分类</strong></p>\n<ul>\n<li><p><strong>指令系统</strong>:一台计算机中所有机器指令的集合，称为这台机器的指令系统。</p>\n</li>\n<li><p>指令系统分类：</p>\n<ul>\n<li><strong>复杂指令集计算机（CISC)</strong></li>\n<li><strong>精简指令集计算机（RISC)</strong></li>\n</ul>\n</li>\n<li><p>将指令系统的结构分为三种类型：</p>\n<ul>\n<li>堆栈型结构</li>\n<li>累加器型结构</li>\n<li>通用寄存器型结构</li>\n</ul>\n</li>\n</ul>\n<p><strong>寻址方式</strong></p>\n<ul>\n<li>寻址方式是指令系统中产生所要访问的数据地址的方法。</li>\n<li>MOV AX BX — 操作码 目的操作数 源操作数</li>\n<li>按访问方式分类：<ul>\n<li>按地址访问</li>\n<li>按内容访问</li>\n</ul>\n</li>\n<li>寄存器寻址：ADD R1，R2</li>\n<li>立即值寻址：ADD R3，#6</li>\n<li>寄存器间接寻址：ADD R4，(R2)</li>\n<li>索引寻址：ADD R4，(R2+R4)</li>\n<li>直接寻址：ADD R4，(1010)</li>\n<li>存储器间接寻址：ADD R2，@(R4)</li>\n<li>自增寻址：ADD R1，(R2)+</li>\n<li>自减寻址：ADD R1，-(R2)</li>\n<li>缩放寻址：ADD R1，80(R2)[R3]</li>\n</ul>\n<p><strong>指令系统的设计和优化</strong></p>\n<ul>\n<li>设计时考虑因素：速度、成本、灵活性</li>\n<li>设计原则：完整性、规整性(对称性、均匀性)、正交性(不同含义字段在编码时互不相关、相互独立)、高效率、兼容性(向后兼容)</li>\n<li>控制指令：控制指令用来改变控制流</li>\n<li>操作码的优化<ul>\n<li>等长扩展码</li>\n<li>定长扩展码</li>\n</ul>\n</li>\n</ul>\n<p><strong>指令系统的发展和改进</strong></p>\n<ul>\n<li><p>CISC</p>\n<ul>\n<li>许多指令很少用、控制器硬件复杂、复杂指令速度慢、规整性不好</li>\n<li>改进：<ul>\n<li><strong>面向目标程序</strong>增强指令功能<ul>\n<li>目标程序→统计分析</li>\n<li>高频度指令→硬件加快</li>\n<li>高频度高指令串→新指令替代</li>\n<li>增强运算型指令功能</li>\n<li>增强数据传送指令功能</li>\n<li>增强程序控制指令功能</li>\n</ul>\n</li>\n<li><strong>面向高级语言</strong>的优化实现改进指令系统<ul>\n<li>频度高、执行时间长的语句</li>\n<li>增强系统结构的规整性</li>\n</ul>\n</li>\n<li><strong>面向操作系统</strong>的优化实现改进指令系统<ul>\n<li>处理机工作状态和访问方式的切换</li>\n<li>进程的管理和切换</li>\n<li>存储管理和信息保护</li>\n<li>进程的同步与互斥，信号灯的管理等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RISC</p>\n<ul>\n<li>RISC遵循的原则:<ul>\n<li>指令条数少、功能简单</li>\n<li>采用简单统一的指令格式</li>\n<li>指令执行在单机器周期内完成</li>\n<li>采用Load-Store结构</li>\n<li>采用硬连线逻辑实现</li>\n<li>强调优化编译器作用</li>\n<li>利用流水技术提高性能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>操作数的类型和大小</strong></p>\n<ul>\n<li>数据类型：由<strong>软件</strong>进行处理和实现的各种数据类型 — 图、表、树、字符串…</li>\n<li>数据表示：计算机<strong>硬件</strong>能够直接识别、指令系统可以直接调用的数据类型 – 定点数、逻辑数、浮点数</li>\n<li>操作数类型表示方法<ul>\n<li><strong>由操作码指定</strong></li>\n<li><strong>带标识符的数据表示</strong></li>\n</ul>\n</li>\n<li>操作数大小：<ul>\n<li>字节(8位)</li>\n<li>半字(16位)</li>\n<li>单字(32位)</li>\n<li>双字(64位)</li>\n</ul>\n</li>\n</ul>\n<p><strong>MIPS指令系统结构</strong></p>\n<ul>\n<li>国产CPU处理器<ul>\n<li>飞腾 – 兼容ARM指令集</li>\n<li>龙芯 – Alpha指令</li>\n<li>申微 – 采用RIS架构，兼容MIPS指令</li>\n</ul>\n</li>\n<li>MIPS的数据寻址方式<ul>\n<li>立即数寻址</li>\n<li>偏移量寻址</li>\n</ul>\n</li>\n<li>MIPS的指令格式<ul>\n<li>I类指令</li>\n<li>R类指令</li>\n<li>J类指令</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chapter-3：流水线技术\"><a href=\"#Chapter-3：流水线技术\" class=\"headerlink\" title=\"Chapter-3：流水线技术\"></a>Chapter-3：流水线技术</h2><p><strong>流水线的基本概念</strong></p>\n<ul>\n<li><p>把一个重复的过程<strong>分解为若干子过程</strong>(相当于上面的工序)，每个子过程由专门的功能部件来实现;把各个处理过程<strong>在时间上错开</strong>，依次通过各功能段，每个子过程与其他子过程<strong>并行</strong>进行。</p>\n</li>\n<li><p>流水线中的每个子过程及其功能部件被称为“<strong>级</strong>”(或“<strong>段</strong>”);段数:流水线的<strong>深度</strong>。</p>\n</li>\n<li><p><strong>指令流水线：把流水线技术应用于</strong>指令的解释执行过程</p>\n</li>\n<li><p>流水线的描述方法：<strong>时空图</strong></p>\n<ul>\n<li>从时间和空间两个方面描述流水线的工作过程。</li>\n<li><strong>横坐标表示时间，纵坐标表示各流水段。</strong></li>\n</ul>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>流水过程由多个相关的子过程组成，每个子过程由专用的功能段实现。</li>\n<li>各功能段的时间应基本相等，否则时间最长的段将成为流水线的瓶颈;这个时间通常为1个时钟周期（1拍)。</li>\n<li>流水线需要经过一定的时间（“通过时间”)才能稳定下来，并持续地输出结果。</li>\n<li>流水线技术适用于于大量重复的时序过程。</li>\n</ul>\n</li>\n</ul>\n<p><strong>流水线的分类</strong></p>\n<p>按流水线所完成的功能分类：</p>\n<ul>\n<li><strong>单功能流水线</strong>:只能完成一种<strong>固定功能</strong>的流水线，如浮点加法流水线。</li>\n<li><strong>多功能流水线</strong>:各段可以进行不同的连接，从而使流水线在<strong>不同的时间或同一段时间完成不同的功能</strong>。</li>\n</ul>\n<p>按同一时间内流水段的连接方式划分</p>\n<ul>\n<li><strong>静态流水线</strong>:在同一时间内，流水线的各段只能按同一种功能的连接方式工作。</li>\n<li><strong>动态流水线</strong>:在同一时间内，当某些段正在实现某种运算时，另一些段却在实现另一种运算。(控制逻辑很复杂)</li>\n</ul>\n<p>按流水的级别划分</p>\n<ul>\n<li><strong>部件级流水线</strong>，又叫运算操作流水线，是把处理机的算术逻辑部件分段，使得各种数据类型的操作能够进行流水，如<strong>浮点加法流水线</strong>。</li>\n<li><strong>处理机级流水线</strong>，又叫指令流水线,是把解释指令的过程按照流水方式处理，如<strong>指令分析执行流水线</strong>。</li>\n<li><strong>处理机间流水线</strong>，又叫<strong>宏流水线</strong>，是由两个以上的处理机<strong>串行</strong>地对同一数据流进行处理，每个处理机完成一项任务。</li>\n</ul>\n<p>按照数据表示来进行分类</p>\n<ul>\n<li>把指令执行部件中采用了流水线的处理机称为<strong>流水线处理机</strong>。<ul>\n<li><strong>标量流水处理机</strong></li>\n<li><strong>向量流水处理机</strong></li>\n</ul>\n</li>\n</ul>\n<p>线性流水线与非线性流水线</p>\n<ul>\n<li>**线性流水线:**流水线的各段串行连接，没有反馈回路。数据通过流水线中的各段时，每一个段最多只流过一次。</li>\n<li>**非线性流水线:**流水线中除了有串行的连接外，还有反馈回路。</li>\n</ul>\n<p>根据任务流入和流出的顺序是否相同来进行分类</p>\n<ul>\n<li><strong>顺序流水线</strong>:流水线输出端任务流出的顺序与输入端任务流入的顺序完全相同。<br><strong>乱序流水线</strong>:流水线输出端任务流出的顺序与输入端任务流入的顺序可以不同，允许后进入流水线的任务先完成（从输出端流出)。</li>\n</ul>\n<p><strong>MIPS的一种简单实现</strong></p>\n<ul>\n<li>非流水方式</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/00ea0ab67da0414fb3e10d2bc0697c58.png\"></p>\n<ul>\n<li>改进方法：<strong>采用多周期实现方案</strong></li>\n</ul>\n<p><strong>基本MIPS流水线</strong></p>\n<ul>\n<li>改进思路：<ul>\n<li>将前述数据通路流水化，使得数据通路中的每一个周期就成为流水线的一段。</li>\n<li>每个时钟周期启动一条指令，得到了一条简单的MIPS流水线。</li>\n</ul>\n</li>\n<li>问题解决：<ul>\n<li>应保证流水线各段不会在同一时钟周期内使用相同的寄存器通路资源。<ul>\n<li>不能要求一个<strong>ALU</strong>既做有效地址计算，又做减法操作。解决方案:<strong>在IF段添加一个ALU部件，专门用于做有效地址计算</strong>。</li>\n<li>IF与MEM两个阶段都要访问存储器，怎样避免访存冲突?解决方案:可以采用<strong>分离</strong>的指令存储器(IM)和数据存储器(DM);或者基于同一个存储器，采用分离的指令Cache和数据Cache。</li>\n<li>ID段和WB段都要访问同一寄存器文件，有可能存在读写冲突。解决方案是:<strong>前半拍写，后半拍读</strong>。</li>\n</ul>\n</li>\n<li>下条指令PC值的计算问题。解决方案：改变数据通路。</li>\n<li>合理划分流水段，每段内的操作都必须在一个时钟周期内完成。</li>\n<li>要防止指令状态数据被其他指令修改。</li>\n</ul>\n</li>\n</ul>\n<p><strong>流水线的性能分析</strong></p>\n<ul>\n<li>主要性能指标：<strong>吞吐率、加速比、效率</strong></li>\n<li><strong>吞吐率:在单位时间内流水线所完成的任务数量或输出结果的数量。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/547af6ee62384806bf1b91b8a4ac5990.png\"></p>\n<ul>\n<li><strong>各段时间均相等的流水线</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/916406f723c64bf080f5fe9f37bdf631.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/0e2a5a9225134f168367a21d2eb3c97c.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/842547714fe34c65af3a2249aa6f4640.png\"></p>\n<ul>\n<li><strong>各段时间不完成相等的流水线</strong><ul>\n<li>举例:一条5段的流水线，S1，S2，S3，S5各段的时间:t、S4的时间:3t</li>\n<li>流水线中这种时间最长的段称为流水线的<strong>瓶颈段</strong>。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/37a65b0808654496b4c8430b256f9d71.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/aa937bca8c9b4e78b62f91d85c7d2983.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/12daa714d33f4a4590f1eba085c28bb9.png\"></p>\n<ul>\n<li><strong>加速比:完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/9328e98dd2c24e128e3c9267aa24a53b.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2d8c778405a74feba4bb409a80e5197e.png\"></p>\n<ul>\n<li><strong>流水线的效率:流水线中的设备实际使用时间与整个运行时间的比值，即流水线设备的利用率。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6471faa3e113433d865ce2358e323072.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/c4304ad5e670401292de048b14dd570a.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/d2d4296068b14b96aba9c5f0f0238a6b.png\"></p>\n<ul>\n<li><strong>性能指标之间的关系</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/30dcc285ae2f43b79ae1ae66abe662ec.png\"></p>\n<p><strong>流水线相关</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/3a99884fcf034529b3ace686f0581717.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/aa50d9503f164f22b685b17b463fc9dd.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/c4c3b2e017e841b6a077a8eba0448734.png\"></p>\n<ul>\n<li>流水线需要有一定的<strong>通过时间与排空时间</strong>;<strong>运算之间存在关联</strong>，后面有些运算要用到前面运算的结果。<strong>“流水线相关”</strong></li>\n<li>消除相关的基本方法一一<strong>暂停</strong>。</li>\n<li>约定:<ul>\n<li>暂停流水线中某条指令及其后面所有指令的执行;</li>\n<li>该指令之前的所有指令继续执行;</li>\n<li>不会取新的指令。</li>\n</ul>\n</li>\n<li>三种不同类型的相关<ul>\n<li><strong>结构相关</strong>：当指令在重叠执行过程中,硬件资源满足不了指令重叠执行的要求，发生<strong>资源冲突</strong>。<ul>\n<li><strong>插入暂停周期</strong><ul>\n<li>缺点:流水线性能降低。</li>\n</ul>\n</li>\n<li><strong>采用资源重复的方法</strong><ul>\n<li>将指令存储器和数据存储器分离;</li>\n<li>将Cache分割成指令Cache和数据Cache。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>数据相关</strong>：因指令之间存在<strong>数据依赖</strong>，一条指令需要用到前面指令的结果，而无法与产生结果的指令重叠执行。<ul>\n<li>向流水线中插入暂停周期</li>\n<li>通过<strong>定向技术</strong>减少数据相关带来的暂停</li>\n</ul>\n</li>\n<li><strong>控制相关</strong>：当流水线遇到<strong>分支指令</strong>和其它会<strong>改变PC值的指令</strong>时就发生控制相关。<ul>\n<li>冻结或排空流水线</li>\n<li>预测分支失败</li>\n<li>预测分支成功</li>\n<li>延迟分支</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chapter-4：存储层次\"><a href=\"#Chapter-4：存储层次\" class=\"headerlink\" title=\"Chapter-4：存储层次\"></a>Chapter-4：存储层次</h2><p><strong>存储器的层次</strong></p>\n<ul>\n<li>存储器主要指标<ul>\n<li>容量 – 容量大</li>\n<li>速度 – 速度快</li>\n<li>价格 – 价格低</li>\n</ul>\n</li>\n<li>策略–采用多种存储器技术，构成多级存储**(“寄存器-Cache-主存-辅存”)**层次</li>\n<li>存储层次的四个问题：<strong>映像规则、查找算法、替换算法、写策略</strong></li>\n</ul>\n<p><strong>Cache的基本知识</strong></p>\n<ul>\n<li>信息交互单位 ： <strong>块</strong></li>\n<li><strong>映像规则</strong>——确定主存块和Cache块位置对应关系<ul>\n<li><strong>直接映像</strong> – 主存中的每一块只能被放置到Cache中唯一的一个位置</li>\n<li><strong>全相联映像</strong></li>\n<li><strong>组相联映像</strong> – 主存中的每一块，可以被放置到Cache中唯一的一个组中的任何一个位置Cache等分为若干组，每组有若干块</li>\n</ul>\n</li>\n<li>替换算法<ul>\n<li>直接映像——Cache中只有<strong>一个</strong>块位置可被选择</li>\n<li>组相联、全相联映像——Cache中有<strong>多个</strong>选择</li>\n<li><strong>随机法</strong>：实现简单、失效率偏高</li>\n<li><strong>最近最少使用法</strong>（LRU)：失效率低</li>\n<li>**先进先出法(FIFO)**：实现简单、无法反映局部性原理</li>\n<li>**最不常使用法(LFU)**：失效率低、代价高</li>\n</ul>\n</li>\n</ul>\n<p><strong>降低Cache失效率的方法</strong></p>\n<ul>\n<li>失效产生的原因<ul>\n<li>强制性失效 – cache中未找到</li>\n<li>容量失效 – cache中找到容量满</li>\n<li>冲突失效 – cache中找到冲突</li>\n</ul>\n</li>\n<li>解决方案<ul>\n<li>增加Cache块大小</li>\n<li>提高相联度</li>\n<li>Vuctim Cache</li>\n<li>硬件预取技术</li>\n<li>由编译器控制的预取</li>\n<li>编译器优化</li>\n</ul>\n</li>\n</ul>\n<p><strong>减少Cache失效率开销</strong></p>\n<ul>\n<li><strong>写缓冲及写合并</strong><ul>\n<li><strong>写直达Cache</strong>:因为所有的写请求都必须发送到下级存储层次中，经常使用一个写缓冲器来降低失效开销。</li>\n<li><strong>写回法Cache</strong>:也可采用写缓冲器(相对简单)，以减少块的替换时间。</li>\n</ul>\n</li>\n<li><strong>让读失效优先于写</strong><ul>\n<li>推迟读失效处理</li>\n<li>让读优先于写</li>\n</ul>\n</li>\n<li><strong>请求字处理</strong><ul>\n<li>尽早重启动</li>\n<li>请求字优先</li>\n</ul>\n</li>\n<li><strong>多级Cache</strong><ul>\n<li>增加一级Cache</li>\n</ul>\n</li>\n<li><strong>非阻塞Cache</strong></li>\n</ul>\n<p><strong>减少命中时间</strong></p>\n<ul>\n<li>命中时间是指访问Cache命中时所采用的时间。</li>\n<li><strong>采用容量小、结构简单的Cache</strong></li>\n<li><strong>虚拟Cache</strong></li>\n<li><strong>写操作流水化</strong></li>\n<li><strong>多体Cache</strong></li>\n<li><strong>路预测</strong></li>\n<li><strong>Trace Cache</strong></li>\n</ul>\n<p><strong>主存</strong></p>\n<ul>\n<li>核心存储器件</li>\n<li>提高主存性能的优化策略<ul>\n<li><strong>增加存储器宽度</strong></li>\n<li><strong>多体交叉技术</strong></li>\n<li><strong>独立存储器</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>虚拟存储器</strong></p>\n<ul>\n<li>虚拟性</li>\n<li>共享性</li>\n<li>自动性</li>\n<li>虚拟存储器的管理方式：<ul>\n<li>页式&#x2F;段式</li>\n<li>映像规则，查找算法，替换算法，写策略</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chapter-5：输入输出系统\"><a href=\"#Chapter-5：输入输出系统\" class=\"headerlink\" title=\"Chapter-5：输入输出系统\"></a>Chapter-5：输入输出系统</h2><p><strong>输入输出系统概述</strong></p>\n<ul>\n<li><strong>输入输出系统</strong>（简称I&#x2F;O系统）:通常把处理机与主存储器之外的部分。</li>\n<li><strong>输入输出系统包括</strong>:输入输出设备、输入输出接口和输入输出软件等。</li>\n<li><strong>主要作用</strong>:控制主机与外设之间的信息传送，包括设备的寻址、选择、数据通路的建立和数据传送等。</li>\n<li><strong>特点</strong>：异步性、设备无关性、实时性</li>\n<li><strong>基本输入输出方式</strong>：程序查询方式、中断输入输出方式、直接存储器访问方式(DMA)、通道方式、输入输出处理机方式</li>\n</ul>\n<p><strong>总线系统</strong></p>\n<ul>\n<li>总线:连接计算机中CPU、内存储器、外存储器和输入输出设备的接口的公共信息通路。</li>\n<li>总线系统:总线与其相配合的附属控制电路统称。</li>\n<li>总线在计算机结构中所处的位置：片内总线、片总线、内总线、外总线</li>\n<li>传递的信息类型：数据总线(双向)、地址总线(单向)、控制总线(单向)</li>\n<li>信息传送的方向：单向传输、双向传输(半双向、全双向)</li>\n<li>总线的分类：单总线结构、双总线结构、三总线结构</li>\n<li>总线控制方式：集中式和分布式</li>\n<li>总线的指标：*<em>总线的传输率&#x3D;总线宽度 * 总线频率 <em>每周期数据量</em></em></li>\n</ul>\n<p><strong>中断系统</strong></p>\n<ul>\n<li>中断源:引起中断的各种事件。</li>\n<li>中断源可以来自系统外部，也可以来自机器内部,甚至处理机本身。中断可以是硬件引起的,也可以是软件引起的。</li>\n<li>中断源的种类:故障中断、访管中断、I&#x2F;0中断（外设引起)、程序性中断、外中断</li>\n<li>中断优先级：紧迫性、重要性、设备的工作速度、数据恢复的难易程度</li>\n<li>影响中断系统性能的两个因素：中断响应时间、灵活性</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/d66d5c8a58114762b93597ccfd8c0358.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/335a7c0a7e9d486fb14cebc9eb143a33.png\"></p>\n<p><strong>通道处理机</strong></p>\n<ul>\n<li>通道的工作过程<ul>\n<li>管态指令:操作系统的指令，例如控制外部设备操作用的输入输出指令。</li>\n<li>目态指令（访管指令）:用户态应用程序的指令。</li>\n<li>广义指令:访管指令和参数，它的操作码实质上是对应于此广义指令的管理程序入口。</li>\n<li>通道程序编制期、选择设备期、数据传送期、数据传送结束期</li>\n</ul>\n</li>\n<li>字节多路通道<ul>\n<li>以字节交叉方式轮流为多个外设服务，用于连接多个慢速的和中速的设备，如键盘、打印机等。</li>\n</ul>\n</li>\n<li>选择通道<ul>\n<li>又称高速通道，可以连接多个设备，在某一段时间内通道只能选择一个设备进行工作，传输完成后才为其他外围设备传输数据。用于连接高速外围设备，如磁盘等信息以成组方式高速传输。</li>\n</ul>\n</li>\n<li>数组多路通道<ul>\n<li>以数组（数据块）为单位，多个高速设备交叉复用通道。选择一个外设，送完一块数据后,再选择下一个外设进行数据传送</li>\n</ul>\n</li>\n<li>通道的流量分析</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/219346dfb2234544828c7f0e5178a5db.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/6e9d47fd53f84a79b26b9651ab7bc906.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/222451c1b0274d858211e0ccdca1e0d9.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/6244d3ae7b5f47948a3f173eeff44231.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/1fa1ff16e21b4cb4bb781784d7dbb427.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/56d4eb2043724d0da7ca42693856b669.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/d04cb4346e8f4db6b86132e1dca51fa3.png\"></p>\n<hr>\n<h2 id=\"Chapter-6：多处理机\"><a href=\"#Chapter-6：多处理机\" class=\"headerlink\" title=\"Chapter-6：多处理机\"></a>Chapter-6：多处理机</h2><p><strong>多处理机概述</strong></p>\n<ul>\n<li><p>并行计算机体系结构分类</p>\n<ul>\n<li>Flynn分类法</li>\n<li><strong>多指令流多数据流</strong>MIMD成为通用多处理机体系结构的主流选择</li>\n</ul>\n</li>\n<li><p>通信模型和存储器的结构模型</p>\n<ul>\n<li><p>通信模型</p>\n<ul>\n<li>对于共享地址空间的机器：利用Load和Store指令中的地址隐含地进行数据通信。</li>\n<li>多个地址空间的机器：数据通信要通过处理器间显式地传递消息完成。</li>\n<li>消息传递机器：消息传递机器根据简单的网络协议，通过传递消息来请求某些服务或传输数据，从而完成通信。</li>\n<li>三个关键性能指标：通信带宽、通信延迟、通信延迟的隐藏</li>\n</ul>\n</li>\n<li><p>存储器的结构模型：物理上分离的多个存储器可作为一个逻辑上共享的存储空间进行编址。整个地址空间由多个独立的地址空间构成，它们在逻辑上也是相独立的，远程的处理器不能对其直接寻址。</p>\n</li>\n</ul>\n</li>\n<li><p>并行处理面临的挑战</p>\n<ul>\n<li>程序中有限的并行性</li>\n<li>相对较高的通信开销</li>\n</ul>\n</li>\n</ul>\n<p><strong>对称式共享存储器体系结构</strong></p>\n<ul>\n<li>多处理机Cache的一致性<ul>\n<li>多级Cache可以降低处理器对存储器带宽的要求。</li>\n<li>对称式共享存储器体系结构支持对<strong>共享数据</strong>和<strong>私有数据</strong>的Cache缓存。</li>\n<li>Cache的引进对I&#x2F;O操作产生了<strong>一致性问题</strong></li>\n<li>存储器一致性定义:如果对某个数据项的任何读操作均可得到其最新写入的值，则认为这个存储系统是一致的。</li>\n<li>实现一致性的基本方案：<ul>\n<li><strong>共享数据迁移</strong></li>\n<li><strong>共享数据复制</strong></li>\n</ul>\n</li>\n<li>Cache一致性协议：目录、监听</li>\n<li>维持一致性要求：写作废协议，写更新协议</li>\n</ul>\n</li>\n<li>实现Cache一致性的基本方案</li>\n<li>监听协议及其实现</li>\n</ul>\n<p><strong>分布式共享存储器体系结构</strong></p>\n<ul>\n<li><p>基于目录的Cache一致性</p>\n<ul>\n<li>在支持Cache一致性的可缩放的共享存储器体系结构中，关键是寻找替代监听协议的一致性协议。</li>\n</ul>\n</li>\n<li><p>目录协议及其实现</p>\n<ul>\n<li><p><strong>目录协议</strong>:用一种专用的存储器所记录的数据结构,它记录着可以进入Cache的每个数据块的访问状态、该块在各个处理器的共享状态以及是否修改过等信息。</p>\n</li>\n<li><p>目录协议两种主要的操作：处理读失效，处理对共享、干净块的写</p>\n</li>\n<li><p>目录协议的状态：<strong>共享、未缓冲、专有</strong></p>\n</li>\n<li><p>发往一个目录的消息会产生两种不同类型的动作：<strong>更新目录状态，发送消息满足请求服务</strong></p>\n</li>\n<li><p>目录项可能接收到三种不同的请求：<strong>读失效、写失效、数据写回</strong></p>\n</li>\n<li><p>对基于目录的Cache一致性的多种改进：<strong>有限映射目录、链式结构目录</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>互连网络</strong></p>\n<ul>\n<li>互联网络是将对称式系统或分布式系统中的节点连接起来所构成的网络，这些节点可能是处理器、存储模块或者其他设备，它们通过互联网络进行信息交换。</li>\n<li>性能较高的互联网络的特点：<strong>数据传送速率高;延迟低;通信频带宽。</strong></li>\n<li>互联网络性能参数：<strong>节点度，网络直径、等分宽度</strong></li>\n<li><strong>路由：在网络通信中对路径的选择与指定</strong></li>\n<li>静态连接网络：静态网络使用直接链路，它一旦构成后就固定不变。这种网络比较适合于构造通信模式可预测或可用静态连接实现的计算机系统。</li>\n<li>动态连接网络：不用固定连接，而是沿着连接通路使用开关或仲裁器以提供动态连接特性。</li>\n</ul>\n<p><strong>同步</strong></p>\n<ul>\n<li><p><strong>同步机制</strong>通常是在硬件提供的同步指令的基础上，通过用户级软件例程来建立的。</p>\n</li>\n<li><p>实现同步操作的原语：<strong>原子交换、测试并置定、读取并加1、使用指令对</strong></p>\n</li>\n<li><p><strong>用一致性实现锁：</strong></p>\n<ul>\n<li>旋转锁:处理器环绕一个锁不停地旋转而请求获得该锁。</li>\n<li>如果机器支持Cache一致性，就将锁缓冲进入Cache,并通过一致性机制使锁值保持一致。</li>\n</ul>\n</li>\n<li><p><strong>同步性能问题：</strong></p>\n<ul>\n<li>简单旋转锁不能很好地适应可缩扩性。大规模多处理机中，若所有的处理器都同时争用同一个锁，则会导致大量的争用和通信开销。</li>\n</ul>\n</li>\n<li><p><strong>栅栏同步：</strong></p>\n<ul>\n<li>栅栏强制所有到达该栅栏的进程进行等待，直到全部的进程到达栅栏，然后释放全部的进程，从而形成同步。</li>\n<li>栅栏通常是在循环中使用，从栅栏释放的进程运行一段后又会再次返回栅栏，这样有可能出现某个进程永远离不开栅栏的状况。</li>\n</ul>\n</li>\n<li><p><strong>大规模机器的同步：</strong></p>\n<ul>\n<li>人们所希望的同步机制是在无竞争的条件下延迟较小，在竞争激烈时串行性小。</li>\n</ul>\n</li>\n<li><p>硬件原语支持</p>\n<ul>\n<li>排队锁:排队记录等待的进程，当锁释放时送出一个已确定的等待进程。</li>\n<li>硬件同步原语:引进一种原语来减少栅栏记数时所需的时间，从而减小串行形成的瓶颈。</li>\n</ul>\n</li>\n</ul>\n<p><strong>同时多线程</strong></p>\n<ul>\n<li><p><strong>多线程技术 与 同时多线程技术是不同的技术</strong></p>\n</li>\n<li><p><strong>多线程技术</strong>：使多个线程以重叠的方式共享单个处理器的功能单元，从而提高处理器的性能。</p>\n<ul>\n<li>细粒度多线程:在每条指令间都能进行线程的切换，从而导致多个线程的交替执行。</li>\n<li>粗粒度多线程:线程之间的切换只在发生代价较高、时间较长的阻塞出现时。</li>\n</ul>\n</li>\n<li><p><strong>同时多线程技术</strong>(SMT):是一种在多流出、动态调度处理器上开发线程级并行和指令级并行的改进的多线程技术。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chapter-7：非冯-洛依曼型计算机\"><a href=\"#Chapter-7：非冯-洛依曼型计算机\" class=\"headerlink\" title=\"Chapter-7：非冯-洛依曼型计算机\"></a>Chapter-7：非冯-洛依曼型计算机</h2><p><strong>人工智能计算机</strong></p>\n<ul>\n<li>人工智能计算有如下特征:<ul>\n<li><strong>人工智能计算的主要对象是符号而不是数值</strong>。常用的基本符号操作包括比较、选择、排序、匹配、逻辑集合运算、分类以及模式检索和识别等。</li>\n<li><strong>非确定计算</strong>:由于人工智能进行的主要是非数值运算，很多算法存在不确定性，因而在求解过程中常采用对所有的可能性进行穷尽枚举，或者对求解空间进行有控制的搜索。</li>\n<li><strong>动态进行</strong>:由于缺少完整的知识和对求解过程的预见性，因此在求解过程中往往需要建立新的数据结构和函数,对于存储器及其它资源可能随时回收或重新分配，其任务可能动态建立，通信拓扑可能动态变化。</li>\n<li><strong>并行和分布处理</strong>:由于在人工智能算法中，任务往往是相互独立的，因此存在并行性和分布处理的潜力，而且任务之间往往缺乏数值性的约束或关联。</li>\n<li><strong>知识管理占主导地位</strong>。在非数值的符号处理中，有用的知识越多，无用的搜索就越少，因此知识管理起着很重要的作用，包括知识的表达、加工、管理和学习等。在智能化的求解过程中，有些知识来源未知，或者无法预见，因此存在知识的不完善性，这就要求人工智能系统一般设计成开放性的系统，允许其不断地求精和获取新的知识。</li>\n</ul>\n</li>\n<li>人工智能计算机一般可分为四类:<ul>\n<li>基于语言的人工智能计算机</li>\n<li>基于知识的人工智能计算机</li>\n<li>连接式(Connectionist)人工智能计算机</li>\n<li>带智能接口的人工智能计算机</li>\n</ul>\n</li>\n</ul>\n<p><strong>数据流计算机</strong></p>\n<ul>\n<li><p>冯-洛依曼体系结构的不足：</p>\n<ul>\n<li>控制驱动型</li>\n<li>指令执行的并行性不高</li>\n</ul>\n</li>\n<li><p>数据流计算机的基本原理</p>\n<ul>\n<li>采用数据驱动方式工作</li>\n<li>没有程序计数器</li>\n<li>没有常规的变量概念</li>\n<li>指令是在数据可用性的控制下并行执行的</li>\n</ul>\n</li>\n<li><p>数据驱动的特性：异步性、并行性、函数性、局部性</p>\n</li>\n<li><p>最基本的数据流语言是数据流计算机的机器语言，即数据流程序图。</p>\n</li>\n<li><p>高级数据流程序设计语言主要有三类：</p>\n<ul>\n<li>单赋值语言</li>\n<li>函数类语言</li>\n<li>命令类语言</li>\n</ul>\n</li>\n<li><p>数据流计算机的优点：</p>\n<ul>\n<li>高度并行运算</li>\n<li>流水线异步操作</li>\n<li>与VLSI技术相适应</li>\n<li>有利于提高程序设计效率</li>\n</ul>\n</li>\n<li><p>数据流计算机的缺点：</p>\n<ul>\n<li>操作开销过大</li>\n<li>不能有效利用传统计算机的研究成果</li>\n<li>数据流语言尚不完善</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"平时测验\"><a href=\"#平时测验\" class=\"headerlink\" title=\"平时测验\"></a>平时测验</h2><p><strong>例题：</strong></p>\n<p><strong>一</strong></p>\n<ul>\n<li>利用时间重叠原理实现并行处理的是 <strong>流水处理机</strong></li>\n<li>多处理机首先的并行主要是 <strong>任务级并行</strong></li>\n<li>从计算机系统结构来看，机器语言程序员看到的机器属性是 <strong>编程要用到的硬件组织</strong></li>\n<li>直接执行微指令的是 <strong>硬件</strong></li>\n<li>软件兼容的根本特征是 <strong>向后兼容</strong></li>\n<li>同构型多处理机所采用的提高并行性的技术途径分别是 <strong>资源重复</strong></li>\n<li>异构型多处理机所采用的提高并行性的技术途径分别是 <strong>时间重叠</strong></li>\n<li>从执行程序的角度看，并行性等级从低到高可分为指令内部并行、<strong>指令级</strong> 并行、线程级并行、任务级或过程级并行和作业或程序级并行</li>\n<li>在一个计算机系统中，低层机器的属性对高层机器的程序员往往是 <strong>透明</strong> 的</li>\n<li>根据Amdahl定律，只要对某一部件进行充分改进，提高其加速比，系统加速比就可以无限制提高。 <strong>×</strong></li>\n</ul>\n<p><strong>二</strong></p>\n<ul>\n<li>不需要编址的数据存储空间是 <strong>堆栈</strong></li>\n<li>CPU中用来存储操作数的存储单元主要有 <strong>堆栈、寄存器和累加器</strong></li>\n<li>以下有关指令系统的说法错误的是 <strong>指令系统和机器语言是无关的</strong></li>\n<li>在CPU执行指令的过程中，指令的地址由 <strong>程序计数器PC</strong> 给出</li>\n<li>对指令系统的基本要求是 <strong>完整性、正交性、兼容性</strong></li>\n</ul>\n<p><strong>三</strong></p>\n<ul>\n<li><p><strong>动态流水线只能是单功能流水线</strong> 说法是不正确的</p>\n</li>\n<li><p>与线性流水线最大吞吐率有关的是 <strong>最慢的那一段的执行时间</strong></p>\n</li>\n<li><p>在MIPS的指令流水线中，可能发生的冲突有 <strong>先流入的指令的写操作与后流入的指令的读操作之间的写后读冲突</strong></p>\n</li>\n<li><p>关于“延迟分支”方法的3三种调度策略中，<strong>从前调度</strong>策略最好</p>\n</li>\n<li><p>延迟分支方法有3种调度策略：<strong>从前调度、从目标处调度和从失败处调度</strong></p>\n</li>\n<li><p>由分支指令引起的延迟称为 <strong>分支延迟</strong></p>\n</li>\n<li><p>流水线在连续流动达到稳定状态后所得到的吞吐率，称为 <strong>最大吞吐率</strong></p>\n</li>\n<li><p>定向技术可以消除大部分数据相关，结合流水线调度技术就能够消除全部数据相关了 <strong>×</strong></p>\n</li>\n<li><p>为了避免结构相关，应该将流水线中的所有功能单元完全流水化或设置足够多的硬件资源 <strong>×</strong></p>\n</li>\n<li><p>理想情况下，流水线的最大加速比等于流水线的段数，所以，应该尽可能采用段数多的流水线方案 <strong>×</strong></p>\n</li>\n</ul>\n<p><strong>四</strong></p>\n<ul>\n<li>与全相联映像相比，组相联映像的优点是 <strong>目录表小</strong></li>\n<li>按Cache地址映像的块冲突概率从高到低的顺序是：<strong>直接映像、组相联映像、全相联映像</strong></li>\n<li>组相联映像、LRU替换算法的Cache存储器，不影响Cache命中率的是 <strong>增大主存容量</strong></li>\n<li>程序员编写程序时，使用的访存地址是：<strong>逻辑地址</strong></li>\n<li>虚拟存储器主要是为了解决 <strong>扩大存储系统的容量</strong></li>\n<li>虚拟存储器的替换算法采用 <strong>LRU</strong></li>\n<li>Cache容量越大，使失效率达到最低的块大小 <strong>越大</strong></li>\n<li>存储器层次结构设计技术的最基本依据是程序的 <strong>局部性</strong> 原理</li>\n<li>在“Cache—主存”层次中，CPU的访存地址被分割为 <strong>块地址</strong> 和块内偏移两部分</li>\n<li><strong>当组相联的路数n变为1时，组相联就变成了直接映像，当组数G变为1 时，组相联就变成了全相联映像</strong> <strong>√</strong></li>\n</ul>\n<p><strong>五</strong></p>\n<ul>\n<li><p>磁盘存储器适合于连接到 <strong>选择通道或数组多路通道</strong></p>\n</li>\n<li><p>在配置有通道的计算机系统中，用户程序需要输入输出时，引起的中断是 <strong>访管中断</strong></p>\n</li>\n<li><p>当计算机系统通过执行通道程序完成输入输出工作时，执行通道程序的是 <strong>通道</strong></p>\n</li>\n<li><p>输入输出数据不经过CPU内部寄存器的输入输出方式是 <strong>直接存储器访问方式</strong></p>\n</li>\n<li><p>目前，全球权威的评测服务器性能的现行标准是 <strong>TPC-C</strong></p>\n</li>\n<li><p>下面不属于总线特点的是 <strong>并行性</strong></p>\n</li>\n<li><p><strong>单碟容量的提高不仅可以提高硬盘的总容量，而且还能提高硬盘的性能。</strong> √</p>\n</li>\n<li><p>在计算机系统中，导致错误的原因是各种故障，因此，只要有故障就一定会导致错误。<em>×</em></p>\n</li>\n<li><p>在RAID0~RAID6的各级磁盘阵列中，都是通过添加冗余信息来增加系统整体可靠性的，但是具体方法不太一样。<em>×</em></p>\n</li>\n<li><p>采用RAID技术之后，不仅系统可靠性得到提升，单盘可靠性也得以改善。<em>×</em></p>\n</li>\n</ul>\n<p><strong>六</strong></p>\n<ul>\n<li><p>能实现指令级、程序级、任务级并行的计算机系统是 <strong>MIMD</strong></p>\n</li>\n<li><p>性能较高的互联网络的特点不包括 <strong>出错率低</strong></p>\n</li>\n<li><p>对于多处理机系统，维护各处理器缓存内容版本同步的协议称为 <strong>Cache一致性协议</strong></p>\n</li>\n<li><p>数据流计算机的特点不包括 <strong>没有操作码</strong></p>\n</li>\n<li><p>现有的MIMD机器可分为 <strong>集中式共享存储器结构</strong> 和 <strong>分布式共享存储器结构</strong> 两类。每一类代表了一种存储器的结构和互连策略。</p>\n</li>\n<li><p>实现Cache一致性协议有 <strong>写作废协议</strong> 和 <strong>写更新协议</strong> 两类</p>\n</li>\n<li><p><strong>多处理机结构由若干台独立的计算机组成，每台计算机能够独立执行自己的程序。</strong> <strong>√</strong></p>\n</li>\n<li><p><strong>支持共享存储器的可缩放机器，既可以支持也可以不支持Cache一致性。</strong> <strong>√</strong></p>\n</li>\n<li><p>粗粒度多线程技术能够在每条指令间都能进行线程的切换，从而导致多个线程的交替执行。<strong>×</strong></p>\n</li>\n<li><p>在多处理机中实现同步的硬件原语功能，能够自动读出并修改存储单元，普通用户也可以随便使用。<strong>×</strong></p>\n</li>\n<li><p>假设浮点数操作FP操作的比例为25%，FP操作的平均CPI&#x3D;4.0，其他指令的平均CPI为1.33，则系统CPI为<strong>1.9975</strong></p>\n</li>\n<li><p>假设某程序中，求浮点数平方根FPSQR操作占整个程序执行时间的20%，若使FPSQR的操作速度提高10倍，则系统的加速比为 <strong>1.22</strong>（保留两位小数）</p>\n</li>\n<li><p><strong>解释和仿真原则</strong> 不是计算机设计中经常用到的定量设计原理</p>\n</li>\n<li><p>下列不是冯.诺伊曼计算机的主要特点的是 <strong>机器以控制器为中心</strong></p>\n</li>\n<li><p>面向目标程序优化的思想是 <strong>通过使用频度分析和改进指令系统</strong> 和 <strong>增设强功能复合指令代替原来的软件实现</strong></p>\n</li>\n<li><p>平均码长最短的编码是 <strong>哈夫曼编码</strong></p>\n</li>\n<li><p>操作码优化的主要目的是 <strong>缩短指令字长、减少程序总位数、增加指令字表示的信息</strong></p>\n</li>\n<li><p>信息按整数边界存储的主要优点是 <strong>访存速度快</strong></p>\n</li>\n<li><p>CPU中用来存储操作数的存储单元主要有<strong>堆栈</strong>、<strong>累加器</strong>和<strong>寄存器</strong></p>\n</li>\n<li><p>不需要编址的数据存储空间是 <strong>堆栈</strong></p>\n</li>\n<li><p>采用流水线之后，单从一条指令来看，其执行时间有什么变化 – <strong>一定变长（因为有一定的流水线开销）</strong></p>\n</li>\n<li><p>哪一项是最常见的MIPS数据相关类型 – <strong>写后读</strong></p>\n</li>\n<li><p>理想情况下，流水线的最大加速比等于流水线的段数，所以，应该尽可能采用段数多的流水线方案。<strong>错</strong></p>\n</li>\n<li><p>结构相关一定能消除但不一定要消除，数据相关一定能消除并且一定要消除。<strong>错</strong></p>\n</li>\n<li><p>消除流水线瓶颈的方法有<strong>细分瓶颈段</strong>和<strong>重复设置瓶颈段</strong>两种。</p>\n</li>\n<li><p>流水线中的每个子过程及其功能部件称为流水线的段，流水线的段数称为流水线的 <strong>深度</strong></p>\n</li>\n<li><p>非线性流水线的特征是 <strong>一次运算中要多次使用流水线中的某些功能段</strong></p>\n</li>\n<li><p>按照流水的级别来分，流水线可分为<strong>部件级流水线</strong>、<strong>处理机级流水线</strong>和 <strong>处理机间流水线</strong></p>\n</li>\n<li><p>磁盘存储器适合于连接到<strong>选择通道或数组多路通道</strong></p>\n</li>\n<li><p>在配置有通道的计算机系统中，用户程序需要输入输出时，引起的中断是<strong>访管中断</strong></p>\n</li>\n<li><p>当计算机系统通过执行通道程序完成输入输出工作时，执行通道程序的是<strong>通道</strong></p>\n</li>\n<li><p>输入输出数据不经过CPU内部寄存器的输入输出方式是<strong>直接存储器访问方式</strong></p>\n</li>\n<li><p>目前，全球权威的评测服务器性能的现行标准是<strong>TPC-C</strong></p>\n</li>\n<li><p>下面不属于总线特点的是<strong>并行性</strong></p>\n</li>\n<li><p>现有的MIMD机器可分为集中式共享存储器结构和<strong>分布式</strong>共享存储器结构两类。每一类代表了一种存储器的结构和互连策略</p>\n</li>\n<li><p>实现Cache一致性协议有写作废协议和<strong>写更新协议</strong>两类</p>\n</li>\n<li><p>能实现指令级、程序级、任务级并行的计算机系统是<strong>MIMD</strong></p>\n</li>\n<li><p>性能较高的互联网络的特点不包括<strong>出错率低</strong></p>\n</li>\n<li><p>对于多处理机系统，维护各处理器缓存内容版本同步的协议称为<strong>Cache一致性协议</strong></p>\n</li>\n<li><p>数据流计算机的特点不包括<strong>没有操作码</strong></p>\n</li>\n<li><p>Cache存储系统中，主存有0~7共8块，Cache为4块， 若采用<strong>直接相联映像</strong>方式，则主存中第6块将映像到Cache中的哪一块。<strong>第二块</strong></p>\n</li>\n<li><p>Cache存储系统中，主存有0~7共8块，Cache为4块,若采用<strong>每组2块的组相联映像方式</strong>，则主存中第6块将映像到Cache中的哪一块。<strong>第二块或第三块</strong></p>\n</li>\n<li><p>Cache存储系统中，主存有0~7共8块，Cache为4块，采用<strong>全相联映像</strong>方式，则主存中第6块将映像到Cache中的哪一块。<strong>4块中的任意一块</strong></p>\n</li>\n<li><p>按Cache地址映像的块冲突率从高到低的顺序是<strong>直接映像、组相联映像、全相联映像</strong></p>\n</li>\n<li><p><strong>支持共享存储器的可缩放机器，既可以支持也可以不支持Cache一致性</strong>。<strong>√</strong></p>\n</li>\n<li><p>粗粒度多线程技术能够在每条指令间都能进行线程的切换，从而导致多个线程的交替执行。<strong>×</strong></p>\n</li>\n<li><p>在多处理机中实现同步的硬件原语功能，能够自动读出并修改存储单元，普通用户也可以随便使用。<strong>×</strong></p>\n</li>\n<li><p><strong>多处理机结构由若干台独立的计算机组成，每台计算机能够独立执行自己的程序。</strong> <strong>√</strong></p>\n</li>\n<li><p><strong>单碟容量的提高不仅可以提高硬盘的总容量，而且还能提高硬盘的性能。</strong> <strong>√</strong></p>\n</li>\n<li><p>在计算机系统中，导致错误的原因是各种故障，因此，只要有故障就一定会导致错误。<strong>×</strong></p>\n</li>\n<li><p>在RAID0~RAID6的各级磁盘阵列中，都是通过添加冗余信息来增加系统整体可靠性的，但是具体方法不太一样。<strong>×</strong></p>\n</li>\n<li><p>采用RAID技术之后，不仅系统可靠性得到提升，单盘可靠性也得以改善。<strong>×</strong></p>\n</li>\n<li><p><strong>单功能流水线一定是静态流水线</strong> <strong>√</strong></p>\n</li>\n<li><p><strong>动态流水线一定是多功能流水线</strong> <strong>√</strong></p>\n</li>\n<li><p>多功能流水线一定是动态流水线 <strong>×</strong></p>\n</li>\n</ul>\n","feature":true,"text":"计算机体系结构概述涵盖了计算机硬件和软件之间的组织关系和交互方式。它包括指令集架构、处理器结构、存储器层次结构、输入输出系统等内容。计算机体系结构的设计直接影响着计算机的性能、功耗和可扩展性。...","permalink":"/post/计算机体系结构知识点大全","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"计算机科学与技术","slug":"计算机科学与技术","count":6,"path":"api/categories/计算机科学与技术.json"}],"tags":[{"name":"计算机体系结构","slug":"计算机体系结构","count":1,"path":"api/tags/计算机体系结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">计算机体系结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-1%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Chapter-1：计算机系统结构的基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-2%EF%BC%9A%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">Chapter-2：指令系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-3%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">Chapter-3：流水线技术</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-4%EF%BC%9A%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1\"><span class=\"toc-text\">Chapter-4：存储层次</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-5%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">Chapter-5：输入输出系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-6%EF%BC%9A%E5%A4%9A%E5%A4%84%E7%90%86%E6%9C%BA\"><span class=\"toc-text\">Chapter-6：多处理机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chapter-7%EF%BC%9A%E9%9D%9E%E5%86%AF-%E6%B4%9B%E4%BE%9D%E6%9B%BC%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA\"><span class=\"toc-text\">Chapter-7：非冯-洛依曼型计算机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E6%97%B6%E6%B5%8B%E9%AA%8C\"><span class=\"toc-text\">平时测验</span></a></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"计算机信息安全概论概述","uid":"018c91442287589961fe36016761790e","slug":"计算机信息安全概论","date":"2023-07-24T01:40:45.000Z","updated":"2025-07-14T15:12:20.470Z","comments":true,"path":"api/articles/计算机信息安全概论.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/145b5a24757a4f88b134f9fa87f46d78.png","text":"计算机信息安全概论是对计算机系统和网络中的安全问题进行综合性的介绍和分析。它涵盖了信息安全的基本概念、威胁与攻击类型、安全防护措施等内容。计算机信息安全概论旨在帮助人们理解和应对计算机系统和网络中的安全风险，保护敏感信息免受未经授权的访问、篡改和破坏。...","permalink":"/post/计算机信息安全概论","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"计算机科学与技术","slug":"计算机科学与技术","count":6,"path":"api/categories/计算机科学与技术.json"}],"tags":[{"name":"信息安全概论","slug":"信息安全概论","count":1,"path":"api/tags/信息安全概论.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"微信小程序运行原理揭秘：高效的更新机制","uid":"e6457ff6789a076addbc03fc1dc3721a","slug":"前端--微信小程序运行及更新机制","date":"2023-04-23T14:34:07.000Z","updated":"2025-07-14T15:12:20.465Z","comments":true,"path":"api/articles/前端--微信小程序运行及更新机制.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/direct/99ef3a76e98343f09343b862791073a9.png","text":"微信小程序是一种可以在微信平台上运行的应用程序。它不需要下载和安装，用户可以直接通过微信扫码或搜索进入使用。微信小程序具有轻量、快速、跨平台等特点，开发者可以使用HTML、CSS、JavaScript等前端技术进行开发。...","permalink":"/post/前端--微信小程序运行及更新机制","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"微信小程序","slug":"微信小程序","count":5,"path":"api/tags/微信小程序.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}