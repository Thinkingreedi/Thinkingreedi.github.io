{"title":"Ajax实战指南：快速入门","uid":"269efa4fe53bba32d25aec66c5987385","slug":"前端--详解AJAX(快速入门)","date":"2023-01-15T01:38:59.000Z","updated":"2025-07-14T15:12:20.466Z","comments":true,"path":"api/articles/前端--详解AJAX(快速入门).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/7f6c7c162dd6446782022ec8ae527017.jpeg","content":"<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><h2 id=\"1、AJAX概述\"><a href=\"#1、AJAX概述\" class=\"headerlink\" title=\"1、AJAX概述\"></a>1、AJAX概述</h2><h3 id=\"1-1-AJAX简介\"><a href=\"#1-1-AJAX简介\" class=\"headerlink\" title=\"1.1 AJAX简介\"></a>1.1 AJAX简介</h3><ul>\n<li>AJAX全称为Asynchronous JavaScript And XML，就是异步的JS和XML</li>\n<li>通过AJAX可以在浏览器中向服务器发送异步请求，最大的优势:<strong>无刷新获取数据</strong></li>\n<li>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li>\n</ul>\n<h3 id=\"1-2-XML简介\"><a href=\"#1-2-XML简介\" class=\"headerlink\" title=\"1.2  XML简介\"></a>1.2  XML简介</h3><ul>\n<li>XML可扩展标记语言</li>\n<li>XML被设计用来传输和存储数据</li>\n<li>XML和HTML类似，不同的是HTML中都是预定义标签，而XML中没有预定义标签，全都是自定义标签，用来表示一些数据</li>\n</ul>\n<pre><code class=\"xml\">&lt;!--XML表示--&gt;\n&lt;student&gt;\n    &lt;name&gt;孙情空&lt;/name&gt;\n    &lt;age&gt;18&lt;/age&gt;\n    &lt;gender&gt;男&lt;/gender&gt;\n&lt;/student&gt;\n</code></pre>\n<pre><code class=\"json\">//JSON表示\n&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;\n</code></pre>\n<h3 id=\"1-3-AJAX的特点\"><a href=\"#1-3-AJAX的特点\" class=\"headerlink\" title=\"1.3 AJAX的特点\"></a>1.3 AJAX的特点</h3><ul>\n<li>AJAX的优点<ol>\n<li><strong>可以无需刷新页面而与服务器端进行通信</strong></li>\n<li>允许你根据用户事件来更新部分页面内容</li>\n</ol>\n</li>\n<li>AJAX的缺点<ol>\n<li>没有浏览历史，不能回退</li>\n<li>存在跨域问题(同源)</li>\n<li>SEO不友好</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2、HTTP相关\"><a href=\"#2、HTTP相关\" class=\"headerlink\" title=\"2、HTTP相关\"></a>2、HTTP相关</h2><h3 id=\"2-1-HTTP概述\"><a href=\"#2-1-HTTP概述\" class=\"headerlink\" title=\"2.1 HTTP概述\"></a>2.1 HTTP概述</h3><ul>\n<li><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview\">HTTP概述 - HTTP | MDN (mozilla.org)</a></p>\n</li>\n<li><p>HTTP交互：</p>\n<ol>\n<li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li>\n<li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li>\n<li>浏览器端接收到响应, 解析显示响应体&#x2F;调用监视回调</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-2-请求报文\"><a href=\"#2-2-请求报文\" class=\"headerlink\" title=\"2.2 请求报文\"></a>2.2 请求报文</h3><pre><code class=\"Markdown\">行      POST  /s?ie=utf-8  HTTP/1.1 \n头      Host: atguigu.com\n        Cookie: name=guigu\n        Content-type: application/x-www-form-urlencoded\n        User-Agent: chrome 83\n空行\n体      username=admin&amp;password=admin\n</code></pre>\n<h3 id=\"2-3-响应报文\"><a href=\"#2-3-响应报文\" class=\"headerlink\" title=\"2.3 响应报文\"></a>2.3 响应报文</h3><pre><code class=\"Markdown\">行      HTTP/1.1  200  OK\n头      Content-Type: text/html;charset=utf-8\n        Content-length: 2048\n        Content-encoding: gzip\n空行    \n体      &lt;html&gt;\n            &lt;head&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;尚硅谷&lt;/h1&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n</code></pre>\n<h3 id=\"2-4-常见的响应状态码\"><a href=\"#2-4-常见的响应状态码\" class=\"headerlink\" title=\"2.4 常见的响应状态码\"></a>2.4 常见的响应状态码</h3><ul>\n<li><strong>200 OK</strong> 请求成功。一般用于GET 与POST 请求</li>\n<li><strong>201 Created</strong> 已创建。成功请求并创建了新的资源</li>\n<li><strong>401 Unauthorized</strong> 未授权&#x2F;请求要求用户的身份认证</li>\n<li><strong>404 Not Found</strong> 服务器无法根据客户端的请求找到资源</li>\n<li><strong>500 Internal Server Error</strong> 服务器内部错误，无法完成请求</li>\n</ul>\n<h3 id=\"2-5-不同类型的请求及其作用\"><a href=\"#2-5-不同类型的请求及其作用\" class=\"headerlink\" title=\"2.5 不同类型的请求及其作用\"></a>2.5 不同类型的请求及其作用</h3><ul>\n<li>GET: 从服务器端读取数据（查）</li>\n<li>POST: 向服务器端添加新数据 （增）</li>\n<li>PUT: 更新服务器端已有数据 （改）</li>\n<li>DELETE: 删除服务器端数据 （删）</li>\n</ul>\n<h3 id=\"2-6-一般http请求-与-ajax请求\"><a href=\"#2-6-一般http请求-与-ajax请求\" class=\"headerlink\" title=\"2.6 一般http请求 与 ajax请求\"></a>2.6 一般http请求 与 ajax请求</h3><ul>\n<li>ajax请求是一种特别的 http请求</li>\n<li>对服务器端来说, 没有任何区别, 区别在浏览器端</li>\n<li>浏览器端发请求: <strong>只有XHR 或fetch 发出的才是ajax 请求</strong>, <strong>其它所有的都是非ajax 请求</strong></li>\n<li>浏览器端接收到响应<br>  (1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新&#x2F;跳转页面<br>  (2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</li>\n</ul>\n<h2 id=\"3、原生AJAX的使用\"><a href=\"#3、原生AJAX的使用\" class=\"headerlink\" title=\"3、原生AJAX的使用\"></a>3、原生AJAX的使用</h2><h3 id=\"3-1-准备工作\"><a href=\"#3-1-准备工作\" class=\"headerlink\" title=\"3.1 准备工作\"></a>3.1 准备工作</h3><p><strong>安装node.js</strong></p>\n<ul>\n<li><a href=\"http://nodejs.cn/\">Node.js 中文网 (nodejs.cn)</a></li>\n<li>检查安装成功：node -v(命令行窗口)</li>\n</ul>\n<p><strong>安装express(服务端框架)</strong></p>\n<ul>\n<li><p><a href=\"https://www.expressjs.com.cn/\">Express - 基于 Node.js 平台的 web 应用开发框架 - Express 中文文档 | Express 中文网 (expressjs.com.cn)</a></p>\n</li>\n<li><p>操作步骤：</p>\n<ol>\n<li><p>初始化环境：<code>npm init --yes</code></p>\n</li>\n<li><p>下载express包：<code>npm install express --save</code></p>\n</li>\n<li><p>编写js代码：</p>\n<pre><code class=\"javascript\">// 1. 引入express\nconst express = require(&#39;express&#39;);\n\n// 2. 创建应用对象\nconst app = express();\n\n// 3. 创建路由规则\n// request 是对请求报文的封装\n// response 是对响应报文的封装\napp.get(&#39;/&#39;, (request, response) =&gt; &#123;\n  //  设置响应\n  response.send(&quot;Hello Express&quot;);\n&#125;);\n\n// 4. 监听端口，启动服务\napp.listen(8000, () =&gt; &#123;\n  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);\n &#125;)\n</code></pre>\n</li>\n<li><p>运行js程序：<code>node .\\01express使用.js</code></p>\n</li>\n<li><p>打开网页显示页面</p>\n</li>\n<li><p>调试程序可以查看请求和响应</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>安装nodemon自动重启工具</strong></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/nodemon\">nodemon - npm (npmjs.com)</a></li>\n<li>步骤：<ol>\n<li>安装：<code>npm install -g nodemon</code></li>\n<li>启动服务：<code>nodemon server.js</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-2-核心对象\"><a href=\"#3-2-核心对象\" class=\"headerlink\" title=\"3.2 核心对象\"></a>3.2 核心对象</h3><ul>\n<li><p>核心对象</p>\n<ul>\n<li>XMLHttpRequest，AJAX的所有操作都是通过该对象进行的</li>\n</ul>\n</li>\n<li><p>使用步骤</p>\n<ol>\n<li><p>创建XMLHttpRequest对象</p>\n<pre><code class=\"javascript\">var xhr = new XMLHttpRequest();\n</code></pre>\n</li>\n<li><p>设置请求信息</p>\n<pre><code class=\"javascript\">xhr.open(method, url);\n//可以设置请求头，一般不设置\nxhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;);\n</code></pre>\n</li>\n<li><p>发送请求</p>\n<pre><code class=\"javascript\">xhr.send(body)//get请求不传body参数，只有post 请求使用\n</code></pre>\n</li>\n<li><p>接收响应</p>\n<pre><code class=\"javascript\">//xhr.responseXML接收xml格式的响应数据\n//xhr.responseText接收文本格式的响应数据\nxhr.onreadystatechange = function ()&#123;\n        if(xhr.readyState == 4 &amp;&amp;xhr.status == 200)&#123;\n            var text = xhr.responseText;\n            console.log(text);\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-3-GET请求\"><a href=\"#3-3-GET请求\" class=\"headerlink\" title=\"3.3 GET请求\"></a>3.3 GET请求</h3><ul>\n<li><p>点击返回响应信息</p>\n</li>\n<li><p>创建浏览器端使用的html文件和服务端使用的js文件</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/f3cdf7a415b740b3a665f5ceda296428.png#pic_center\"></p>\n<ul>\n<li>服务器端server.js</li>\n</ul>\n<pre><code class=\"javascript\">// 1. 引入express\nconst express = require(&#39;express&#39;);\n\n// 2. 创建应用对象\nconst app = express();\n\n// 3. 创建路由规则\napp.get(&#39;/server&#39;, (request, response) =&gt; &#123;\n  // 设置响应头 设置允许跨域\n  response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n  // 设置响应体\n  response.send(&quot;Hello Ajax&quot;);\n&#125;);\n\n// 4. 监听服务\napp.listen(8000, () =&gt; &#123;\n  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);\n &#125;)\n</code></pre>\n<ul>\n<li>启动服务：<code>node server.js</code></li>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;AJAX GET 请求&lt;/title&gt;\n    &lt;style&gt;\n        #result &#123;\n            width: 200px;\n            height: 100px;\n            border: solid 1px #90b;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;button&gt;点击发送请求&lt;/button&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        //获取button元素\n        const btn = document.getElementsByTagName(&#39;button&#39;)[0];\n        const result = document.getElementById(&quot;result&quot;);\n        //绑定事件\n        btn.onclick = function () &#123;\n            //1. 创建对象\n            const xhr = new XMLHttpRequest();\n            //2. 初始化 设置请求方法和 url\n            xhr.open(&#39;GET&#39;, &#39;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#39;);\n            //3. 发送\n            xhr.send();\n            //4. 事件绑定 处理服务端返回的结果\n            // on  when 当....时候\n            // readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4\n            // change  改变\n            xhr.onreadystatechange = function () &#123;\n                //判断 (服务端返回了所有的结果)\n                if (xhr.readyState === 4) &#123;\n                    //判断响应状态码 200  404  403 401 500\n                    // 2xx 成功\n                    if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123;\n                        //处理结果  行 头 空行 体\n                        //响应 \n                        // console.log(xhr.status);//状态码\n                        // console.log(xhr.statusText);//状态字符串\n                        // console.log(xhr.getAllResponseHeaders());//所有响应头\n                        // console.log(xhr.response);//响应体\n                        //设置 result 的文本\n                        result.innerHTML = xhr.response;\n                    &#125; else &#123;\n\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><strong>GET请求设置请求参数</strong></p>\n<ul>\n<li>设置url参数：<code>xhr.open(&#39;GET&#39;, &#39;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#39;);</code></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/7366343785f04742b6c846cf14ac42fb.png#pic_center\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/8cc6cbfbe75b41519cad3591a6171539.png#pic_center\"></p>\n<h3 id=\"3-4-POST请求\"><a href=\"#3-4-POST请求\" class=\"headerlink\" title=\"3.4 POST请求\"></a>3.4 POST请求</h3><ul>\n<li><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p>\n</li>\n<li><p>server.js添加post</p>\n</li>\n</ul>\n<pre><code class=\"javascript\">//可以接收任意类型的请求 \napp.all(&#39;/server&#39;, (request, response) =&gt; &#123;\n    //设置响应头  设置允许跨域\n    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    //响应头\n    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n    //设置响应体\n    response.send(&#39;HELLO AJAX POST&#39;);\n&#125;);\n</code></pre>\n<ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;AJAX POST 请求&lt;/title&gt;\n    &lt;style&gt;\n        #result&#123;\n            width:200px;\n            height:100px;\n            border:solid 1px #903;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        //获取元素对象\n        const result = document.getElementById(&quot;result&quot;);\n        //绑定事件\n        result.addEventListener(&quot;mouseover&quot;, function()&#123;\n            //1. 创建对象\n            const xhr = new XMLHttpRequest();\n            //2. 初始化 设置类型与 URL\n            xhr.open(&#39;POST&#39;, &#39;http://127.0.0.1:8000/server&#39;);\n            //设置请求头\n            xhr.setRequestHeader(&#39;Content-Type&#39;,&#39;application/x-www-form-urlencoded&#39;);\n            xhr.setRequestHeader(&#39;name&#39;,&#39;atguigu&#39;);\n            //3. 发送\n            xhr.send(&#39;a=100&amp;b=200&amp;c=300&#39;);\n            // xhr.send(&#39;a:100&amp;b:200&amp;c:300&#39;);\n            // xhr.send(&#39;1233211234567&#39;);\n            \n            //4. 事件绑定\n            xhr.onreadystatechange = function()&#123;\n                //判断\n                if(xhr.readyState === 4)&#123;\n                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;\n                        //处理服务端返回的结果\n                        result.innerHTML = xhr.response;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/0b703b40e51d43dcbb7b6751a8f1fdcd.png#pic_center\"></p>\n<p><strong>设置请求头信息</strong></p>\n<pre><code class=\"javascript\">// 设置请求体内容的类型\nxhr.setRequesHeader(&#39;Content-Type&#39;,&#39;application/x-www-from-urlencoded&#39;);\n// 自定义头信息\nxhr.setRequesHeader(&#39;name&#39;, &#39;ashiyi&#39;);\n</code></pre>\n<ul>\n<li>server.js中设置响应头允许自定义请求头 post改成all</li>\n</ul>\n<pre><code class=\"javascript\">response.setHeader(&#39;Access-Control-Allow-Header&#39;,&#39;*&#39;);\n</code></pre>\n<h3 id=\"3-5-json数据请求\"><a href=\"#3-5-json数据请求\" class=\"headerlink\" title=\"3.5 json数据请求\"></a>3.5 json数据请求</h3><pre><code class=\"JavaScript\">app.all(&#39;/json-server&#39;, (request, response) =&gt; &#123;\n  // 设置响应头, 设置允许跨域\n  response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n  // 设置响应头, 设置允许自定义头信息\n  response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n  // 响应一个数据\n  const data = &#123;\n    name: &#39;atguigu&#39;\n  &#125;;\n  // 对 对象 进行 字符串 转换\n  let str = JSON.stringify(data)\n  // 设置响应体 \n  response.send(str);\n&#125;);\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;JSON响应&lt;/title&gt;\n    &lt;style&gt;\n        #result&#123;\n            width:200px;\n            height:100px;\n            border:solid 1px #89b;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        const result = document.getElementById(&#39;result&#39;);\n        //绑定键盘按下事件\n        window.onkeydown = function()&#123;\n            //发送请求\n            const xhr = new XMLHttpRequest();\n            //设置响应体数据的类型\n            xhr.responseType = &#39;json&#39;;\n            //初始化\n            xhr.open(&#39;GET&#39;,&#39;http://127.0.0.1:8000/json-server&#39;);\n            //发送\n            xhr.send();\n            //事件绑定\n            xhr.onreadystatechange = function()&#123;\n                if(xhr.readyState === 4)&#123;\n                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;\n                        //\n                        // console.log(xhr.response);\n                        // result.innerHTML = xhr.response;\n                        // 1. 手动对数据转化\n                        // let data = JSON.parse(xhr.response);\n                        // console.log(data);\n                        // result.innerHTML = data.name;\n                        // 2. 自动转换\n                        console.log(xhr.response);\n                        result.innerHTML = xhr.response.name;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/bb9e081745d7496aad0745aaba1e3623.png#pic_center\"></p>\n<h3 id=\"3-6-解决IE缓存问题\"><a href=\"#3-6-解决IE缓存问题\" class=\"headerlink\" title=\"3.6 解决IE缓存问题\"></a>3.6 解决IE缓存问题</h3><ul>\n<li>问题:在一些浏览器中(IE),由于缓存机制的存在，ajax只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据</li>\n<li>解决方式:浏览器的缓存是根据url地址来记录的，所以我们<strong>只需要修改url地址即可避免缓存问题</strong></li>\n<li><code>xhr.open(&quot;get&quot; ,&quot; /testAJAX?t=&quot;+Date.now());</code></li>\n</ul>\n<h3 id=\"3-7-请求超时和网络异常\"><a href=\"#3-7-请求超时和网络异常\" class=\"headerlink\" title=\"3.7 请求超时和网络异常\"></a>3.7 请求超时和网络异常</h3><ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"JavaScript\">// 超时设置 （2秒）\nxhr.timeout = 2000;\n// 超时回调\nxhr.ontimeout = function()&#123;\n    alert(&#39;网络超时，请稍后重试&#39;)\n&#125;\n// 网络异常回调\nxhr.onerror = function()&#123;\n    alert(&#39;网络异常，请稍后重试&#39;)\n&#125;\n</code></pre>\n<ul>\n<li>server.js</li>\n</ul>\n<pre><code class=\"javascript\">//延时响应\napp.all(&#39;/delay&#39;, (request, response) =&gt; &#123;\n    //设置响应头  设置允许跨域\n    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n    setTimeout(() =&gt; &#123;\n        //设置响应体\n        response.send(&#39;延时响应&#39;);\n    &#125;, 1000)\n&#125;);\n</code></pre>\n<h3 id=\"3-8-取消请求\"><a href=\"#3-8-取消请求\" class=\"headerlink\" title=\"3.8 取消请求\"></a>3.8 取消请求</h3><pre><code class=\"JavaScript\">// 手动取消\nxhr.abort()\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;取消请求&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;点击发送&lt;/button&gt;\n    &lt;button&gt;点击取消&lt;/button&gt;\n    &lt;script&gt;\n        //获取元素对象\n        const btns = document.querySelectorAll(&#39;button&#39;);\n        let x = null;\n\n        btns[0].onclick = function()&#123;\n            x = new XMLHttpRequest();\n            x.open(&quot;GET&quot;,&#39;http://127.0.0.1:8000/delay&#39;);\n            x.send();\n        &#125;\n\n        // abort\n        btns[1].onclick = function()&#123;\n            x.abort();\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p> <strong>重复请求问题</strong></p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;重复请求问题&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;点击发送&lt;/button&gt;\n    &lt;script&gt;\n        //获取元素对象\n        const btns = document.querySelectorAll(&#39;button&#39;);\n        let x = null;\n        //标识变量\n        let isSending = false; // 是否正在发送AJAX请求\n\n        btns[0].onclick = function()&#123;\n            //判断标识变量\n            if(isSending) \n                x.abort();// 如果正在发送, 则取消该请求, 创建一个新的请求\n            x = new XMLHttpRequest();\n            //修改 标识变量的值\n            isSending = true;\n            x.open(&quot;GET&quot;,&#39;http://127.0.0.1:8000/delay&#39;);\n            x.send();\n            x.onreadystatechange = function()&#123;\n                if(x.readyState === 4)&#123;\n                    //修改标识变量\n                    isSending = false;//节流\n                &#125;\n            &#125;\n        &#125;\n        // abort\n        btns[1].onclick = function()&#123;\n            x.abort();\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"3-9-AJAX请求状态\"><a href=\"#3-9-AJAX请求状态\" class=\"headerlink\" title=\"3.9 AJAX请求状态\"></a>3.9 AJAX请求状态</h3><ul>\n<li>xhr.readyState 可以用来查看请求当前的状态</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState\">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></li>\n<li>0:表示XMLHttpRequest实例已经生成，但是open()方法还没有被调用</li>\n<li>1:表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息</li>\n<li>2:表示send()方法已经执行，并且头信息和状态码已经收到</li>\n<li>3:表示正在接收服务器传来的body 部分的数据</li>\n<li>4:表示服务器数据已经完全接收，或者本次接收已经失败了</li>\n</ul>\n<h3 id=\"3-10-API总结\"><a href=\"#3-10-API总结\" class=\"headerlink\" title=\"3.10 API总结\"></a>3.10 API总结</h3><ul>\n<li>XMLHttpRequest()：创建 XHR 对象的构造函数</li>\n<li>status：响应状态码值，如 200、404</li>\n<li>statusText：响应状态文本，如 ’ok‘、‘not found’</li>\n<li>readyState：标识请求状态的只读属性 0-1-2-3-4</li>\n<li>onreadystatechange：绑定 readyState 改变的监听</li>\n<li>responseType：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应</li>\n<li>response：响应体数据，类型取决于 responseType 的指定</li>\n<li>timeout：指定请求超时时间，默认为 0 代表没有限制</li>\n<li>ontimeout：绑定超时的监听</li>\n<li>onerror：绑定请求网络错误的监听</li>\n<li>open()：初始化一个请求，参数为：(method, url[, async])</li>\n<li>send(data)：发送请求</li>\n<li>abort()：中断请求 （发出到返回之间）</li>\n<li>getResponseHeader(name)：获取指定名称的响应头值</li>\n<li>getAllResponseHeaders()：获取所有响应头组成的字符串</li>\n<li>setRequestHeader(name, value)：设置请求头</li>\n</ul>\n<h2 id=\"4、jQuery-AJAX\"><a href=\"#4、jQuery-AJAX\" class=\"headerlink\" title=\"4、jQuery-AJAX\"></a>4、jQuery-AJAX</h2><h3 id=\"4-1-get请求\"><a href=\"#4-1-get请求\" class=\"headerlink\" title=\"4.1 get请求\"></a>4.1 get请求</h3><ul>\n<li>$.get(url, [data], [callback], [type])<ul>\n<li>url:请求的URL地址</li>\n<li>data:请求携带的参数</li>\n<li>callback:载入成功时回调函数</li>\n<li>type:设置返回内容格式，xml, html, script, json, text,_default</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-post请求\"><a href=\"#4-2-post请求\" class=\"headerlink\" title=\"4.2 post请求\"></a>4.2 post请求</h3><ul>\n<li>$.post(url, [data], [callback], [type])<ul>\n<li>url:请求的URL地址</li>\n<li>data:请求携带的参数</li>\n<li>callback:载入成功时回调函数</li>\n<li>type:设置返回内容格式，xml, html, script, json, text,_default</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-通用方法\"><a href=\"#4-3-通用方法\" class=\"headerlink\" title=\"4.3 通用方法\"></a>4.3 通用方法</h3><ul>\n<li>前端代码</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;jQuery 发送 AJAX 请求&lt;/title&gt;\n    &lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;h2 class=&quot;page-header&quot;&gt;jQuery发送AJAX请求 &lt;/h2&gt;\n        &lt;button class=&quot;btn btn-primary&quot;&gt;GET&lt;/button&gt;\n        &lt;button class=&quot;btn btn-danger&quot;&gt;POST&lt;/button&gt;\n        &lt;button class=&quot;btn btn-info&quot;&gt;通用型方法ajax&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        $(&#39;button&#39;).eq(0).click(function()&#123;\n            $.get(&#39;http://127.0.0.1:8000/jquery-server&#39;, &#123;a:100, b:200&#125;, function(data)&#123;\n                console.log(data);\n            &#125;,&#39;json&#39;);\n        &#125;);\n\n        $(&#39;button&#39;).eq(1).click(function()&#123;\n            $.post(&#39;http://127.0.0.1:8000/jquery-server&#39;, &#123;a:100, b:200&#125;, function(data)&#123;\n                console.log(data);\n            &#125;);\n        &#125;);\n\n        $(&#39;button&#39;).eq(2).click(function()&#123;\n            $.ajax(&#123;\n                //url\n                url: &#39;http://127.0.0.1:8000/jquery-server&#39;,\n                //参数\n                data: &#123;a:100, b:200&#125;,\n                //请求类型\n                type: &#39;GET&#39;,\n                //响应体结果\n                dataType: &#39;json&#39;,\n                //成功的回调\n                success: function(data)&#123;\n                    console.log(data);\n                &#125;,\n                //超时时间\n                timeout: 2000,\n                //失败的回调\n                error: function()&#123;\n                    console.log(&#39;出错啦!!&#39;);\n                &#125;,\n                //头信息\n                headers: &#123;\n                    c:300,\n                    d:400\n                &#125;\n            &#125;);\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js添加</li>\n</ul>\n<pre><code class=\"JavaScript\">//jQuery 服务\napp.all(&#39;/jquery-server&#39;, (request, response) =&gt; &#123;\n    //设置响应头  设置允许跨域\n    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n    // response.send(&#39;Hello jQuery AJAX&#39;);\n    const data = &#123;name:&#39;尚硅谷&#39;&#125;;\n    response.send(JSON.stringify(data));\n&#125;);\n</code></pre>\n<h2 id=\"5、Axios-AJAX\"><a href=\"#5、Axios-AJAX\" class=\"headerlink\" title=\"5、Axios-AJAX\"></a>5、Axios-AJAX</h2><ul>\n<li>前端界面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;axios 发送 AJAX请求&lt;/title&gt;\n    &lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;button&gt;GET&lt;/button&gt;\n    &lt;button&gt;POST&lt;/button&gt;\n    &lt;button&gt;AJAX&lt;/button&gt;\n\n    &lt;script&gt;\n        // https://github.com/axios/axios\n        const btns = document.querySelectorAll(&#39;button&#39;);\n\n        //配置 baseURL\n        axios.defaults.baseURL = &#39;http://127.0.0.1:8000&#39;;\n\n        btns[0].onclick = function () &#123;\n            //GET 请求\n            axios.get(&#39;/axios-server&#39;, &#123;\n                //url 参数\n                params: &#123;\n                    id: 100,\n                    vip: 7\n                &#125;,\n                //请求头信息\n                headers: &#123;\n                    name: &#39;atguigu&#39;,\n                    age: 20\n                &#125;\n            &#125;).then(value =&gt; &#123;\n                console.log(value);\n            &#125;);\n        &#125;\n\n        btns[1].onclick = function () &#123;\n            axios.post(&#39;/axios-server&#39;, &#123;\n                username: &#39;admin&#39;,\n                password: &#39;admin&#39;\n            &#125;, &#123;\n                //url \n                params: &#123;\n                    id: 200,\n                    vip: 9\n                &#125;,\n                //请求头参数\n                headers: &#123;\n                    height: 180,\n                    weight: 180,\n                &#125;\n            &#125;);\n        &#125;\n    \n        btns[2].onclick = function()&#123;\n            axios(&#123;\n                //请求方法\n                method : &#39;POST&#39;,\n                //url\n                url: &#39;/axios-server&#39;,\n                //url参数\n                params: &#123;\n                    vip:10,\n                    level:30\n                &#125;,\n                //头信息\n                headers: &#123;\n                    a:100,\n                    b:200\n                &#125;,\n                //请求体参数\n                data: &#123;\n                    username: &#39;admin&#39;,\n                    password: &#39;admin&#39;\n                &#125;\n            &#125;).then(response=&gt;&#123;\n                //响应状态码\n                console.log(response.status);\n                //响应状态字符串\n                console.log(response.statusText);\n                //响应头信息\n                console.log(response.headers);\n                //响应体\n                console.log(response.data);\n            &#125;)\n        &#125;\n    &lt;/script&gt; \n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js添加</li>\n</ul>\n<pre><code class=\"javascript\">//axios 服务\napp.all(&#39;/axios-server&#39;, (request, response) =&gt; &#123;\n    //设置响应头  设置允许跨域\n    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n    // response.send(&#39;Hello jQuery AJAX&#39;);\n    const data = &#123;name:&#39;尚硅谷&#39;&#125;;\n    response.send(JSON.stringify(data));\n&#125;);\n</code></pre>\n<h2 id=\"6、fetch-AJAX\"><a href=\"#6、fetch-AJAX\" class=\"headerlink\" title=\"6、fetch-AJAX\"></a>6、fetch-AJAX</h2><ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;fetch 发送 AJAX请求&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;AJAX请求&lt;/button&gt;\n    &lt;script&gt;\n        //文档地址\n        //https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n        \n        const btn = document.querySelector(&#39;button&#39;);\n\n        btn.onclick = function()&#123;\n            fetch(&#39;http://127.0.0.1:8000/fetch-server?vip=10&#39;, &#123;\n                //请求方法\n                method: &#39;POST&#39;,\n                //请求头\n                headers: &#123;\n                    name:&#39;atguigu&#39;\n                &#125;,\n                //请求体\n                body: &#39;username=admin&amp;password=admin&#39;\n            &#125;).then(response =&gt; &#123;\n                // return response.text();\n                return response.json();\n            &#125;).then(response=&gt;&#123;\n                console.log(response);\n            &#125;);\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js添加</li>\n</ul>\n<pre><code class=\"JavaScript\">//fetch 服务\napp.all(&#39;/fetch-server&#39;, (request, response) =&gt; &#123;\n    //设置响应头  设置允许跨域\n    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);\n    // response.send(&#39;Hello jQuery AJAX&#39;);\n    const data = &#123;name:&#39;尚硅谷&#39;&#125;;\n    response.send(JSON.stringify(data));\n&#125;);\n</code></pre>\n<h2 id=\"7、跨域\"><a href=\"#7、跨域\" class=\"headerlink\" title=\"7、跨域\"></a>7、跨域</h2><h3 id=\"7-1-同源策略\"><a href=\"#7-1-同源策略\" class=\"headerlink\" title=\"7.1 同源策略\"></a>7.1 同源策略</h3><ul>\n<li><p>同源策略(Same-Origin Policy)最早由Netscape公司提出，是浏览器的一种安全策略</p>\n</li>\n<li><p>同源:协议、域名、端口号必须完全相同</p>\n</li>\n<li><p>违背同源策略就是跨域</p>\n</li>\n<li><p>前端页面</p>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;首页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;尚硅谷&lt;/h1&gt;\n    &lt;button&gt;点击获取用户数据&lt;/button&gt;\n    &lt;script&gt;\n        const btn = document.querySelector(&#39;button&#39;);\n\n        btn.onclick = function()&#123;\n            const x = new XMLHttpRequest();\n            //这里因为是满足同源策略的, 所以 url 可以简写\n            x.open(&quot;GET&quot;,&#39;/data&#39;);\n            //发送\n            x.send();\n            //\n            x.onreadystatechange = function()&#123;\n                if(x.readyState === 4)&#123;\n                    if(x.status &gt;= 200 &amp;&amp; x.status &lt; 300)&#123;\n                        console.log(x.response);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js</li>\n</ul>\n<pre><code class=\"javascript\">const express = require(&#39;express&#39;);\n\nconst app = express();\n\napp.get(&#39;/home&#39;, (request, response)=&gt;&#123;\n    //响应一个页面\n    response.sendFile(__dirname + &#39;/index.html&#39;);\n&#125;);\n\napp.get(&#39;/data&#39;, (request, response)=&gt;&#123;\n    response.send(&#39;用户数据&#39;);\n&#125;);\n\napp.listen(9000, ()=&gt;&#123;\n    console.log(&quot;服务已经启动...&quot;);\n&#125;);\n</code></pre>\n<h3 id=\"7-2如何解决跨域\"><a href=\"#7-2如何解决跨域\" class=\"headerlink\" title=\"7.2如何解决跨域\"></a>7.2如何解决跨域</h3><p><strong>JSONP</strong></p>\n<ul>\n<li><p>JSONP是什么</p>\n<ul>\n<li>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求</li>\n</ul>\n</li>\n<li><p>JSONP工作流程</p>\n<ul>\n<li>在网页有一些标签天生具有跨域能力，比如:img link iframe script</li>\n<li><strong>JSONP就是利用script标签的跨域能力来发送请求的</strong></li>\n</ul>\n</li>\n<li><p>JSONP的使用</p>\n<ul>\n<li>动态的创建一个script标签</li>\n</ul>\n<pre><code class=\"javascript\">var script = document.createElement(&quot;script&quot;);\n</code></pre>\n<ul>\n<li>设置script的 src，设置回调函数</li>\n</ul>\n<pre><code class=\"javascript\">script.src = &quot;http://localhost:3000/testAJAX?callback=abc&quot;;\nfunction abc(data)&#123;\n           alert(data.name);\n  &#125;;\n</code></pre>\n<ul>\n<li>将script添加到body 中</li>\n</ul>\n<pre><code class=\"javascript\">document.body.appendChild(script);\n</code></pre>\n<ul>\n<li>服务器中路由的处理</li>\n</ul>\n<pre><code class=\"javascript\">router.get(&quot;/testAJAX&quot; , function (req , res) &#123;\n    console.log(&quot;收到请求&quot;);\nvar callback = req.query.callback;\nvar obj=&#123;\n    name:&quot;孙悟空&quot;,\n    age:18\n  &#125;\n  res.send(callback+&quot;(&quot;+JSON.stringify(obj)+&quot;)&quot;);\n&#125;);\n</code></pre>\n<ul>\n<li><p>原理</p>\n<ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;原理演示&lt;/title&gt;\n    &lt;style&gt;\n        #result &#123;\n            width: 300px;\n            height: 100px;\n            border: solid 1px #78a;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        //处理数据\n        function handle(data) &#123;\n            //获取 result 元素\n            const result = document.getElementById(&#39;result&#39;);\n            result.innerHTML = data.name;\n        &#125;\n    &lt;/script&gt;\n    &lt;!-- &lt;script src=&quot;http://127.0.0.1:5500/%E8%AF%BE%E5%A0%82/%E4%BB%A3%E7%A0%81/7-%E8%B7%A8%E5%9F%9F/2-JSONP/js/app.js&quot;&gt;&lt;/script&gt; --&gt;\n    &lt;script src=&quot;http://127.0.0.1:8000/jsonp-server&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js</li>\n</ul>\n<pre><code class=\"javascript\">//jsonp服务\napp.all(&#39;/jsonp-server&#39;,(request, response) =&gt; &#123;\n    // response.send(&#39;console.log(&quot;hello jsonp&quot;)&#39;);\n    const data = &#123;\n        name: &#39;尚硅谷atguigu&#39;\n    &#125;;\n    //将数据转化为字符串\n    let str = JSON.stringify(data);\n    //返回结果\n    response.end(`handle($&#123;str&#125;)`);\n&#125;);\n</code></pre>\n</li>\n<li><p>JSONP实践</p>\n<ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;案例&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    用户名: &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;\n    &lt;p&gt;&lt;/p&gt;\n    &lt;script&gt;\n        //获取 input 元素\n        const input = document.querySelector(&#39;input&#39;);\n        const p = document.querySelector(&#39;p&#39;);\n        \n        //声明 handle 函数\n        function handle(data)&#123;\n            input.style.border = &quot;solid 1px #f00&quot;;\n            //修改 p 标签的提示文本\n            p.innerHTML = data.msg;\n        &#125;\n\n        //绑定事件\n        input.onblur = function()&#123;\n            //获取用户的输入值\n            let username = this.value;\n            //向服务器端发送请求 检测用户名是否存在\n            //1. 创建 script 标签\n            const script = document.createElement(&#39;script&#39;);\n            //2. 设置标签的 src 属性\n            script.src = &#39;http://127.0.0.1:8000/check-username&#39;;\n            //3. 将 script 插入到文档中\n            document.body.appendChild(script);\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js中添加</li>\n</ul>\n<pre><code class=\"JavaScript\">//用户名检测是否存在\napp.all(&#39;/check-username&#39;,(request, response) =&gt; &#123;\n    // response.send(&#39;console.log(&quot;hello jsonp&quot;)&#39;);\n    const data = &#123;\n        exist: 1,\n        msg: &#39;用户名已经存在&#39;\n    &#125;;\n    //将数据转化为字符串\n    let str = JSON.stringify(data);\n    //返回结果\n    response.end(`handle($&#123;str&#125;)`);\n&#125;);\n</code></pre>\n</li>\n<li><p>JQuery中的JSONP</p>\n<ul>\n<li>前端页面</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;jQuery-jsonp&lt;/title&gt;\n    &lt;style&gt;\n        #result&#123;\n            width:300px;\n            height:100px;\n            border:solid 1px #089;\n        &#125;\n    &lt;/style&gt;\n    &lt;script crossorigin=&quot;anonymous&quot; src=&#39;https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js&#39;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;点击发送 jsonp 请求&lt;/button&gt;\n    &lt;div id=&quot;result&quot;&gt;\n\n    &lt;/div&gt;\n    &lt;script&gt;\n        $(&#39;button&#39;).eq(0).click(function()&#123;\n            $.getJSON(&#39;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#39;, function(data)&#123;\n                $(&#39;#result&#39;).html(`\n                    名称: $&#123;data.name&#125;&lt;br&gt;\n                    校区: $&#123;data.city&#125;\n                `)\n            &#125;);\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js中添加</li>\n</ul>\n<pre><code class=\"JavaScript\">app.all(&#39;/jquery-jsonp-server&#39;,(request, response) =&gt; &#123;\n    // response.send(&#39;console.log(&quot;hello jsonp&quot;)&#39;);\n    const data = &#123;\n        name:&#39;尚硅谷&#39;,\n        city: [&#39;北京&#39;,&#39;上海&#39;,&#39;深圳&#39;]\n    &#125;;\n    //将数据转化为字符串\n    let str = JSON.stringify(data);\n    //接收 callback 参数\n    let cb = request.query.callback;\n\n    //返回结果\n    response.end(`$&#123;cb&#125;($&#123;str&#125;)`);\n&#125;);\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p> <strong>CORS</strong></p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access</a> control CORS</p>\n</li>\n<li><p>CORS</p>\n<ul>\n<li>CORS(Cross-Origin Resource Sharing)，跨域资源共享</li>\n<li>CORS是<strong>官方</strong>的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get和 post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</li>\n</ul>\n</li>\n<li><p>CORS工作过程</p>\n<ul>\n<li>CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</li>\n</ul>\n</li>\n<li><p>前端界面</p>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;CORS&lt;/title&gt;\n    &lt;style&gt;\n        #result&#123;\n            width:200px;\n            height:100px;\n            border:solid 1px #90b;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;发送请求&lt;/button&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        const btn = document.querySelector(&#39;button&#39;);\n\n        btn.onclick = function()&#123;\n            //1. 创建对象\n            const x = new XMLHttpRequest();\n            //2. 初始化设置\n            x.open(&quot;GET&quot;, &quot;http://127.0.0.1:8000/cors-server&quot;);\n            //3. 发送\n            x.send();\n            //4. 绑定事件\n            x.onreadystatechange = function()&#123;\n                if(x.readyState === 4)&#123;\n                    if(x.status &gt;= 200 &amp;&amp; x.status &lt; 300)&#123;\n                        //输出响应体\n                        console.log(x.response);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>server.js中添加</li>\n</ul>\n<pre><code class=\"JavaScript\">app.all(&#39;/cors-server&#39;, (request, response)=&gt;&#123;\n    //设置响应头\n    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n    response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &#39;*&#39;);\n    response.setHeader(&quot;Access-Control-Allow-Method&quot;, &#39;*&#39;);\n    // response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);\n    response.send(&#39;hello CORS&#39;);\n&#125;);\n</code></pre>\n<pre><code class=\"html\">&lt;style&gt;\n    #result&#123;\n        width:200px;\n        height:100px;\n        border:solid 1px #90b;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;发送请求&lt;/button&gt;\n    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        const btn = document.querySelector(&#39;button&#39;);\n         btn.onclick = function()&#123;\n        //1. 创建对象\n        const x = new XMLHttpRequest();\n        //2. 初始化设置\n        x.open(&quot;GET&quot;, &quot;http://127.0.0.1:8000/cors-server&quot;);\n        //3. 发送\n        x.send();\n        //4. 绑定事件\n        x.onreadystatechange = function()&#123;\n            if(x.readyState === 4)&#123;\n                if(x.status &gt;= 200 &amp;&amp; x.status &lt; 300)&#123;\n                    //输出响应体\n                    console.log(x.response);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"js\">\n* server.js中添加\n\n~~~JavaScript\napp.all(&#39;/cors-server&#39;, (request, response)=&gt;&#123;\n    //设置响应头\n    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n    response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &#39;*&#39;);\n    response.setHeader(&quot;Access-Control-Allow-Method&quot;, &#39;*&#39;);\n    // response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);\n    response.send(&#39;hello CORS&#39;);\n&#125;);\n</code></pre>\n","feature":true,"text":"前端开发中，Ajax是一种用于异步请求和更新网页内容的技术。通过Ajax，可以在不刷新整个页面的情况下，与服务器进行数据交互。这种技术使得用户能够更加流畅地浏览网页，并实现实时更新数据的功能。...","permalink":"/post/前端--详解AJAX(快速入门)","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Ajax","slug":"Ajax","count":1,"path":"api/tags/Ajax.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AJAX\"><span class=\"toc-text\">AJAX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81AJAX%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1、AJAX概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-AJAX%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.1 AJAX简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-XML%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.2  XML简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-AJAX%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.3 AJAX的特点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81HTTP%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">2、HTTP相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-HTTP%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 HTTP概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">2.2 请求报文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">2.3 响应报文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">2.4 常见的响应状态码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2.5 不同类型的请求及其作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E4%B8%80%E8%88%AChttp%E8%AF%B7%E6%B1%82-%E4%B8%8E-ajax%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2.6 一般http请求 与 ajax请求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8E%9F%E7%94%9FAJAX%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3、原生AJAX的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">3.1 准备工作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.2 核心对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-GET%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3.3 GET请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3.4 POST请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-json%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3.5 json数据请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E8%A7%A3%E5%86%B3IE%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3.6 解决IE缓存问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E5%92%8C%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">3.7 请求超时和网络异常</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-8-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3.8 取消请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-9-AJAX%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">3.9 AJAX请求状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-10-API%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.10 API总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81jQuery-AJAX\"><span class=\"toc-text\">4、jQuery-AJAX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-get%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">4.1 get请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-post%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">4.2 post请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4.3 通用方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Axios-AJAX\"><span class=\"toc-text\">5、Axios-AJAX</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81fetch-AJAX\"><span class=\"toc-text\">6、fetch-AJAX</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">7、跨域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">7.1 同源策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">7.2如何解决跨域</span></a></li></ol></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Git版本控制：提升开发效率的利器","uid":"ad76127bba596077a6c93849dfcec704","slug":"前端--详解Git(快速入门)","date":"2023-01-17T02:06:29.000Z","updated":"2025-07-14T15:12:20.467Z","comments":true,"path":"api/articles/前端--详解Git(快速入门).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/6796a1b23dba46b1a5cb2263314b0bc4.jpeg","text":"Git是一种分布式版本控制系统，广泛应用于软件开发中。它可以记录和管理项目的历史修改，并支持多人协作开发。通过Git，开发者可以轻松地跟踪代码变更、合并分支、回退版本等操作，保证代码的稳定性和可追溯性。...","permalink":"/post/前端--详解Git(快速入门)","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"提高开发效率：ES6技巧大全","uid":"26420f1034bff9b91a54684d743949a2","slug":"前端--一文轻松搞懂ES6-ES11(ES6详解)","date":"2023-01-12T00:36:22.000Z","updated":"2025-07-14T15:12:20.465Z","comments":true,"path":"api/articles/前端--一文轻松搞懂ES6-ES11(ES6详解).json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/693b39076a084dd39ab56802ff1834b9.jpeg","text":"ES6引入了箭头函数、模板字符串等特性，ES7加入了Array.prototype.includes()方法，ES8推出了async/await语法，ES9引入了Asynchronous Iteration，ES10增加了Array.flat()和Array.flatMap()方法，ES11则新增了可选链操作符和空值合并操作符。掌握这些语法能够提升前端开发效率和代码质量。...","permalink":"/post/前端--一文轻松搞懂ES6-ES11(ES6详解)","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"前端","slug":"前端","count":48,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}