{"title":"Java程序设计--常用API(中)","uid":"14d6bcd214a7a0ca6551995e61aaab69","slug":"Java程序设计 -- 常用API(中)（十）","date":"2022-03-21T14:44:56.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 常用API(中)（十）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","content":"<hr>\n<h1 id=\"1、Object\"><a href=\"#1、Object\" class=\"headerlink\" title=\"1、Object\"></a>1、Object</h1><h2 id=\"1-1-toString方法\"><a href=\"#1-1-toString方法\" class=\"headerlink\" title=\"1.1 toString方法\"></a>1.1 toString方法</h2><p>Object类的方法是一切子类对象都可以直接使用的，所以我们要学习Object类的方法。&#x3D;&#x3D;<strong>一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的祖宗类。</strong>&#x3D;&#x3D;</p>\n<p><strong>object类的常用方法:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public String toString()</td>\n<td align=\"center\">默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</td>\n</tr>\n<tr>\n<td align=\"center\">public boolean equals(Object o)</td>\n<td align=\"center\">默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">import java.util.Objects;\n\npublic class Student &#123; //extends Object&#123;\n    private String name;\n    private char sex;\n    private int age;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, char sex, int age) &#123;\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public char getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(char sex) &#123;\n        this.sex = sex;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n\n    @Override\n    public boolean equals(Object o) &#123;\n        // 1、判断是否是同一个对象比较，如果是返回true。\n        if (this == o) return true;\n        // 2、如果o是null返回false  如果o不是学生类型返回false  ...Student !=  ..Pig\n        if (o == null || this.getClass() != o.getClass()) return false;\n        // 3、说明o一定是学生类型而且不为null\n        Student student = (Student) o;\n        return sex == student.sex &amp;&amp; age == student.age &amp;&amp; Objects.equals(name, student.name);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, sex=&quot; + sex +\n                &quot;, age=&quot; + age +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">/**\n    目标：掌握Object类中toString方法的使用。\n */\npublic class Test1 &#123;\n    public static void main(String[] args) &#123;\n        Student s = new Student(&quot;周雄&quot;, &#39;男&#39;, 19);\n        // String rs = s.toString();\n        // System.out.println(rs);\n\n        // System.out.println(s.toString());\n\n        // 直接输出对象变量，默认可以省略toString调用不写的\n        System.out.println(s);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>object的toString方法:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public String toString()</td>\n<td align=\"center\">默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</td>\n</tr>\n</tbody></table>\n<ul>\n<li>开发中直接输出对象，默认输出对象的地址其实是毫无意义的。</li>\n<li>开发中输出对象变量，更多的时候是希望看到对象的内容数据而不是对象的地址信息。</li>\n</ul>\n<p>toString存在的意义：</p>\n<p>父类toString()方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息!</p>\n<h2 id=\"1-2-equals方法\"><a href=\"#1-2-equals方法\" class=\"headerlink\" title=\"1.2 equals方法\"></a>1.2 equals方法</h2><p>object的equals方法:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public boolean equals(Object o)</td>\n<td align=\"center\">默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</td>\n</tr>\n</tbody></table>\n<p>直接比较两个对象的地址是否相同完全可以用“&#x3D;&#x3D;”替代equals。</p>\n<p>equals存在的意义：</p>\n<p>父类equals方法存在的意义就是为了被子类重写，以便子类自己来定制比较规则。</p>\n<pre><code class=\"java\">import java.util.Objects;\n\n/**\n    目标：掌握Object类中equals方法的使用。\n */\npublic class Test2 &#123;\n    public static void main(String[] args) &#123;\n        Student s1 = new Student(&quot;周雄&quot;, &#39;男&#39;, 19);\n        Student s2 = new Student(&quot;周雄&quot;, &#39;男&#39;, 19);\n        // equals默认是比较2个对象的地址是否相同，子类重写后会调用子类重写的来比较内容是否相同。\n        System.out.println(s1.equals(s2));\n        System.out.println(s1 == s2);\n\n        System.out.println(Objects.equals(s1, s2));\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"2、Objects\"><a href=\"#2、Objects\" class=\"headerlink\" title=\"2、Objects\"></a>2、Objects</h1><p>Objects是一个工具类，提供了一些方法去完成一些功能。</p>\n<p>官方在进行字符串比较时，没有用字符串对象的的equals方法，而是选择了Objects的equals方法来比较。</p>\n<p>&#x3D;&#x3D;使用Objects的equals方法在进行对象的比较会更加安全&#x3D;&#x3D;</p>\n<p><strong>objects的常见方法:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public static boolean equals(object a，object b)</td>\n<td align=\"center\">比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行equals比较</td>\n</tr>\n<tr>\n<td align=\"center\">public static boolean isNull(0bject obj)</td>\n<td align=\"center\">判断变量是否为null ,为null返回true ,反之</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">import java.util.Objects;\n\n/**\n    目标：掌握objects类的常用方法:equals\n */\npublic class Test &#123;\n    public static void main(String[] args) &#123;\n        String s1 = null;\n        String s2 = new String(&quot;itheima&quot;);\n\n        // System.out.println(s1.equals(s2));   // 留下了隐患，可能出现空指针异常。\n\n        System.out.println(Objects.equals(s1, s2)); // 更安全，结果也是对的！\n\n\n\n        System.out.println(Objects.isNull(s1)); // true\n        System.out.println(s1 == null); // true\n\n        System.out.println(Objects.isNull(s2)); // false\n        System.out.println(s2 == null); // false\n\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"3、StringBuilder\"><a href=\"#3、StringBuilder\" class=\"headerlink\" title=\"3、StringBuilder\"></a>3、StringBuilder</h1><p>StringBuilder是一个可变的字符串类，我们可以把它看成是一个对象容器。</p>\n<p>作用:提高字符串的操作效率，如拼接、修改等。</p>\n<p><strong>StringBuilder构造器</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public StringBuilder()</td>\n<td align=\"center\">创建一个空白的可变的字符串对象，不包含任何内容</td>\n</tr>\n<tr>\n<td align=\"center\">public StringBuilder(String str)</td>\n<td align=\"center\">创建一个指定字符串内容的可变字符串对象</td>\n</tr>\n</tbody></table>\n<p><strong>StringBuilder常用方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public StringBuilder append(任意类型)</td>\n<td align=\"center\">添加数据并返回StringBuilder对象本身</td>\n</tr>\n<tr>\n<td align=\"center\">public StringBuilder reverse()</td>\n<td align=\"center\">将对象的内容反转</td>\n</tr>\n<tr>\n<td align=\"center\">public int length()</td>\n<td align=\"center\">返回对象内容长度</td>\n</tr>\n<tr>\n<td align=\"center\">public String toString()</td>\n<td align=\"center\">通过toString()就可以实现把StringBuilder转换为String</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">/**\n    目标：学会使用StringBuilder操作字符串,最终还需要知道它性能好的原因\n */\npublic class StringBuilderDemo1 &#123;\n    public static void main(String[] args) &#123;\n        StringBuilder sb = new StringBuilder(); // &quot;&quot;\n        sb.append(&quot;a&quot;);\n        sb.append(&quot;b&quot;);\n        sb.append(&quot;c&quot;);\n        sb.append(1);\n        sb.append(false);\n        sb.append(3.3);\n        sb.append(&quot;abc&quot;);\n        System.out.println(sb);\n\n        StringBuilder sb1 = new StringBuilder();\n        // 支持链式编程\n        sb1.append(&quot;a&quot;).append(&quot;b&quot;).append(&quot;c&quot;).append(&quot;我爱你中国&quot;);\n        System.out.println(sb1);\n\n        // 反转\n        sb1.reverse().append(&quot;110&quot;);\n        System.out.println(sb1);\n\n        System.out.println(sb1.length());\n\n        // 注意：StringBuilder只是拼接字符串的手段：效率好。\n        // 最终的目的还是要恢复成String类型。\n        StringBuilder sb2 = new StringBuilder();\n        sb2.append(&quot;123&quot;).append(&quot;456&quot;);\n        // 恢复成String类型\n        String rs = sb2.toString();\n        check(rs);\n    &#125;\n\n    public static void check(String data)&#123;\n        System.out.println(data);\n    &#125;\n&#125;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/844bbe1f8da94070b8d5a72af0e09a95.png#pic_center\"><br><img src=\"https://img-blog.csdnimg.cn/6254253a3ec348e886df49aa217089ed.png#pic_center\"></p>\n<hr>\n<h1 id=\"4、Math\"><a href=\"#4、Math\" class=\"headerlink\" title=\"4、Math\"></a>4、Math</h1><p>包含执行基本数字运算的方法，Math类没有提供公开的构造器。</p>\n<p>使用类中的成员，看类的成员是否都是静态的，如果是，通过类名就可以直接调用。</p>\n<p><strong>Math类的常用方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public static int abs(int a)</td>\n<td align=\"center\">获取参数绝对值</td>\n</tr>\n<tr>\n<td align=\"center\">public static double ceil( double a)</td>\n<td align=\"center\">向上取整</td>\n</tr>\n<tr>\n<td align=\"center\">public static double floor( double a)</td>\n<td align=\"center\">向下取整</td>\n</tr>\n<tr>\n<td align=\"center\">public static int round(float a)</td>\n<td align=\"center\">四舍五入</td>\n</tr>\n<tr>\n<td align=\"center\">public static int max(int a,int b)</td>\n<td align=\"center\">获取两个int值中的较大值</td>\n</tr>\n<tr>\n<td align=\"center\">public static double pow( double a, double b)</td>\n<td align=\"center\">返回a的b次幂的值</td>\n</tr>\n<tr>\n<td align=\"center\">public static double random()</td>\n<td align=\"center\">返回值为double的随机值，范围[0.0,1.0)</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">/**\n    目标：Math类的使用。\n */\npublic class MathDemo &#123;\n    public static void main(String[] args) &#123;\n        // 1.取绝对值:返回正数\n        System.out.println(Math.abs(10)); // 10\n        System.out.println(Math.abs(-10.3)); // 10.3\n\n        // 2.向上取整: 5\n        System.out.println(Math.ceil(4.00000001)); // 5.0\n        System.out.println(Math.ceil(4.0)); // 4.0\n        // 3.向下取整：4\n        System.out.println(Math.floor(4.99999999)); // 4.0\n        System.out.println(Math.floor(4.0)); // 4.0\n\n        // 4.求指数次方\n        System.out.println(Math.pow(2 , 3)); // 2^3 = 8.0\n        // 5.四舍五入 10\n        System.out.println(Math.round(4.49999)); // 4\n        System.out.println(Math.round(4.500001)); // 5\n\n        System.out.println(Math.random());  // 0.0 - 1.0 （包前不包后）\n\n        // 拓展： 3 - 9 之间的随机数  （0 - 6） + 3\n        //  [0 - 6] + 3\n        int data =  (int)(Math.random() * 7) + 3;\n        System.out.println(data);\n\n\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"5、System\"><a href=\"#5、System\" class=\"headerlink\" title=\"5、System\"></a>5、System</h1><p>System也是一个工具类，代表了当前系统，提供了一些与系统相关的方法。</p>\n<p><strong>System类的常用方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public static void exit(int status)</td>\n<td align=\"center\">终止当前运行的Java 虚拟机，非零表示异常终止</td>\n</tr>\n<tr>\n<td align=\"center\">public static long currentTimeMillis()</td>\n<td align=\"center\">返回当前系统的时间毫秒值形式</td>\n</tr>\n<tr>\n<td align=\"center\">public static void arraycopy(数据源数组,起始索引目的地数组,起始索引,拷贝个数)</td>\n<td align=\"center\">数组拷贝</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">import java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\n\n/**\n    目标：System系统类的使用。\n    System代表当前系统。（虚拟机系统）\n */\npublic class SystemDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;程序开始。。。&quot;);\n\n        // System.exit(0); // JVM终止！\n\n        // 2、计算机认为时间有起源：返回1970-1-1 00：00：00 走到此刻的总的毫秒值：时间毫秒值。\n        long time = System.currentTimeMillis();\n        System.out.println(time);\n\n        long startTime = System.currentTimeMillis();\n        // 进行时间的计算：性能分析\n        for (int i = 0; i &lt; 100000; i++) &#123;\n            System.out.println(&quot;输出：&quot; + i);\n        &#125;\n        long endTime = System.currentTimeMillis();\n        System.out.println((endTime - startTime)/1000.0 + &quot;s&quot;);\n\n\n        // 3、做数组拷贝（了解）\n\n        int[] arr1 = &#123;10, 20, 30, 40, 50, 60, 70&#125;;\n        int[] arr2 = new int[6]; // [0, 0, 0, 0, 0, 0] ==&gt;  [0, 0, 40, 50, 60, 0]\n        System.arraycopy(arr1, 3, arr2, 2, 3);\n        System.out.println(Arrays.toString(arr2));\n\n        System.out.println(&quot;-------------------&quot;);\n        double i = 10.0;\n        double j = 3.0;\n\n//\n//        System.out.println(k1);\n\n        System.out.println(&quot;程序结束。。。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h1 id=\"6、BigDecimal\"><a href=\"#6、BigDecimal\" class=\"headerlink\" title=\"6、BigDecimal\"></a>6、BigDecimal</h1><p>用于解决浮点型运算精度失真的问题</p>\n<pre><code class=\"java\">public static BigDecimal valueof(double val):包装浮点数成为BigDecimal对象。\n</code></pre>\n<p>BigDecima常用API</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public BigDecimal add(BigDecimal b)</td>\n<td align=\"center\">加法</td>\n</tr>\n<tr>\n<td align=\"center\">public BigDecimal subtract(BigDecimal b)</td>\n<td align=\"center\">减法</td>\n</tr>\n<tr>\n<td align=\"center\">public BigDecimal multiply(BigDecimal b)</td>\n<td align=\"center\">乘法</td>\n</tr>\n<tr>\n<td align=\"center\">public BigDecimal divide(BigDecimal b)</td>\n<td align=\"center\">除法</td>\n</tr>\n<tr>\n<td align=\"center\">public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)</td>\n<td align=\"center\">除法</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">import java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.NumberFormat;\n\n/**\n    目标：BigDecimal大数据类。\n */\npublic class BigDecimalDemo &#123;\n    public static void main(String[] args) &#123;\n        // 浮点型运算的时候直接+  * / 可能会出现数据失真（精度问题）。\n        System.out.println(0.09 + 0.01);\n        System.out.println(1.0 - 0.32);\n        System.out.println(1.015 * 100);\n        System.out.println(1.301 / 100);\n\n        System.out.println(&quot;-------------------------&quot;);\n        double a = 0.1;\n        double b = 0.2;\n        double c = a + b;\n        System.out.println(c);\n        System.out.println(&quot;--------------------------&quot;);\n        // 包装浮点型数据成为大数据对象 BigDeciaml\n        BigDecimal a1 = BigDecimal.valueOf(a);\n        BigDecimal b1 = BigDecimal.valueOf(b);\n        BigDecimal c1 = a1.add(b1);\n        // BigDecimal c1 = a1.subtract(b1);\n        // BigDecimal c1 = a1.multiply(b1);\n        // BigDecimal c1 = a1.divide(b1);\n        System.out.println(c1);\n\n        // 目的：double\n        double rs = c1.doubleValue();\n        System.out.println(rs);\n\n        // 注意事项：BigDecimal是一定要精度运算的\n        BigDecimal a11 = BigDecimal.valueOf(10.0);\n        BigDecimal b11 = BigDecimal.valueOf(3.0);\n        /**\n           参数一：除数 参数二：保留小数位数  参数三：舍入模式\n         */\n        BigDecimal c11 = a11.divide(b11, 2, RoundingMode.HALF_UP); // 3.3333333333\n        System.out.println(c11);\n\n\n        System.out.println(&quot;-------------------&quot;);\n    &#125;\n&#125;\n</code></pre>\n<hr>\n","feature":true,"text":"Object是Java中所有类的根类，它定义了一些通用的方法，如equals()和toString()。Math是Java提供的数学工具类，包含了一系列数学相关的静态方法，如求绝对值、平方根、三角函数等。BigDecimal是Java中用于精确计算的高精度数字类，它可以处理任意位数的小数，避免了浮点数计算中的精度丢失问题。...","permalink":"/post/Java程序设计 -- 常用API(中)（十）","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81Object\"><span class=\"toc-text\">1、Object</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-toString%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.1 toString方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-equals%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.2 equals方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Objects\"><span class=\"toc-text\">2、Objects</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81StringBuilder\"><span class=\"toc-text\">3、StringBuilder</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81Math\"><span class=\"toc-text\">4、Math</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81System\"><span class=\"toc-text\">5、System</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81BigDecimal\"><span class=\"toc-text\">6、BigDecimal</span></a></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java程序设计--常用API(下)","uid":"65aeac242f4186aad4881b96128bffa6","slug":"Java程序设计 -- 常用API(下)（十一）","date":"2022-03-22T11:19:57.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 常用API(下)（十一）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"日期类是Java中用于处理日期和时间的类，提供了日期和时间的操作、格式化和解析等功能。正则表达式是一种用于匹配和操作字符串的强大工具，Java通过Pattern和Matcher类提供了对正则表达式的支持。Lambda表达式是Java 8引入的一种新特性，用于简化函数式编程的表达方式，可以更简洁地表示匿名函数，提高代码的可读性和简洁性。...","permalink":"/post/Java程序设计 -- 常用API(下)（十一）","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true},"next_post":{"title":"Java程序设计--常用API(上)","uid":"b96805334df48e1df4b0636b2d6744aa","slug":"Java程序设计 -- 常用API(上)（九）","date":"2022-03-21T14:27:13.000Z","updated":"2025-07-14T15:12:20.460Z","comments":true,"path":"api/articles/Java程序设计 -- 常用API(上)（九）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/39b97c220e4c47a8a19e408b6dba7804.png","text":"String是Java中表示字符串的类，提供了丰富的字符串操作方法。ArrayList是Java中的动态数组实现，可以动态增加或减少元素。这两个类在Java编程中经常被用到，提供了便利的字符串处理和动态数组功能。...","permalink":"/post/Java程序设计 -- 常用API(上)（九）","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"后端","slug":"后端","count":22,"path":"api/categories/后端.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":true}}