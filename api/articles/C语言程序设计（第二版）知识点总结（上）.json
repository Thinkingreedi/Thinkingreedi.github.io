{"title":"C语言程序设计（第二版）知识点总结(上)","uid":"0a53341be894f519839526451962b94e","slug":"C语言程序设计（第二版）知识点总结（上）","date":"2022-01-10T02:01:04.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（上）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","content":"<hr>\n<h1 id=\"一、简单-C-程序设计\"><a href=\"#一、简单-C-程序设计\" class=\"headerlink\" title=\"一、简单 C 程序设计\"></a>一、简单 C 程序设计</h1><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>高级语言都能通过变量名来访问内存中的数据。用变量名来标识内存中的某个存储位置—-由一个或多个连续的字节组成，在程序中使用变量名，实际上引用的是内存中对应的某个存储位置。变量取名最好能做到“见名识义”。在 c 语言中，变量命名必须遵守以下规则：</p>\n<ul>\n<li>变量名可以由字母、数字和_（下划线）组成；</li>\n<li>变量名不能包含除_（下划线）以外的任何特殊字符，如：%、#、逗号，空格等；</li>\n<li>变量名必须以字母或_（下划线）开头；</li>\n<li>保留字（int、float 等）不能用作变量名，要区分大小写（A，a）。</li>\n</ul>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><p>32 位机的整数类型：<br><img src=\"https://img-blog.csdnimg.cn/576bb85babfe47d595697fa4934c57f0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><ol>\n<li>输出格式中的普通字符</li>\n</ol>\n<pre><code class=\"c\">printf(&quot;Hello World!\\n&quot;);\n</code></pre>\n<ol start=\"2\">\n<li>输出格式中的转换字符串<br>常用的转换字符串：<br><img src=\"https://img-blog.csdnimg.cn/584da144dcd34c8ba7a9581f9fd58073.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></li>\n<li>输出格式中的宽度修饰符<br>宽度修饰符用一个十进制整数来表示输出数据的位数，插在%与转换说明符之间，其作用是控制打印数据的宽度，也称为“域宽”。<br><strong>%md</strong>代表数据以十进制整数形式输出，宽度占 m 列，数据不足 m 列的<strong>左补空格</strong>，超过 m 列的情况下按实际位数输出。**%-md<strong>数据不足 m 列的</strong>右补空格**。</li>\n</ol>\n<pre><code class=\"c\">int salary = 15000;\nprintf(&quot;%10d&quot;,salary&quot;);\n//     15000\nint salary = 15000;\nprintf(&quot;%-10d&quot;,salary&quot;);\n//15000\n</code></pre>\n<h3 id=\"格式化输入\"><a href=\"#格式化输入\" class=\"headerlink\" title=\"格式化输入\"></a>格式化输入</h3><ol>\n<li><p>输入格式中的转换字符串<br>常用的转换字符串：<br><img src=\"https://img-blog.csdnimg.cn/668bb81ef37f4e2e9bf7a24a2ca72c2a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n</li>\n<li><p>读入 64 位整数<br>如果编译器支持__int64，用格式符%I64d，如果编译器支持；long long，用格式符%lld。</p>\n</li>\n<li><p>宽度<br>用十进制整数指定输入的宽度。</p>\n</li>\n</ol>\n<pre><code class=\"c\">scanf(&quot;%5d&quot;,&amp;a);\n</code></pre>\n<ol start=\"4\">\n<li>赋值抑制符号</li>\n</ol>\n<pre><code class=\"c\">/*赋值抑制符号*用以表示该输入项读入后不赋予相应的值，即跳过该输入值*/\n#include&lt;stdio.h&gt;//求出生年月日\n\nint main(void)\n&#123;\n    int year,mouth,day;\n    printf(&quot;请输入身份证号码:\\n&quot;);\n    scanf(&quot;%*6d%4d%2d%2d%*d&quot;,&amp;year,&amp;mouth,&amp;day);\n    printf(&quot;%4d-%02d-%02d\\n&quot;,year,mouth,day);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><p><img src=\"https://img-blog.csdnimg.cn/e1fd950862054f31816a7d6c1e4e6c42.png\"></p>\n<h3 id=\"浮点数据的输出\"><a href=\"#浮点数据的输出\" class=\"headerlink\" title=\"浮点数据的输出\"></a>浮点数据的输出</h3><ol>\n<li>转换字符串%f<br>格式转换符 f 用于浮点数据的输出格式限定。</li>\n</ol>\n<pre><code class=\"c\">printf(&quot;%f\\n&quot;,demo);//默认输出6位小数\n</code></pre>\n<ol start=\"2\">\n<li>转换字符串%m.nf<br><strong>m 表示输出宽度，而 n 表示精度，指定小数点后显示的数字个数。</strong></li>\n</ol>\n<h3 id=\"浮点数据的输入\"><a href=\"#浮点数据的输入\" class=\"headerlink\" title=\"浮点数据的输入\"></a>浮点数据的输入</h3><pre><code class=\"c\">float a;\ndouble b;\n\nscanf(&quot;%f&quot;,&amp;a);\nscanf(&quot;%lf&quot;,&amp;b);\n\nprintf(&quot;%f\\n&quot;,a);\nprintf(&quot;%f\\n&quot;,b);\n</code></pre>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><ol>\n<li>字面常量</li>\n<li>宏常量<br>#deine 编译指令的准确含义是，命令编译器将源代码中所有的标识符常量替换为替换文本，其效果与使用编辑器手工进行查找并替换相同。</li>\n</ol>\n<pre><code class=\"c\">#define PI 3.1415926//#define 标识符常量 替换文本\n</code></pre>\n<ol start=\"3\">\n<li>const 常量<br>const 给出了对应的内存地址，而不是像#define 给出的是替换文本，所以 const 定义的常量在程序运行过程中只有一份副本，而#define 定义的常量在内存中有若干份副本，而#define 定义的常量在内存中有若干份副本。</li>\n</ol>\n<pre><code class=\"c\">const double PI = 3.1415926;\n</code></pre>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>在执行算数运算时，通常要求操作数具有相同的数据类型。类型转换方式有以下 3 种：</p>\n<ol>\n<li>常用算数转换<br>当算数运算、关系运算或逻辑运算的两个操作数类型不同时，精度低的自动向精度高的转换，这称类型提升。数据类型由低级向高级排序为：<br>char -&gt;int-&gt;float-&gt;double</li>\n</ol>\n<pre><code class=\"c\">double a = 1.0/2;//2由int转换为double再进行除法运算\n</code></pre>\n<ol start=\"2\">\n<li>赋值时类型转换<br>在执行赋值运算时，会把赋值运算符右侧表达式的值转换为赋值运算符左侧变量的类型。</li>\n</ol>\n<pre><code class=\"c\">double a = 1;//把1.0赋值给a\nint i = 1.5;//把1赋值给i\n</code></pre>\n<ol start=\"3\">\n<li>类型转换运算符<br>（类型名）表达式，不改变操作数本身。</li>\n</ol>\n<pre><code class=\"c\">double a = 2.5;\nint n;\nn = (int)a;//将2赋值给n\n</code></pre>\n<h1 id=\"二、分支结构\"><a href=\"#二、分支结构\" class=\"headerlink\" title=\"二、分支结构\"></a>二、分支结构</h1><h3 id=\"if…else-语句\"><a href=\"#if…else-语句\" class=\"headerlink\" title=\"if…else 语句\"></a>if…else 语句</h3><p>if…else 语句通过对一个条件进行判断，当条件为真时，执行一个操作，否则执行另一个不同的操作。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//比较大小\n\nint main(void)\n&#123;\n    int a,b;\n    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);\n    if(a&gt;b)\n    &#123;\n        printf(&quot;%d\\n&quot;,a)\n    &#125;\n    else\n    &#123;\n        printf(&quot;%d\\n&quot;,b)\n    &#125;\n    return 0;\n</code></pre>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><pre><code class=\"c\">/*若条件（a&gt;b)成立，则条件表达式取值a;否则，取值b*/\n#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    int a,b,c,max;\n\n    scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);\n    max = (a&gt;b) ? a : b;\n    max = (max&gt;c) ? max : c;\n    printf(&quot;%d\\n&quot;,max);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"常见运算符优先级\"><a href=\"#常见运算符优先级\" class=\"headerlink\" title=\"常见运算符优先级\"></a>常见运算符优先级</h3><p><img src=\"https://img-blog.csdnimg.cn/abdf7ec067cb417483320567139f7030.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lul6aOOaQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<h3 id=\"switch-语句\"><a href=\"#switch-语句\" class=\"headerlink\" title=\"switch 语句\"></a>switch 语句</h3><pre><code class=\"c\">#include&lt;stdio.h&gt;//四则运算\n#include&lt;math.h&gt;\n\nint main(void)\n&#123;\n    char op;\n    double x,y;\n\n    scanf(&quot;%lf%c%lf&quot;,&amp;x,&amp;op,&amp;y);\n\n    switch(op)\n    &#123;\n        case &#39;+&#39;:printf(&quot;=%.2f\\n&quot;,x+y);break;\n        case &#39;-&#39;:printf(&quot;=%.2f\\n&quot;,x-y);break;\n        case &#39;*&#39;:printf(&quot;=%.2f\\n&quot;,x*y);break;\n        case &#39;/&#39;:\n            if(fabs(y)&gt;1e-6)&#123;\n                printf(&quot;=%.2f\\n&quot;,x/y);\n            &#125;\n            else&#123;\n                printf(&quot;wrong input\\n&quot;);\n            &#125;\n            break;\n        default :printf(&quot;wrong input\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"三、循环结构\"><a href=\"#三、循环结构\" class=\"headerlink\" title=\"三、循环结构\"></a>三、循环结构</h1><p>C 语言有三种循环语句，即 for 循环语句、while 循环语句和 do 语句、while 循环在循环体执行之前测试循环表达式，do 循环在循环体执行之后测试循环表达式，for 循环则非常适合那些指定次数的循环。</p>\n<pre><code class=\"c\">while(表达式)m\n    循环体语句;\n</code></pre>\n<pre><code class=\"c\">do\n    循环体语句\nwhile(表达式)\n</code></pre>\n<pre><code class=\"c\">for(表达式1；表达式2；表达式3)\n    语句\n</code></pre>\n<h3 id=\"break-语句\"><a href=\"#break-语句\" class=\"headerlink\" title=\"break 语句\"></a>break 语句</h3><p>break 的作用一般是提前结束循环过程。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//求素数\n#include&lt;math.h&gt;\n\nint main(void)\n&#123;\n    int i,k,m,find;\n\n    printf(&quot;输入一个正整数：\\n&quot;);\n    scanf(&quot;%d&quot;,&amp;m);\n    k = (int)sqrt(m);\n    find = 0;\n\n    for(i=2;i&lt;=k;i++)\n    &#123;\n        if(m%i==0)\n        &#123;\n            find = 1;\n            break;\n        &#125;\n    &#125;\n\n    if(find==1||m==1)\n    &#123;\n        printf(&quot;No\\n&quot;);\n    &#125;\n    else\n    &#123;\n        printf(&quot;Yes\\n&quot;);\n    &#125;\n    return 0;\n &#125;\n</code></pre>\n<h3 id=\"continue-语句\"><a href=\"#continue-语句\" class=\"headerlink\" title=\"continue 语句\"></a>continue 语句</h3><p>continue 语句能跳过循环体中尚未执行的语句，开始新一轮的循环。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//逢7过\n\nint main(void)\n&#123;\n    int i;\n\n    for(i=1;i&lt;=100;i++)\n    &#123;\n        if(i%7==0)\n            continue;\n\n        printf(&quot;%d &quot;,i);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"goto-语句\"><a href=\"#goto-语句\" class=\"headerlink\" title=\"goto 语句\"></a>goto 语句</h3><p>goto 语句可以跳转到函数中任何有标号的语句处。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    int sum=0,i=1;\n\nloop:sum +=i;\n    i++;\n    if(i&lt;=100)&#123;\n        goto loop;\n    &#125;\n    printf(&quot;%d\\n&quot;,sum);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"多实例测试\"><a href=\"#多实例测试\" class=\"headerlink\" title=\"多实例测试\"></a>多实例测试</h3><ol>\n<li>确定次数的多实例测试</li>\n</ol>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    int i=1,n;\n    printf(&quot;请输入测试次数：&quot;);\n    scanf(&quot;%d&quot;,&amp;n);\n\n    while(n--)\n    &#123;\n        printf(&quot;%d\\n&quot;,i++);\n     &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>以特殊输入作为结束标志的多实例测试</li>\n</ol>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    int n;\n\n    while(scanf(&quot;%d&quot;,&amp;n),n!=0)//输入0结束循环\n    &#123;\n        printf(&quot;%d\\n&quot;,n);\n     &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>以 EOF 结束的多实例测试</li>\n</ol>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    int n;\n\n    while(scanf(&quot;%d&quot;,&amp;n) !=EOF)\n    &#123;\n        printf(&quot;%d\\n&quot;,n);\n     &#125;\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"四、函数\"><a href=\"#四、函数\" class=\"headerlink\" title=\"四、函数\"></a>四、函数</h1><h3 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h3><pre><code class=\"c\">返回值类型 函数名 (形式参数列表)\n&#123;\n    变量声明;\n    函数实现过程;\n&#125;\n</code></pre>\n<p>返回值类型是返回给主函数的运算结果的数据类型。当返回值为 void 类型时说明函数没有返回值。函数名可以是任意的合法标识符，为了提高程序的可读性并减少注释，一般要求做到“见名至义”。形式参数列表是一组用逗号隔开的形式参数，它规定了函数被调用时应该接受到的参数。</p>\n<pre><code class=\"c\">#include&lt;stdio.h&gt;//输出100以内的全部素数\n#include&lt;math.h&gt;\n\nint prime(int m);\n\nint main(void)\n&#123;\n    int m;\n    for(m=2;m&lt;=100;m++)\n    &#123;\n        if(prime(m)!=0)\n            printf(&quot;%6d&quot;,m);\n    &#125;\n\n    printf(&quot;\\n&quot;);\n    return 0;\n &#125;\n\nint prime(int m)\n&#123;\n    int i,k;\n\n    if(m == 1)\n        return 0;\n\n    k = (int)sqrt(m);\n\n    for(i=2;i&lt;=k;i++)\n    &#123;\n        if(m%i==0)\n            return 0;\n     &#125;\n    return 1;\n &#125;\n</code></pre>\n<h3 id=\"变量的存储类型\"><a href=\"#变量的存储类型\" class=\"headerlink\" title=\"变量的存储类型\"></a>变量的存储类型</h3><ol>\n<li>auto 存储变量<br>auto 存储类型的变量只在所在块有效，在所在块被执行时获得内存单元，并在块终止时释放内存单元。</li>\n<li>static 存储类型<br>静态存储周期的变量所占用的存储单元是从程序运行的开始时刻分配和初始化的，并且只分配和初始化一次。</li>\n<li>extern 存储类型<br>extern 存储类型可以使几个源文件共享一个变量，提醒编译器需要访问定义在别处的变量。</li>\n<li>register 存储类型<br>寄存器是驻留在 CPU 中的存储单元，具有比内存更高的存取速度。</li>\n</ol>\n<h3 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h3><pre><code class=\"c\">#include&lt;stdio.h&gt;\n\nint gcd(int a,int b);\nint main(void)\n&#123;\n    int a,b,c;\n    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);\n    c = gcd(a,b);\n    printf(&quot;最大公约数为:%d\\n&quot;,c);\n    return 0;\n&#125;\nint gcd(int a,int b)\n&#123;\n    if(a%b==0)&#123;\n        return b;\n    &#125;\n    else&#123;\n        return gcd(b,a%b);\n    &#125;\n&#125;\n</code></pre>\n","feature":false,"text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（上）","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%AE%80%E5%8D%95-C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">一、简单 C 程序设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">整数类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">格式化输入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">浮点类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">浮点数据的输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">浮点数据的输入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">二、分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if%E2%80%A6else-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if…else 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">条件表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">常见运算符优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#switch-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">switch 语句</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三、循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#break-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">break 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#continue-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">continue 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#goto-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">goto 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">多实例测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">四、函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量的存储类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数的递归调用</span></a></li></ol></li></ol></li></ol>","author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言程序设计（第二版）知识点总结(中)","uid":"0ca2db43264aba823021e557298340df","slug":"C语言程序设计（第二版）知识点总结（中）","date":"2022-01-11T01:18:27.000Z","updated":"2025-07-14T15:12:20.458Z","comments":true,"path":"api/articles/C语言程序设计（第二版）知识点总结（中）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/80b418cc19e241938eb78767b2f2382a.png","text":"《C语言程序设计（第二版）》是一本经典的教材，涵盖了C语言程序设计的基本知识和技巧。本文将对该书进行知识点总结，包括数据类型、控制语句、函数、数组、指针等重要内容。我们将概述每个知识点的核心概念和用法，并提供一些实例来加深理解。希望这篇文章能够帮助读者系统地掌握《C语言程序设计（第二版）》中的知识，提高编程能力，为日后的项目开发打下坚实的基础。...","permalink":"/post/C语言程序设计（第二版）知识点总结（中）","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false},"next_post":{"title":"C++--类的深入剖析(下)","uid":"168349b15cc8fc12508a6c4a439d5818","slug":"C++--类的深入剖析（下）","date":"2021-04-22T02:58:09.000Z","updated":"2025-07-14T15:12:20.457Z","comments":true,"path":"api/articles/C++--类的深入剖析（下）.json","keywords":"web前端开发,web前端博客,个人博客,html,css,javascript,vue,react","cover":"https://img-blog.csdnimg.cn/506e6842fd8542408c76ef139e90ebd3.png","text":"C++中的类有一些进阶概念，包括friend函数、this指针和static成员。友元函数可以突破类的封装边界，this指针可以在成员函数中区分成员变量和局部变量，static成员可以在类的所有对象之间共享数据和行为。...","permalink":"/post/C++--类的深入剖析（下）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"类和对象","slug":"类和对象","count":3,"path":"api/tags/类和对象.json"}],"author":{"name":"会思想的苇草i","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"日拱一卒，功不唐捐 <br/> With each day's arduous effort,<br/>no achievement shall be in vain","socials":{"github":"https://github.com/Thinkingreedi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/ASHIYI66","juejin":"https://juejin.cn/user/4284166567110935","customs":{}}},"feature":false}}